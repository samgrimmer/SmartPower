using Microsoft.EntityFrameworkCore;
using SmartPower.Data.Entity.Model;

namespace SmartPower.Data.Entity
{
    public partial class DbContext : Microsoft.EntityFrameworkCore.DbContext
    {
        public DbContext() { }

        public DbContext(DbContextOptions<DbContext> options) : base(options) { }

        public virtual DbSet<DeleteVBvCheckBatchOneOffFeeReview> DeleteVBvCheckBatchOneOffFeeReviews { get; set; }
        public virtual DbSet<DeleteVBvCheckBudegtGapsBaseSub> DeleteVBvCheckBudegtGapsBaseSubs { get; set; }
        public virtual DbSet<DeleteVBvCheckCalConsumptionPre> DeleteVBvCheckCalConsumptionPres { get; set; }
        public virtual DbSet<DeleteVBvCheckCalConsumptionPre3> DeleteVBvCheckCalConsumptionPre3s { get; set; }
        public virtual DbSet<DeleteVBvCheckCarbonFactorArea> DeleteVBvCheckCarbonFactorAreas { get; set; }
        public virtual DbSet<DeleteVBvCheckCarbonFactorAreaEau> DeleteVBvCheckCarbonFactorAreaEaus { get; set; }
        public virtual DbSet<DeleteVBvCheckChargesNoGst> DeleteVBvCheckChargesNoGsts { get; set; }
        public virtual DbSet<DeleteVBvCheckChargesNoPpd> DeleteVBvCheckChargesNoPpds { get; set; }
        public virtual DbSet<DeleteVBvCheckChargesWithNoGst> DeleteVBvCheckChargesWithNoGsts { get; set; }
        public virtual DbSet<DeleteVBvCheckChargesWithNoPpd> DeleteVBvCheckChargesWithNoPpds { get; set; }
        public virtual DbSet<DeleteVBvCheckConsumptionCostsFinalSql> DeleteVBvCheckConsumptionCostsFinalSqls { get; set; }
        public virtual DbSet<DeleteVBvCheckDateGapsResult> DeleteVBvCheckDateGapsResults { get; set; }
        public virtual DbSet<DeleteVBvCheckExpectedRaw> DeleteVBvCheckExpectedRaws { get; set; }
        public virtual DbSet<DeleteVBvCheckFutureInvoiceEnteredDate> DeleteVBvCheckFutureInvoiceEnteredDates { get; set; }
        public virtual DbSet<DeleteVBvCheckFutureInvoiceIssueDate> DeleteVBvCheckFutureInvoiceIssueDates { get; set; }
        public virtual DbSet<DeleteVBvCheckGreenEneregyVerification> DeleteVBvCheckGreenEneregyVerifications { get; set; }
        public virtual DbSet<DeleteVBvCheckGsttickmismatchTTariffstInvoice> DeleteVBvCheckGsttickmismatchTTariffstInvoices { get; set; }
        public virtual DbSet<DeleteVBvCheckHeaderConsumptionIsZero> DeleteVBvCheckHeaderConsumptionIsZeros { get; set; }
        public virtual DbSet<DeleteVBvCheckHeaderConsumptionNotMatchLine> DeleteVBvCheckHeaderConsumptionNotMatchLines { get; set; }
        public virtual DbSet<DeleteVBvCheckHeaderNonBlankField> DeleteVBvCheckHeaderNonBlankFields { get; set; }
        public virtual DbSet<DeleteVBvCheckInvSiteNotInSite> DeleteVBvCheckInvSiteNotInSites { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoiceBilledintoFuture> DeleteVBvCheckInvoiceBilledintoFutures { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoiceEndDateExceedsCeasedDate> DeleteVBvCheckInvoiceEndDateExceedsCeasedDates { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoiceNilReversal> DeleteVBvCheckInvoiceNilReversals { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoiceNoDaysHeaderVsDate> DeleteVBvCheckInvoiceNoDaysHeaderVsDates { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoiceNoDaysHeaderVsLines2> DeleteVBvCheckInvoiceNoDaysHeaderVsLines2s { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoiceNoDaysHeaderVsLines3> DeleteVBvCheckInvoiceNoDaysHeaderVsLines3s { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoiceOpeningBalanceTypeInvalid> DeleteVBvCheckInvoiceOpeningBalanceTypeInvalids { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoiceTest1> DeleteVBvCheckInvoiceTest1s { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoiceTest2> DeleteVBvCheckInvoiceTest2s { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoiceTest3> DeleteVBvCheckInvoiceTest3s { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoiceTest4> DeleteVBvCheckInvoiceTest4s { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoiceTest5> DeleteVBvCheckInvoiceTest5s { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoiceTest6> DeleteVBvCheckInvoiceTest6s { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoiceTest7> DeleteVBvCheckInvoiceTest7s { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoiceTest7SubAogLine> DeleteVBvCheckInvoiceTest7SubAogLines { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoiceTotalsValidation> DeleteVBvCheckInvoiceTotalsValidations { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoiceTotalsValidationTest1> DeleteVBvCheckInvoiceTotalsValidationTest1s { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoiceTotalsValidationTest10> DeleteVBvCheckInvoiceTotalsValidationTest10s { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoiceTotalsValidationTest11> DeleteVBvCheckInvoiceTotalsValidationTest11s { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoiceTotalsValidationTest12> DeleteVBvCheckInvoiceTotalsValidationTest12s { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoiceTotalsValidationTest13> DeleteVBvCheckInvoiceTotalsValidationTest13s { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoiceTotalsValidationTest14> DeleteVBvCheckInvoiceTotalsValidationTest14s { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoiceTotalsValidationTest2> DeleteVBvCheckInvoiceTotalsValidationTest2s { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoiceTotalsValidationTest3> DeleteVBvCheckInvoiceTotalsValidationTest3s { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoiceTotalsValidationTest4> DeleteVBvCheckInvoiceTotalsValidationTest4s { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoiceTotalsValidationTest5> DeleteVBvCheckInvoiceTotalsValidationTest5s { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoiceTotalsValidationTest6> DeleteVBvCheckInvoiceTotalsValidationTest6s { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoiceTotalsValidationTest7> DeleteVBvCheckInvoiceTotalsValidationTest7s { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoiceTotalsValidationTest8> DeleteVBvCheckInvoiceTotalsValidationTest8s { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoiceTotalsValidationTest9> DeleteVBvCheckInvoiceTotalsValidationTest9s { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoiceUnitTypeView> DeleteVBvCheckInvoiceUnitTypeViews { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoicesGstVsTariffsGst> DeleteVBvCheckInvoicesGstVsTariffsGsts { get; set; }
        public virtual DbSet<DeleteVBvCheckInvoicesPpdVsTariffsPpd> DeleteVBvCheckInvoicesPpdVsTariffsPpds { get; set; }
        public virtual DbSet<DeleteVBvCheckKgVsCalculatedKWh> DeleteVBvCheckKgVsCalculatedKWhs { get; set; }
        public virtual DbSet<DeleteVBvCheckLineTotalNotBalancing1> DeleteVBvCheckLineTotalNotBalancing1s { get; set; }
        public virtual DbSet<DeleteVBvCheckLineTotalNotBalancing2> DeleteVBvCheckLineTotalNotBalancing2s { get; set; }
        public virtual DbSet<DeleteVBvCheckLineTotalsFromTariff> DeleteVBvCheckLineTotalsFromTariffs { get; set; }
        public virtual DbSet<DeleteVBvCheckMeterReadFinal> DeleteVBvCheckMeterReadFinals { get; set; }
        public virtual DbSet<DeleteVBvCheckMultipleInvBatch> DeleteVBvCheckMultipleInvBatches { get; set; }
        public virtual DbSet<DeleteVBvCheckMultipleInvoiceTest> DeleteVBvCheckMultipleInvoiceTests { get; set; }
        public virtual DbSet<DeleteVBvCheckMultipleInvoicesSql> DeleteVBvCheckMultipleInvoicesSqls { get; set; }
        public virtual DbSet<DeleteVBvCheckMultiplierNotMatchFinal> DeleteVBvCheckMultiplierNotMatchFinals { get; set; }
        public virtual DbSet<DeleteVBvCheckNullSiteStartDate> DeleteVBvCheckNullSiteStartDates { get; set; }
        public virtual DbSet<DeleteVBvCheckNullValueInvoiceLine> DeleteVBvCheckNullValueInvoiceLines { get; set; }
        public virtual DbSet<DeleteVBvCheckNullValueInvoiceLinesMeterReadingfield> DeleteVBvCheckNullValueInvoiceLinesMeterReadingfields { get; set; }
        public virtual DbSet<DeleteVBvCheckOcandWumeterRead> DeleteVBvCheckOcandWumeterReads { get; set; }
        public virtual DbSet<DeleteVBvCheckOpeningBalNoGst> DeleteVBvCheckOpeningBalNoGsts { get; set; }
        public virtual DbSet<DeleteVBvCheckPpd> DeleteVBvCheckPpds { get; set; }
        public virtual DbSet<DeleteVBvCheckPpdexGstFinal> DeleteVBvCheckPpdexGstFinals { get; set; }
        public virtual DbSet<DeleteVBvCheckPpdexGstcheckCalDi> DeleteVBvCheckPpdexGstcheckCalDis { get; set; }
        public virtual DbSet<DeleteVBvCheckPpdtickmismatchTTariffstInvoice> DeleteVBvCheckPpdtickmismatchTTariffstInvoices { get; set; }
        public virtual DbSet<DeleteVBvCheckRateIdnotintRate> DeleteVBvCheckRateIdnotintRates { get; set; }
        public virtual DbSet<DeleteVBvCheckReadingGap> DeleteVBvCheckReadingGaps { get; set; }
        public virtual DbSet<DeleteVBvCheckReadingNilRev> DeleteVBvCheckReadingNilRevs { get; set; }
        public virtual DbSet<DeleteVBvCheckSiteCeasedDatesIsBlank> DeleteVBvCheckSiteCeasedDatesIsBlanks { get; set; }
        public virtual DbSet<DeleteVBvCheckSitesCeasedFinalInvoice> DeleteVBvCheckSitesCeasedFinalInvoices { get; set; }
        public virtual DbSet<DeleteVBvCheckSitesNoInvoice> DeleteVBvCheckSitesNoInvoices { get; set; }
        public virtual DbSet<DeleteVBvCheckSolarRebates4> DeleteVBvCheckSolarRebates4s { get; set; }
        public virtual DbSet<DeleteVBvCheckSplitCheck> DeleteVBvCheckSplitChecks { get; set; }
        public virtual DbSet<DeleteVBvCheckSumInvTotalsValidationTest1> DeleteVBvCheckSumInvTotalsValidationTest1s { get; set; }
        public virtual DbSet<DeleteVBvCheckSumInvTotalsValidationTest10> DeleteVBvCheckSumInvTotalsValidationTest10s { get; set; }
        public virtual DbSet<DeleteVBvCheckSumInvTotalsValidationTest11> DeleteVBvCheckSumInvTotalsValidationTest11s { get; set; }
        public virtual DbSet<DeleteVBvCheckSumInvTotalsValidationTest12> DeleteVBvCheckSumInvTotalsValidationTest12s { get; set; }
        public virtual DbSet<DeleteVBvCheckSumInvTotalsValidationTest13Main> DeleteVBvCheckSumInvTotalsValidationTest13Mains { get; set; }
        public virtual DbSet<DeleteVBvCheckSumInvTotalsValidationTest2> DeleteVBvCheckSumInvTotalsValidationTest2s { get; set; }
        public virtual DbSet<DeleteVBvCheckSumInvTotalsValidationTest3> DeleteVBvCheckSumInvTotalsValidationTest3s { get; set; }
        public virtual DbSet<DeleteVBvCheckSumInvTotalsValidationTest4Final> DeleteVBvCheckSumInvTotalsValidationTest4Finals { get; set; }
        public virtual DbSet<DeleteVBvCheckSumInvTotalsValidationTest4sub2> DeleteVBvCheckSumInvTotalsValidationTest4sub2s { get; set; }
        public virtual DbSet<DeleteVBvCheckSumInvTotalsValidationTest5> DeleteVBvCheckSumInvTotalsValidationTest5s { get; set; }
        public virtual DbSet<DeleteVBvCheckSumInvTotalsValidationTest6> DeleteVBvCheckSumInvTotalsValidationTest6s { get; set; }
        public virtual DbSet<DeleteVBvCheckSumInvTotalsValidationTest6final> DeleteVBvCheckSumInvTotalsValidationTest6finals { get; set; }
        public virtual DbSet<DeleteVBvCheckSumInvTotalsValidationTest6final1> DeleteVBvCheckSumInvTotalsValidationTest6final1s { get; set; }
        public virtual DbSet<DeleteVBvCheckSumInvTotalsValidationTest6sub4> DeleteVBvCheckSumInvTotalsValidationTest6sub4s { get; set; }
        public virtual DbSet<DeleteVBvCheckSumInvTotalsValidationTest7> DeleteVBvCheckSumInvTotalsValidationTest7s { get; set; }
        public virtual DbSet<DeleteVBvCheckSumInvTotalsValidationTest719112018> DeleteVBvCheckSumInvTotalsValidationTest719112018s { get; set; }
        public virtual DbSet<DeleteVBvCheckSumInvTotalsValidationTest8> DeleteVBvCheckSumInvTotalsValidationTest8s { get; set; }
        public virtual DbSet<DeleteVBvCheckSumInvTotalsValidationTest9> DeleteVBvCheckSumInvTotalsValidationTest9s { get; set; }
        public virtual DbSet<DeleteVBvCheckSumInvTotalsValidationTesting1> DeleteVBvCheckSumInvTotalsValidationTesting1s { get; set; }
        public virtual DbSet<DeleteVBvCheckTariffIdnotintTariff> DeleteVBvCheckTariffIdnotintTariffs { get; set; }
        public virtual DbSet<DeleteVBvCheckTariffSiteNoMismatch> DeleteVBvCheckTariffSiteNoMismatches { get; set; }
        public virtual DbSet<DeleteVBvCheckUnitMultiplierIntegrity> DeleteVBvCheckUnitMultiplierIntegrities { get; set; }
        public virtual DbSet<DeleteVBvCheckUnitMultiplierVerification> DeleteVBvCheckUnitMultiplierVerifications { get; set; }
        public virtual DbSet<DeleteVBvCheckUnitMultiplierVerificationDay> DeleteVBvCheckUnitMultiplierVerificationDays { get; set; }
        public virtual DbSet<DeleteVBvCheckUnitMultiplierVerificationLossFactor> DeleteVBvCheckUnitMultiplierVerificationLossFactors { get; set; }
        public virtual DbSet<DeleteVBvCheckUnlockedBatch> DeleteVBvCheckUnlockedBatches { get; set; }
        public virtual DbSet<DeleteVBvChecksDateGap> DeleteVBvChecksDateGaps { get; set; }
        public virtual DbSet<DeleteVBvChecksDateGapLastInvoice> DeleteVBvChecksDateGapLastInvoices { get; set; }
        public virtual DbSet<DeleteVBvChecksMjToKwhTest> DeleteVBvChecksMjToKwhTests { get; set; }
        public virtual DbSet<DeleteVBvChecksSplitRetailerAccountNoMismatch> DeleteVBvChecksSplitRetailerAccountNoMismatches { get; set; }
        public virtual DbSet<DeleteVBvChecksSplitSiteStatusMismatch> DeleteVBvChecksSplitSiteStatusMismatches { get; set; }
        public virtual DbSet<DeleteVBvChecksSplitsAwaitingWork> DeleteVBvChecksSplitsAwaitingWorks { get; set; }
        public virtual DbSet<DeleteVBvChecksSplitsUndeletedCheck> DeleteVBvChecksSplitsUndeletedChecks { get; set; }
        public virtual DbSet<DeleteVBvChecksTouInvoiceMonth> DeleteVBvChecksTouInvoiceMonths { get; set; }
        public virtual DbSet<DeleteVReportsAnnualConsumptionDollar> DeleteVReportsAnnualConsumptionDollars { get; set; }
        public virtual DbSet<DeleteVReportsAnnualConsumptionDollarsInclReversal> DeleteVReportsAnnualConsumptionDollarsInclReversals { get; set; }
        public virtual DbSet<DeleteVReportsAnnualCostInclReversal> DeleteVReportsAnnualCostInclReversals { get; set; }
        public virtual DbSet<TActivityManagement> TActivityManagements { get; set; }
        public virtual DbSet<TActivityManagementAction> TActivityManagementActions { get; set; }
        public virtual DbSet<TActivityManagementLog> TActivityManagementLogs { get; set; }
        public virtual DbSet<TActivityManagementObjectLink> TActivityManagementObjectLinks { get; set; }
        public virtual DbSet<TBatch> TBatches { get; set; }
        public virtual DbSet<TBatchesCustomerInvNo> TBatchesCustomerInvNos { get; set; }
        public virtual DbSet<TBvBatchNumber> TBvBatchNumbers { get; set; }
        public virtual DbSet<TBvBatchNumberEdi> TBvBatchNumberEdis { get; set; }
        public virtual DbSet<TBvBatchNumberEdiLookup> TBvBatchNumberEdiLookups { get; set; }
        public virtual DbSet<TBvBatchNumberHedge> TBvBatchNumberHedges { get; set; }
        public virtual DbSet<TBvCheckExpectedRawBase> TBvCheckExpectedRawBases { get; set; }
        public virtual DbSet<TBvCheckInvoiceHistoryHighlight> TBvCheckInvoiceHistoryHighlights { get; set; }
        public virtual DbSet<TBvCheckLineTotalsFromTariff> TBvCheckLineTotalsFromTariffs { get; set; }
        public virtual DbSet<TBvCheckSite> TBvCheckSites { get; set; }
        public virtual DbSet<TBvCheckSumInvTotalsValidation> TBvCheckSumInvTotalsValidations { get; set; }
        public virtual DbSet<TBvChecksDateGap> TBvChecksDateGaps { get; set; }
        public virtual DbSet<TBvChecksDuplicateIcp> TBvChecksDuplicateIcps { get; set; }
        public virtual DbSet<TBvChecksEstimate> TBvChecksEstimates { get; set; }
        public virtual DbSet<TBvChecksExpectedRaw> TBvChecksExpectedRaws { get; set; }
        public virtual DbSet<TBvChecksLastInvoiceEstimate> TBvChecksLastInvoiceEstimates { get; set; }
        public virtual DbSet<TBvChecksReadingGap> TBvChecksReadingGaps { get; set; }
        public virtual DbSet<TBvExpectedRawInvoice> TBvExpectedRawInvoices { get; set; }
        public virtual DbSet<TBvSpinHedge> TBvSpinHedges { get; set; }
        public virtual DbSet<TBvcEstimatesCheck> TBvcEstimatesChecks { get; set; }
        public virtual DbSet<TBvcNoOfInvoicesNetAmt> TBvcNoOfInvoicesNetAmts { get; set; }
        public virtual DbSet<TBvcNoOfInvoicesNetAmtDueDate> TBvcNoOfInvoicesNetAmtDueDates { get; set; }
        public virtual DbSet<TCarbonFactorArea> TCarbonFactorAreas { get; set; }
        public virtual DbSet<TClient> TClients { get; set; }
        public virtual DbSet<TCo2Emission> TCo2Emissions { get; set; }
        public virtual DbSet<TContact> TContacts { get; set; }
        public virtual DbSet<TContactsSite> TContactsSites { get; set; }
        public virtual DbSet<TContactsSitesPrimaryContact> TContactsSitesPrimaryContacts { get; set; }
        public virtual DbSet<TCostCentre> TCostCentres { get; set; }
        public virtual DbSet<TDataManagementBatchNo> TDataManagementBatchNos { get; set; }
        public virtual DbSet<TDataManagementBatchNumber> TDataManagementBatchNumbers { get; set; }
        public virtual DbSet<TDmUnitType> TDmUnitTypes { get; set; }
        public virtual DbSet<TDmUnitTypeOptionSelected> TDmUnitTypeOptionSelecteds { get; set; }
        public virtual DbSet<TDuplicateInvoice> TDuplicateInvoices { get; set; }
        public virtual DbSet<TEdiLookupBatchNumber> TEdiLookupBatchNumbers { get; set; }
        public virtual DbSet<TEdiLookupIcp1> TEdiLookupIcp1s { get; set; }
        public virtual DbSet<TEdiLookupIcpStep1> TEdiLookupIcpStep1s { get; set; }
        public virtual DbSet<TEdiLookupSiteType> TEdiLookupSiteTypes { get; set; }
        public virtual DbSet<TEdiRateCat> TEdiRateCats { get; set; }
        public virtual DbSet<TEnvAccrualsSummaryMtreport> TEnvAccrualsSummaryMtreports { get; set; }
        public virtual DbSet<TEnvBySiteValue> TEnvBySiteValues { get; set; }
        public virtual DbSet<TEnvCreditsFlag> TEnvCreditsFlags { get; set; }
        public virtual DbSet<TEnvDailySummaryMtreport> TEnvDailySummaryMtreports { get; set; }
        public virtual DbSet<TEnvDateRangeEstimetMtreport> TEnvDateRangeEstimetMtreports { get; set; }
        public virtual DbSet<TEnvDateRangeMasterMtreport> TEnvDateRangeMasterMtreports { get; set; }
        public virtual DbSet<TEnvDateRangeMasterMtreportHistory> TEnvDateRangeMasterMtreportHistories { get; set; }
        public virtual DbSet<TEnvDateRangeMtreport> TEnvDateRangeMtreports { get; set; }
        public virtual DbSet<TEnvDateRangeSiteCeased> TEnvDateRangeSiteCeaseds { get; set; }
        public virtual DbSet<TEnvInvoicesRangeMtreport> TEnvInvoicesRangeMtreports { get; set; }
        public virtual DbSet<TEnvRangeCountMtreport> TEnvRangeCountMtreports { get; set; }
        public virtual DbSet<TEnvSummaryMtreport> TEnvSummaryMtreports { get; set; }
        public virtual DbSet<TImwAccrualsBase> TImwAccrualsBases { get; set; }
        public virtual DbSet<TImwAccrualsBaseline> TImwAccrualsBaselines { get; set; }
        public virtual DbSet<TInputType> TInputTypes { get; set; }
        public virtual DbSet<TInvoice> TInvoices { get; set; }
        public virtual DbSet<TInvoiceImportCatLine> TInvoiceImportCatLines { get; set; }
        public virtual DbSet<TInvoiceImportHeader> TInvoiceImportHeaders { get; set; }
        public virtual DbSet<TInvoiceImportLine> TInvoiceImportLines { get; set; }
        public virtual DbSet<TInvoiceImportMeridianCredit> TInvoiceImportMeridianCredits { get; set; }
        public virtual DbSet<TInvoiceImportMeridianHeader> TInvoiceImportMeridianHeaders { get; set; }
        public virtual DbSet<TInvoiceImportMeridianHeader1> TInvoiceImportMeridianHeader1s { get; set; }
        public virtual DbSet<TInvoiceImportMeridianLine> TInvoiceImportMeridianLines { get; set; }
        public virtual DbSet<TInvoiceImportMeridianSummary> TInvoiceImportMeridianSummaries { get; set; }
        public virtual DbSet<TInvoiceLine> TInvoiceLines { get; set; }
        public virtual DbSet<TInvoiceLinesArchived> TInvoiceLinesArchiveds { get; set; }
        public virtual DbSet<TInvoiceLinesArchivedOld> TInvoiceLinesArchivedOlds { get; set; }
        public virtual DbSet<TInvoicesArchived> TInvoicesArchiveds { get; set; }
        public virtual DbSet<TInvoicesArchivedOld> TInvoicesArchivedOlds { get; set; }
        public virtual DbSet<TIo> TIos { get; set; }
        public virtual DbSet<TJrnlBatchNumber> TJrnlBatchNumbers { get; set; }
        public virtual DbSet<TLionBatchNumber> TLionBatchNumbers { get; set; }
        public virtual DbSet<TMdeDefaultValue> TMdeDefaultValues { get; set; }
        public virtual DbSet<TMeter> TMeters { get; set; }
        public virtual DbSet<TMobilJournal> TMobilJournals { get; set; }
        public virtual DbSet<TOptionsSelected> TOptionsSelecteds { get; set; }
        public virtual DbSet<TOutage> TOutages { get; set; }
        public virtual DbSet<TPayfileBatch> TPayfileBatches { get; set; }
        public virtual DbSet<TPayfileGeccV> TPayfileGeccVs { get; set; }
        public virtual DbSet<TRate> TRates { get; set; }
        public virtual DbSet<TRatesLookupCreateRate> TRatesLookupCreateRates { get; set; }
        public virtual DbSet<TReportRepBatchNumber> TReportRepBatchNumbers { get; set; }
        public virtual DbSet<TReportRepositoryCrosstabBase> TReportRepositoryCrosstabBases { get; set; }
        public virtual DbSet<TRetailer> TRetailers { get; set; }
        public virtual DbSet<TReversalsBulkList> TReversalsBulkLists { get; set; }
        public virtual DbSet<TSite> TSites { get; set; }
        public virtual DbSet<TSiteLocation> TSiteLocations { get; set; }
        public virtual DbSet<TSitesContract> TSitesContracts { get; set; }
        public virtual DbSet<TSitesLookupCreateSite> TSitesLookupCreateSites { get; set; }
        public virtual DbSet<TSitesLookupIssue> TSitesLookupIssues { get; set; }
        public virtual DbSet<TSplitBatchNumber> TSplitBatchNumbers { get; set; }
        public virtual DbSet<TSplitInvoicesConfig> TSplitInvoicesConfigs { get; set; }
        public virtual DbSet<TSummaryAccrual> TSummaryAccruals { get; set; }
        public virtual DbSet<TSummaryBudget> TSummaryBudgets { get; set; }
        public virtual DbSet<TSummaryCo2Factor> TSummaryCo2Factors { get; set; }
        public virtual DbSet<TSummaryConfig> TSummaryConfigs { get; set; }
        public virtual DbSet<TSummaryDatum> TSummaryData { get; set; }
        public virtual DbSet<TSummaryDatumDatum> TSummaryDatumData { get; set; }
        public virtual DbSet<TSummaryEui> TSummaryEuis { get; set; }
        public virtual DbSet<TSummaryFiltersBySite> TSummaryFiltersBySites { get; set; }
        public virtual DbSet<TSummaryTrend> TSummaryTrends { get; set; }
        public virtual DbSet<TTariff> TTariffs { get; set; }
        public virtual DbSet<TTariffsLookupCreateRate> TTariffsLookupCreateRates { get; set; }
        public virtual DbSet<TTempEstimateCount> TTempEstimateCounts { get; set; }
        public virtual DbSet<TTempEstimateThreeInARow> TTempEstimateThreeInARows { get; set; }
        public virtual DbSet<TTempNoDaysMatchCalculatesDay> TTempNoDaysMatchCalculatesDays { get; set; }
        public virtual DbSet<TVBvcDuplicateSupplierInvNumberBase> TVBvcDuplicateSupplierInvNumberBases { get; set; }
        public virtual DbSet<TVBvcExpectedRaw> TVBvcExpectedRaws { get; set; }
        public virtual DbSet<TVBvcExpectedRawBase> TVBvcExpectedRawBases { get; set; }
        public virtual DbSet<TempInvoice> TempInvoices { get; set; }
        public virtual DbSet<TempInvoiceLine> TempInvoiceLines { get; set; }
        public virtual DbSet<VAnnualConsumption1> VAnnualConsumption1s { get; set; }
        public virtual DbSet<VAnnualConsumptionFinal> VAnnualConsumptionFinals { get; set; }
        public virtual DbSet<VBatchesCustomerInvNo> VBatchesCustomerInvNos { get; set; }
        public virtual DbSet<VBpayCodeCurrentClient> VBpayCodeCurrentClients { get; set; }
        public virtual DbSet<VBvCalcInvoiceFunctionLinesSumGst> VBvCalcInvoiceFunctionLinesSumGsts { get; set; }
        public virtual DbSet<VBvCalcInvoiceFunctionLinesSumGstBase> VBvCalcInvoiceFunctionLinesSumGstBases { get; set; }
        public virtual DbSet<VBvCalcInvoiceFunctionLinesSumPpd> VBvCalcInvoiceFunctionLinesSumPpds { get; set; }
        public virtual DbSet<VBvCalcInvoiceFunctionLinesSumPpdBase> VBvCalcInvoiceFunctionLinesSumPpdBases { get; set; }
        public virtual DbSet<VBvCalcInvoiceFunctionLinesSumPpdGst> VBvCalcInvoiceFunctionLinesSumPpdGsts { get; set; }
        public virtual DbSet<VBvCalcInvoiceFunctionLinesSumPpdGstBase> VBvCalcInvoiceFunctionLinesSumPpdGstBases { get; set; }
        public virtual DbSet<VBvCalcInvoiceFunctionSelect> VBvCalcInvoiceFunctionSelects { get; set; }
        public virtual DbSet<VBvCalcInvoiceFunctionSelectBase> VBvCalcInvoiceFunctionSelectBases { get; set; }
        public virtual DbSet<VBvCalcInvoiceFuntionLinesSum> VBvCalcInvoiceFuntionLinesSums { get; set; }
        public virtual DbSet<VBvCheckCalConsumptionPre1> VBvCheckCalConsumptionPre1s { get; set; }
        public virtual DbSet<VBvCheckCalConsumptionPre2> VBvCheckCalConsumptionPre2s { get; set; }
        public virtual DbSet<VBvCheckConsumptionCostBase> VBvCheckConsumptionCostBases { get; set; }
        public virtual DbSet<VBvCheckExpectedRawBase> VBvCheckExpectedRawBases { get; set; }
        public virtual DbSet<VBvCheckGsttickmismatchTTariffstInvoicessub> VBvCheckGsttickmismatchTTariffstInvoicessubs { get; set; }
        public virtual DbSet<VBvCheckHasActualRead> VBvCheckHasActualReads { get; set; }
        public virtual DbSet<VBvCheckHeaderConsumptionIsZero1> VBvCheckHeaderConsumptionIsZero1s { get; set; }
        public virtual DbSet<VBvCheckInvoiceNoDaysHeaderVsLine> VBvCheckInvoiceNoDaysHeaderVsLines { get; set; }
        public virtual DbSet<VBvCheckInvoiceNoDaysHeaderVsLines1> VBvCheckInvoiceNoDaysHeaderVsLines1s { get; set; }
        public virtual DbSet<VBvCheckInvoiceNoDaysSub> VBvCheckInvoiceNoDaysSubs { get; set; }
        public virtual DbSet<VBvCheckInvoiceNoDaysSumUnitsUsed> VBvCheckInvoiceNoDaysSumUnitsUseds { get; set; }
        public virtual DbSet<VBvCheckInvoiceTest1Sub> VBvCheckInvoiceTest1Subs { get; set; }
        public virtual DbSet<VBvCheckInvoicesHistory2> VBvCheckInvoicesHistory2s { get; set; }
        public virtual DbSet<VBvCheckKgVsCalculatedKWhPre> VBvCheckKgVsCalculatedKWhPres { get; set; }
        public virtual DbSet<VBvCheckKwhSum> VBvCheckKwhSums { get; set; }
        public virtual DbSet<VBvCheckLastInvoice> VBvCheckLastInvoices { get; set; }
        public virtual DbSet<VBvCheckLastInvoiceWithSpin> VBvCheckLastInvoiceWithSpins { get; set; }
        public virtual DbSet<VBvCheckLineTotalNotBalancing> VBvCheckLineTotalNotBalancings { get; set; }
        public virtual DbSet<VBvCheckMjSum> VBvCheckMjSums { get; set; }
        public virtual DbSet<VBvCheckMultipleInvoiceTestTce> VBvCheckMultipleInvoiceTestTces { get; set; }
        public virtual DbSet<VBvCheckMultipleInvoicesBySiteNo> VBvCheckMultipleInvoicesBySiteNos { get; set; }
        public virtual DbSet<VBvCheckMultiplierNotMatch> VBvCheckMultiplierNotMatches { get; set; }
        public virtual DbSet<VBvCheckMultiplierNotMatchPre> VBvCheckMultiplierNotMatchPres { get; set; }
        public virtual DbSet<VBvCheckPpdexGstcheck> VBvCheckPpdexGstchecks { get; set; }
        public virtual DbSet<VBvCheckPpdexGstcheckSub> VBvCheckPpdexGstcheckSubs { get; set; }
        public virtual DbSet<VBvCheckPpdexGstcheckSub1> VBvCheckPpdexGstcheckSub1s { get; set; }
        public virtual DbSet<VBvCheckPpdtickmismatchTTariffstInvoicessub> VBvCheckPpdtickmismatchTTariffstInvoicessubs { get; set; }
        public virtual DbSet<VBvCheckReadingGapsSub> VBvCheckReadingGapsSubs { get; set; }
        public virtual DbSet<VBvCheckReadingGapsSubOld> VBvCheckReadingGapsSubOlds { get; set; }
        public virtual DbSet<VBvCheckSitesCeasedFinalInvoiceSub> VBvCheckSitesCeasedFinalInvoiceSubs { get; set; }
        public virtual DbSet<VBvCheckSitesInvByBatch> VBvCheckSitesInvByBatches { get; set; }
        public virtual DbSet<VBvCheckSolarRebates1> VBvCheckSolarRebates1s { get; set; }
        public virtual DbSet<VBvCheckSolarRebates2> VBvCheckSolarRebates2s { get; set; }
        public virtual DbSet<VBvCheckSolarRebates3> VBvCheckSolarRebates3s { get; set; }
        public virtual DbSet<VBvCheckSumInvTotalsValidation> VBvCheckSumInvTotalsValidations { get; set; }
        public virtual DbSet<VBvCheckSumInvTotalsValidationTest13> VBvCheckSumInvTotalsValidationTest13s { get; set; }
        public virtual DbSet<VBvCheckSumInvTotalsValidationTest1sub> VBvCheckSumInvTotalsValidationTest1subs { get; set; }
        public virtual DbSet<VBvCheckSumInvTotalsValidationTest2sub> VBvCheckSumInvTotalsValidationTest2subs { get; set; }
        public virtual DbSet<VBvCheckSumInvTotalsValidationTest3sub> VBvCheckSumInvTotalsValidationTest3subs { get; set; }
        public virtual DbSet<VBvCheckSumInvTotalsValidationTest4> VBvCheckSumInvTotalsValidationTest4s { get; set; }
        public virtual DbSet<VBvCheckSumInvTotalsValidationTest4sub> VBvCheckSumInvTotalsValidationTest4subs { get; set; }
        public virtual DbSet<VBvCheckSumInvTotalsValidationTest619112018> VBvCheckSumInvTotalsValidationTest619112018s { get; set; }
        public virtual DbSet<VBvCheckSumInvTotalsValidationTest6sub> VBvCheckSumInvTotalsValidationTest6subs { get; set; }
        public virtual DbSet<VBvCheckSumInvTotalsValidationTest6sub1> VBvCheckSumInvTotalsValidationTest6sub1s { get; set; }
        public virtual DbSet<VBvCheckSumInvTotalsValidationTest6sub2> VBvCheckSumInvTotalsValidationTest6sub2s { get; set; }
        public virtual DbSet<VBvCheckSumInvTotalsValidationTest6sub3> VBvCheckSumInvTotalsValidationTest6sub3s { get; set; }
        public virtual DbSet<VBvCheckSumInvTotalsValidationTestingsub1> VBvCheckSumInvTotalsValidationTestingsub1s { get; set; }
        public virtual DbSet<VBvCheckUnitMultiplierVerificationSub> VBvCheckUnitMultiplierVerificationSubs { get; set; }
        public virtual DbSet<VBvChecksPenaltyCharge> VBvChecksPenaltyCharges { get; set; }
        public virtual DbSet<VBvChecksTouInvoiceGetDate> VBvChecksTouInvoiceGetDates { get; set; }
        public virtual DbSet<VBvChecksTouInvoiceGetNotMonth> VBvChecksTouInvoiceGetNotMonths { get; set; }
        public virtual DbSet<VBvDataManagementConsumptionCalc> VBvDataManagementConsumptionCalcs { get; set; }
        public virtual DbSet<VBvDataManagementConsumptionCalcByBatch> VBvDataManagementConsumptionCalcByBatches { get; set; }
        public virtual DbSet<VBvDataManagementExportId1> VBvDataManagementExportId1s { get; set; }
        public virtual DbSet<VBvDataManagementExportId10> VBvDataManagementExportId10s { get; set; }
        public virtual DbSet<VBvDataManagementExportId11> VBvDataManagementExportId11s { get; set; }
        public virtual DbSet<VBvDataManagementExportId12> VBvDataManagementExportId12s { get; set; }
        public virtual DbSet<VBvDataManagementExportId13> VBvDataManagementExportId13s { get; set; }
        public virtual DbSet<VBvDataManagementExportId15> VBvDataManagementExportId15s { get; set; }
        public virtual DbSet<VBvDataManagementExportId16> VBvDataManagementExportId16s { get; set; }
        public virtual DbSet<VBvDataManagementExportId19> VBvDataManagementExportId19s { get; set; }
        public virtual DbSet<VBvDataManagementExportId2> VBvDataManagementExportId2s { get; set; }
        public virtual DbSet<VBvDataManagementExportId20> VBvDataManagementExportId20s { get; set; }
        public virtual DbSet<VBvDataManagementExportId21> VBvDataManagementExportId21s { get; set; }
        public virtual DbSet<VBvDataManagementExportId22> VBvDataManagementExportId22s { get; set; }
        public virtual DbSet<VBvDataManagementExportId23> VBvDataManagementExportId23s { get; set; }
        public virtual DbSet<VBvDataManagementExportId24> VBvDataManagementExportId24s { get; set; }
        public virtual DbSet<VBvDataManagementExportId25> VBvDataManagementExportId25s { get; set; }
        public virtual DbSet<VBvDataManagementExportId26> VBvDataManagementExportId26s { get; set; }
        public virtual DbSet<VBvDataManagementExportId27> VBvDataManagementExportId27s { get; set; }
        public virtual DbSet<VBvDataManagementExportId28> VBvDataManagementExportId28s { get; set; }
        public virtual DbSet<VBvDataManagementExportId29> VBvDataManagementExportId29s { get; set; }
        public virtual DbSet<VBvDataManagementExportId3> VBvDataManagementExportId3s { get; set; }
        public virtual DbSet<VBvDataManagementExportId30> VBvDataManagementExportId30s { get; set; }
        public virtual DbSet<VBvDataManagementExportId4Opt1> VBvDataManagementExportId4Opt1s { get; set; }
        public virtual DbSet<VBvDataManagementExportId4Opt2> VBvDataManagementExportId4Opt2s { get; set; }
        public virtual DbSet<VBvDataManagementExportId5> VBvDataManagementExportId5s { get; set; }
        public virtual DbSet<VBvDataManagementExportId6> VBvDataManagementExportId6s { get; set; }
        public virtual DbSet<VBvDataManagementExportId7> VBvDataManagementExportId7s { get; set; }
        public virtual DbSet<VBvDataManagementExportId8> VBvDataManagementExportId8s { get; set; }
        public virtual DbSet<VBvDataManagementExportId9> VBvDataManagementExportId9s { get; set; }
        public virtual DbSet<VBvDataManagementRunId21> VBvDataManagementRunId21s { get; set; }
        public virtual DbSet<VBvFindParentAccountNo> VBvFindParentAccountNos { get; set; }
        public virtual DbSet<VBvcAccountNoNotMatching> VBvcAccountNoNotMatchings { get; set; }
        public virtual DbSet<VBvcActiveSitesNoInvoice> VBvcActiveSitesNoInvoices { get; set; }
        public virtual DbSet<VBvcActivityManagementOutstanding> VBvcActivityManagementOutstandings { get; set; }
        public virtual DbSet<VBvcAogCheck> VBvcAogChecks { get; set; }
        public virtual DbSet<VBvcAogCheckFinal> VBvcAogCheckFinals { get; set; }
        public virtual DbSet<VBvcAogCheckSumLinesSub> VBvcAogCheckSumLinesSubs { get; set; }
        public virtual DbSet<VBvcAogVerification> VBvcAogVerifications { get; set; }
        public virtual DbSet<VBvcBatchOneOffFeeReview> VBvcBatchOneOffFeeReviews { get; set; }
        public virtual DbSet<VBvcBatchTotalCheck> VBvcBatchTotalChecks { get; set; }
        public virtual DbSet<VBvcBatchTotalVrsInvSumCheckAllBatch> VBvcBatchTotalVrsInvSumCheckAllBatches { get; set; }
        public virtual DbSet<VBvcBillPaymentSiteReview> VBvcBillPaymentSiteReviews { get; set; }
        public virtual DbSet<VBvcBillSummaryLinesGstFree> VBvcBillSummaryLinesGstFrees { get; set; }
        public virtual DbSet<VBvcBpayCode> VBvcBpayCodes { get; set; }
        public virtual DbSet<VBvcBpayCodeSubClientExist> VBvcBpayCodeSubClientExists { get; set; }
        public virtual DbSet<VBvcCalConsumptionBase> VBvcCalConsumptionBases { get; set; }
        public virtual DbSet<VBvcCalConsumptionPre> VBvcCalConsumptionPres { get; set; }
        public virtual DbSet<VBvcCarbonFactorAreaEau> VBvcCarbonFactorAreaEaus { get; set; }
        public virtual DbSet<VBvcCeasedSite> VBvcCeasedSites { get; set; }
        public virtual DbSet<VBvcChargesNoGst> VBvcChargesNoGsts { get; set; }
        public virtual DbSet<VBvcChargesNoPpd> VBvcChargesNoPpds { get; set; }
        public virtual DbSet<VBvcCheckDollarsInternalConsistency> VBvcCheckDollarsInternalConsistencies { get; set; }
        public virtual DbSet<VBvcCheckFinalledSite> VBvcCheckFinalledSites { get; set; }
        public virtual DbSet<VBvcCheckSolarRebates1> VBvcCheckSolarRebates1s { get; set; }
        public virtual DbSet<VBvcCheckSolarRebates1Sub> VBvcCheckSolarRebates1Subs { get; set; }
        public virtual DbSet<VBvcCheckSolarRebates2> VBvcCheckSolarRebates2s { get; set; }
        public virtual DbSet<VBvcCheckSolarRebates3> VBvcCheckSolarRebates3s { get; set; }
        public virtual DbSet<VBvcCheckSolarRebates4> VBvcCheckSolarRebates4s { get; set; }
        public virtual DbSet<VBvcCheckSplitCheck> VBvcCheckSplitChecks { get; set; }
        public virtual DbSet<VBvcChecksSplitRetailerAccountNoMismatch> VBvcChecksSplitRetailerAccountNoMismatches { get; set; }
        public virtual DbSet<VBvcChecksSplitSiteStatusMismatch> VBvcChecksSplitSiteStatusMismatches { get; set; }
        public virtual DbSet<VBvcChecksSplitsAwaitingWork> VBvcChecksSplitsAwaitingWorks { get; set; }
        public virtual DbSet<VBvcChecksSplitsUndeletedCheck> VBvcChecksSplitsUndeletedChecks { get; set; }
        public virtual DbSet<VBvcConsumptionCostsBase> VBvcConsumptionCostsBases { get; set; }
        public virtual DbSet<VBvcConsumptionCostsFinal> VBvcConsumptionCostsFinals { get; set; }
        public virtual DbSet<VBvcConsumptionVariance> VBvcConsumptionVariances { get; set; }
        public virtual DbSet<VBvcCredit> VBvcCredits { get; set; }
        public virtual DbSet<VBvcDateGapMain> VBvcDateGapMains { get; set; }
        public virtual DbSet<VBvcDateGapsEnvironment> VBvcDateGapsEnvironments { get; set; }
        public virtual DbSet<VBvcDateGapsResult> VBvcDateGapsResults { get; set; }
        public virtual DbSet<VBvcDisabledRateOrTariffUsed> VBvcDisabledRateOrTariffUseds { get; set; }
        public virtual DbSet<VBvcDuplicateIcpInvoice> VBvcDuplicateIcpInvoices { get; set; }
        public virtual DbSet<VBvcDuplicateSupplierInvNumber> VBvcDuplicateSupplierInvNumbers { get; set; }
        public virtual DbSet<VBvcDuplicateSupplierInvNumberBase> VBvcDuplicateSupplierInvNumberBases { get; set; }
        public virtual DbSet<VBvcEarliestDueDate> VBvcEarliestDueDates { get; set; }
        public virtual DbSet<VBvcEarliestDueDatePre2dp> VBvcEarliestDueDatePre2dps { get; set; }
        public virtual DbSet<VBvcEliminateRv> VBvcEliminateRvs { get; set; }
        public virtual DbSet<VBvcEstimate> VBvcEstimates { get; set; }
        public virtual DbSet<VBvcEstimateInvoice> VBvcEstimateInvoices { get; set; }
        public virtual DbSet<VBvcEstimatesAll> VBvcEstimatesAlls { get; set; }
        public virtual DbSet<VBvcEstimatesAllPre> VBvcEstimatesAllPres { get; set; }
        public virtual DbSet<VBvcEstimatesAllSite> VBvcEstimatesAllSites { get; set; }
        public virtual DbSet<VBvcExpectedRaw> VBvcExpectedRaws { get; set; }
        public virtual DbSet<VBvcExpectedRawBase> VBvcExpectedRawBases { get; set; }
        public virtual DbSet<VBvcExpectedSummary> VBvcExpectedSummaries { get; set; }
        public virtual DbSet<VBvcExpectedSummaryFinal> VBvcExpectedSummaryFinals { get; set; }
        public virtual DbSet<VBvcExpectedSummaryMaxConsumption> VBvcExpectedSummaryMaxConsumptions { get; set; }
        public virtual DbSet<VBvcFirstInvoicePerSpid> VBvcFirstInvoicePerSpids { get; set; }
        public virtual DbSet<VBvcFirstInvoicePerSpid1> VBvcFirstInvoicePerSpid1s { get; set; }
        public virtual DbSet<VBvcFloorAreaCheckSqmTotalSub> VBvcFloorAreaCheckSqmTotalSubs { get; set; }
        public virtual DbSet<VBvcFloorAreaCheckSumOccupied> VBvcFloorAreaCheckSumOccupieds { get; set; }
        public virtual DbSet<VBvcFloorAreaCheckTotalSqmValue> VBvcFloorAreaCheckTotalSqmValues { get; set; }
        public virtual DbSet<VBvcFloorAreaTestOccupiedMatchesTotal> VBvcFloorAreaTestOccupiedMatchesTotals { get; set; }
        public virtual DbSet<VBvcFloorAreaTestSqmTotalConsistancy> VBvcFloorAreaTestSqmTotalConsistancies { get; set; }
        public virtual DbSet<VBvcFloorCheckSqmTotal> VBvcFloorCheckSqmTotals { get; set; }
        public virtual DbSet<VBvcFloorCheckSqmTotalsCount> VBvcFloorCheckSqmTotalsCounts { get; set; }
        public virtual DbSet<VBvcFloorFinalTest> VBvcFloorFinalTests { get; set; }
        public virtual DbSet<VBvcFloorOccSumedNotEqualTotal> VBvcFloorOccSumedNotEqualTotals { get; set; }
        public virtual DbSet<VBvcFloorSqmTotalsFinal> VBvcFloorSqmTotalsFinals { get; set; }
        public virtual DbSet<VBvcFloorSumOcc> VBvcFloorSumOccs { get; set; }
        public virtual DbSet<VBvcFloorTotal> VBvcFloorTotals { get; set; }
        public virtual DbSet<VBvcFloorTotalSameAccessCref> VBvcFloorTotalSameAccessCrefs { get; set; }
        public virtual DbSet<VBvcFutureInvoiceEnteredDate> VBvcFutureInvoiceEnteredDates { get; set; }
        public virtual DbSet<VBvcFutureInvoiceIssueDate> VBvcFutureInvoiceIssueDates { get; set; }
        public virtual DbSet<VBvcGreenEnergyVerification> VBvcGreenEnergyVerifications { get; set; }
        public virtual DbSet<VBvcGstTickMismatchTTariffsTInvoice> VBvcGstTickMismatchTTariffsTInvoices { get; set; }
        public virtual DbSet<VBvcGstTickMismatchTTariffsTInvoicesSub> VBvcGstTickMismatchTTariffsTInvoicesSubs { get; set; }
        public virtual DbSet<VBvcHeaderConsumptionIsNotZero> VBvcHeaderConsumptionIsNotZeros { get; set; }
        public virtual DbSet<VBvcHeaderConsumptionIsZero> VBvcHeaderConsumptionIsZeros { get; set; }
        public virtual DbSet<VBvcHeaderConsumptionIsZero1> VBvcHeaderConsumptionIsZero1s { get; set; }
        public virtual DbSet<VBvcHeaderConsumptionNotMatchLine> VBvcHeaderConsumptionNotMatchLines { get; set; }
        public virtual DbSet<VBvcHeaderNonBlankField> VBvcHeaderNonBlankFields { get; set; }
        public virtual DbSet<VBvcIcpDuplicate> VBvcIcpDuplicates { get; set; }
        public virtual DbSet<VBvcInputtypesMismatch> VBvcInputtypesMismatches { get; set; }
        public virtual DbSet<VBvcInvSiteNotInSite> VBvcInvSiteNotInSites { get; set; }
        public virtual DbSet<VBvcInvoiceEndDateExceedsCeasedDate> VBvcInvoiceEndDateExceedsCeasedDates { get; set; }
        public virtual DbSet<VBvcInvoiceFieldsNull> VBvcInvoiceFieldsNulls { get; set; }
        public virtual DbSet<VBvcInvoiceHeaderNoLinesView> VBvcInvoiceHeaderNoLinesViews { get; set; }
        public virtual DbSet<VBvcInvoiceIssue> VBvcInvoiceIssues { get; set; }
        public virtual DbSet<VBvcInvoiceLinesNoHeaderView> VBvcInvoiceLinesNoHeaderViews { get; set; }
        public virtual DbSet<VBvcInvoiceNoDaysHeaderVsDate> VBvcInvoiceNoDaysHeaderVsDates { get; set; }
        public virtual DbSet<VBvcInvoiceNoDaysHeaderVsLine> VBvcInvoiceNoDaysHeaderVsLines { get; set; }
        public virtual DbSet<VBvcInvoiceNoDaysHeaderVsLines1> VBvcInvoiceNoDaysHeaderVsLines1s { get; set; }
        public virtual DbSet<VBvcInvoiceNoDaysHeaderVsLines2> VBvcInvoiceNoDaysHeaderVsLines2s { get; set; }
        public virtual DbSet<VBvcInvoiceNoDaysMatchCalculatesDay> VBvcInvoiceNoDaysMatchCalculatesDays { get; set; }
        public virtual DbSet<VBvcInvoiceNoDaysMatchExpectedTariff> VBvcInvoiceNoDaysMatchExpectedTariffs { get; set; }
        public virtual DbSet<VBvcInvoiceNoDaysMatchFinal> VBvcInvoiceNoDaysMatchFinals { get; set; }
        public virtual DbSet<VBvcInvoiceNoDaysMatchFinalOutput> VBvcInvoiceNoDaysMatchFinalOutputs { get; set; }
        public virtual DbSet<VBvcInvoiceNoDaysMatchSplitLookup> VBvcInvoiceNoDaysMatchSplitLookups { get; set; }
        public virtual DbSet<VBvcInvoiceNoDaysMatchSumStep1> VBvcInvoiceNoDaysMatchSumStep1s { get; set; }
        public virtual DbSet<VBvcInvoiceNoDaysMatchSumUnitsUsed> VBvcInvoiceNoDaysMatchSumUnitsUseds { get; set; }
        public virtual DbSet<VBvcInvoiceNoDaysSub> VBvcInvoiceNoDaysSubs { get; set; }
        public virtual DbSet<VBvcInvoiceNoDaysSumUnitsUsed> VBvcInvoiceNoDaysSumUnitsUseds { get; set; }
        public virtual DbSet<VBvcInvoiceNoOfDaysMain> VBvcInvoiceNoOfDaysMains { get; set; }
        public virtual DbSet<VBvcInvoiceOpeningBalanceTypeInvalid> VBvcInvoiceOpeningBalanceTypeInvalids { get; set; }
        public virtual DbSet<VBvcInvoiceReadTypeNotListView> VBvcInvoiceReadTypeNotListViews { get; set; }
        public virtual DbSet<VBvcInvoiceReadTypeNotListViewSub> VBvcInvoiceReadTypeNotListViewSubs { get; set; }
        public virtual DbSet<VBvcInvoiceTotalsValidation> VBvcInvoiceTotalsValidations { get; set; }
        public virtual DbSet<VBvcInvoiceTotalsValidationSummary> VBvcInvoiceTotalsValidationSummaries { get; set; }
        public virtual DbSet<VBvcInvoiceTotalsValidationTest1> VBvcInvoiceTotalsValidationTest1s { get; set; }
        public virtual DbSet<VBvcInvoiceTotalsValidationTest10> VBvcInvoiceTotalsValidationTest10s { get; set; }
        public virtual DbSet<VBvcInvoiceTotalsValidationTest11> VBvcInvoiceTotalsValidationTest11s { get; set; }
        public virtual DbSet<VBvcInvoiceTotalsValidationTest12> VBvcInvoiceTotalsValidationTest12s { get; set; }
        public virtual DbSet<VBvcInvoiceTotalsValidationTest13> VBvcInvoiceTotalsValidationTest13s { get; set; }
        public virtual DbSet<VBvcInvoiceTotalsValidationTest14> VBvcInvoiceTotalsValidationTest14s { get; set; }
        public virtual DbSet<VBvcInvoiceTotalsValidationTest2> VBvcInvoiceTotalsValidationTest2s { get; set; }
        public virtual DbSet<VBvcInvoiceTotalsValidationTest3> VBvcInvoiceTotalsValidationTest3s { get; set; }
        public virtual DbSet<VBvcInvoiceTotalsValidationTest4> VBvcInvoiceTotalsValidationTest4s { get; set; }
        public virtual DbSet<VBvcInvoiceTotalsValidationTest5> VBvcInvoiceTotalsValidationTest5s { get; set; }
        public virtual DbSet<VBvcInvoiceTotalsValidationTest6> VBvcInvoiceTotalsValidationTest6s { get; set; }
        public virtual DbSet<VBvcInvoiceTotalsValidationTest7> VBvcInvoiceTotalsValidationTest7s { get; set; }
        public virtual DbSet<VBvcInvoiceTotalsValidationTest8> VBvcInvoiceTotalsValidationTest8s { get; set; }
        public virtual DbSet<VBvcInvoiceTotalsValidationTest9> VBvcInvoiceTotalsValidationTest9s { get; set; }
        public virtual DbSet<VBvcInvoiceUndeletedCheck> VBvcInvoiceUndeletedChecks { get; set; }
        public virtual DbSet<VBvcInvoiceUnitTypeDiffRatesView> VBvcInvoiceUnitTypeDiffRatesViews { get; set; }
        public virtual DbSet<VBvcInvoicesTaggedZero> VBvcInvoicesTaggedZeros { get; set; }
        public virtual DbSet<VBvcKeyFieldsBlankStep2> VBvcKeyFieldsBlankStep2s { get; set; }
        public virtual DbSet<VBvcKeySitesFieldBlankPre> VBvcKeySitesFieldBlankPres { get; set; }
        public virtual DbSet<VBvcKeySitesFieldsBlank> VBvcKeySitesFieldsBlanks { get; set; }
        public virtual DbSet<VBvcKgVsCalculatedKWh> VBvcKgVsCalculatedKWhs { get; set; }
        public virtual DbSet<VBvcKgVsCalculatedKWhPre> VBvcKgVsCalculatedKWhPres { get; set; }
        public virtual DbSet<VBvcKwhSum> VBvcKwhSums { get; set; }
        public virtual DbSet<VBvcLastInvReport> VBvcLastInvReports { get; set; }
        public virtual DbSet<VBvcLastInvReportFinal> VBvcLastInvReportFinals { get; set; }
        public virtual DbSet<VBvcLastInvToDate> VBvcLastInvToDates { get; set; }
        public virtual DbSet<VBvcLastInvToDateSub> VBvcLastInvToDateSubs { get; set; }
        public virtual DbSet<VBvcLineTotalFromTariff> VBvcLineTotalFromTariffs { get; set; }
        public virtual DbSet<VBvcLineTotalNotBalancing> VBvcLineTotalNotBalancings { get; set; }
        public virtual DbSet<VBvcLineTotalNotBalancing1> VBvcLineTotalNotBalancing1s { get; set; }
        public virtual DbSet<VBvcLineTotalNotBalancingMain> VBvcLineTotalNotBalancingMains { get; set; }
        public virtual DbSet<VBvcLineTotalsValidation> VBvcLineTotalsValidations { get; set; }
        public virtual DbSet<VBvcMaxConsumptionExceeded> VBvcMaxConsumptionExceededs { get; set; }
        public virtual DbSet<VBvcMaxDailyConsumptionExceeded> VBvcMaxDailyConsumptionExceededs { get; set; }
        public virtual DbSet<VBvcMeterReadFinal> VBvcMeterReadFinals { get; set; }
        public virtual DbSet<VBvcMjSum> VBvcMjSums { get; set; }
        public virtual DbSet<VBvcMjToKwhTest> VBvcMjToKwhTests { get; set; }
        public virtual DbSet<VBvcMultipleInvBatch> VBvcMultipleInvBatches { get; set; }
        public virtual DbSet<VBvcMultipleInvoiceTest> VBvcMultipleInvoiceTests { get; set; }
        public virtual DbSet<VBvcMultipleInvoiceTestTce> VBvcMultipleInvoiceTestTces { get; set; }
        public virtual DbSet<VBvcMultipleInvoicesByBatchFinal> VBvcMultipleInvoicesByBatchFinals { get; set; }
        public virtual DbSet<VBvcMultipleInvoicesBySite> VBvcMultipleInvoicesBySites { get; set; }
        public virtual DbSet<VBvcMultiplierNotMatch> VBvcMultiplierNotMatches { get; set; }
        public virtual DbSet<VBvcMultiplierNotMatchFinal> VBvcMultiplierNotMatchFinals { get; set; }
        public virtual DbSet<VBvcMultiplierNotMatchPre> VBvcMultiplierNotMatchPres { get; set; }
        public virtual DbSet<VBvcNegNoOfDaysNonReversal> VBvcNegNoOfDaysNonReversals { get; set; }
        public virtual DbSet<VBvcNoObType> VBvcNoObTypes { get; set; }
        public virtual DbSet<VBvcNoOfInvoicesNetAmt> VBvcNoOfInvoicesNetAmts { get; set; }
        public virtual DbSet<VBvcNoOfInvoicesNetAmtInvDue> VBvcNoOfInvoicesNetAmtInvDues { get; set; }
        public virtual DbSet<VBvcNoOfInvoicesNetAmtInvDueDateSub> VBvcNoOfInvoicesNetAmtInvDueDateSubs { get; set; }
        public virtual DbSet<VBvcNoOfInvoicesNetAmtInvDueDateSubPre2dp> VBvcNoOfInvoicesNetAmtInvDueDateSubPre2dps { get; set; }
        public virtual DbSet<VBvcNullSiteStartDate> VBvcNullSiteStartDates { get; set; }
        public virtual DbSet<VBvcNullValueInvoiceLinesMeterReadingFiled> VBvcNullValueInvoiceLinesMeterReadingFileds { get; set; }
        public virtual DbSet<VBvcNullValuesInvoiceLine> VBvcNullValuesInvoiceLines { get; set; }
        public virtual DbSet<VBvcOcAndWuMeterRead> VBvcOcAndWuMeterReads { get; set; }
        public virtual DbSet<VBvcOpeningBalNoGst> VBvcOpeningBalNoGsts { get; set; }
        public virtual DbSet<VBvcOpeningBalance> VBvcOpeningBalances { get; set; }
        public virtual DbSet<VBvcPayee> VBvcPayees { get; set; }
        public virtual DbSet<VBvcPayeeDueDate> VBvcPayeeDueDates { get; set; }
        public virtual DbSet<VBvcPayeeDueDatePre2dp> VBvcPayeeDueDatePre2dps { get; set; }
        public virtual DbSet<VBvcPenaltyCharge> VBvcPenaltyCharges { get; set; }
        public virtual DbSet<VBvcPpdExGstCheck> VBvcPpdExGstChecks { get; set; }
        public virtual DbSet<VBvcPpdExGstCheckFinal> VBvcPpdExGstCheckFinals { get; set; }
        public virtual DbSet<VBvcPpdInclGstCheck> VBvcPpdInclGstChecks { get; set; }
        public virtual DbSet<VBvcPpdInclGstCheckFinal> VBvcPpdInclGstCheckFinals { get; set; }
        public virtual DbSet<VBvcPpdTickMismatchTTariffsTInvoice> VBvcPpdTickMismatchTTariffsTInvoices { get; set; }
        public virtual DbSet<VBvcPpdTickMismatchTTariffsTInvoicesSub> VBvcPpdTickMismatchTTariffsTInvoicesSubs { get; set; }
        public virtual DbSet<VBvcPreInvCreditPre> VBvcPreInvCreditPres { get; set; }
        public virtual DbSet<VBvcPrevInvCredit> VBvcPrevInvCredits { get; set; }
        public virtual DbSet<VBvcQuerySavingsOutstanding> VBvcQuerySavingsOutstandings { get; set; }
        public virtual DbSet<VBvcRateId0> VBvcRateId0s { get; set; }
        public virtual DbSet<VBvcRateIdNotInRate> VBvcRateIdNotInRates { get; set; }
        public virtual DbSet<VBvcRateTariffMismatch> VBvcRateTariffMismatches { get; set; }
        public virtual DbSet<VBvcReadingGap> VBvcReadingGaps { get; set; }
        public virtual DbSet<VBvcReadingGapsSub> VBvcReadingGapsSubs { get; set; }
        public virtual DbSet<VBvcRedFlag> VBvcRedFlags { get; set; }
        public virtual DbSet<VBvcRedFlagAll> VBvcRedFlagAlls { get; set; }
        public virtual DbSet<VBvcRedflagAllSub> VBvcRedflagAllSubs { get; set; }
        public virtual DbSet<VBvcRepBatch> VBvcRepBatches { get; set; }
        public virtual DbSet<VBvcRepBatchPre2dp> VBvcRepBatchPre2dps { get; set; }
        public virtual DbSet<VBvcRepBatchSub> VBvcRepBatchSubs { get; set; }
        public virtual DbSet<VBvcRepBatchSubPre2dp> VBvcRepBatchSubPre2dps { get; set; }
        public virtual DbSet<VBvcSiteCeasedDatesBlank> VBvcSiteCeasedDatesBlanks { get; set; }
        public virtual DbSet<VBvcSiteInvByBatch> VBvcSiteInvByBatches { get; set; }
        public virtual DbSet<VBvcSiteInvLastEndDate> VBvcSiteInvLastEndDates { get; set; }
        public virtual DbSet<VBvcSiteRetailerDiffToInvoice> VBvcSiteRetailerDiffToInvoices { get; set; }
        public virtual DbSet<VBvcSitesCeasedFinalInvoice> VBvcSitesCeasedFinalInvoices { get; set; }
        public virtual DbSet<VBvcSitesCeasedFinalInvoiceSub> VBvcSitesCeasedFinalInvoiceSubs { get; set; }
        public virtual DbSet<VBvcSitesNoInvoiceCurrentBatchMonth> VBvcSitesNoInvoiceCurrentBatchMonths { get; set; }
        public virtual DbSet<VBvcSitesSplit> VBvcSitesSplits { get; set; }
        public virtual DbSet<VBvcSpidNotFound> VBvcSpidNotFounds { get; set; }
        public virtual DbSet<VBvcSplitCheck> VBvcSplitChecks { get; set; }
        public virtual DbSet<VBvcSplitInvoicesByBatch> VBvcSplitInvoicesByBatches { get; set; }
        public virtual DbSet<VBvcSplitInvoicesResult> VBvcSplitInvoicesResults { get; set; }
        public virtual DbSet<VBvcSplitSitesByBatch> VBvcSplitSitesByBatches { get; set; }
        public virtual DbSet<VBvcSplitSitesExist> VBvcSplitSitesExists { get; set; }
        public virtual DbSet<VBvcSplitSumSplitByParent> VBvcSplitSumSplitByParents { get; set; }
        public virtual DbSet<VBvcSplitsAwaitingWork> VBvcSplitsAwaitingWorks { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidation> VBvcSumInvTotalsValidations { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationChk> VBvcSumInvTotalsValidationChks { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationChkSummary> VBvcSumInvTotalsValidationChkSummaries { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationChkTest10> VBvcSumInvTotalsValidationChkTest10s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationChkTest11> VBvcSumInvTotalsValidationChkTest11s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationChkTest12> VBvcSumInvTotalsValidationChkTest12s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationChkTest13> VBvcSumInvTotalsValidationChkTest13s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationChkTest1Results1> VBvcSumInvTotalsValidationChkTest1Results1s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationChkTest2> VBvcSumInvTotalsValidationChkTest2s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationChkTest2Sub> VBvcSumInvTotalsValidationChkTest2Subs { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationChkTest3> VBvcSumInvTotalsValidationChkTest3s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationChkTest3Sub> VBvcSumInvTotalsValidationChkTest3Subs { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationChkTest4> VBvcSumInvTotalsValidationChkTest4s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationChkTest4Sub> VBvcSumInvTotalsValidationChkTest4Subs { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationChkTest4Sub1> VBvcSumInvTotalsValidationChkTest4Sub1s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationChkTest5> VBvcSumInvTotalsValidationChkTest5s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationChkTest6> VBvcSumInvTotalsValidationChkTest6s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationChkTest6Sub1> VBvcSumInvTotalsValidationChkTest6Sub1s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationChkTest6Sub2> VBvcSumInvTotalsValidationChkTest6Sub2s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationChkTest6Sub3> VBvcSumInvTotalsValidationChkTest6Sub3s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationChkTest6Sub4> VBvcSumInvTotalsValidationChkTest6Sub4s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationChkTest7> VBvcSumInvTotalsValidationChkTest7s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationChkTest8> VBvcSumInvTotalsValidationChkTest8s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationChkTest9> VBvcSumInvTotalsValidationChkTest9s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationSummary> VBvcSumInvTotalsValidationSummaries { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationTest10> VBvcSumInvTotalsValidationTest10s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationTest11> VBvcSumInvTotalsValidationTest11s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationTest12> VBvcSumInvTotalsValidationTest12s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationTest13> VBvcSumInvTotalsValidationTest13s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationTest1Results1> VBvcSumInvTotalsValidationTest1Results1s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationTest1Sub> VBvcSumInvTotalsValidationTest1Subs { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationTest2> VBvcSumInvTotalsValidationTest2s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationTest2Sub> VBvcSumInvTotalsValidationTest2Subs { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationTest3> VBvcSumInvTotalsValidationTest3s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationTest3Sub> VBvcSumInvTotalsValidationTest3Subs { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationTest4> VBvcSumInvTotalsValidationTest4s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationTest4Sub> VBvcSumInvTotalsValidationTest4Subs { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationTest4Sub1> VBvcSumInvTotalsValidationTest4Sub1s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationTest5> VBvcSumInvTotalsValidationTest5s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationTest6> VBvcSumInvTotalsValidationTest6s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationTest6Sub1> VBvcSumInvTotalsValidationTest6Sub1s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationTest6Sub2> VBvcSumInvTotalsValidationTest6Sub2s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationTest6Sub3> VBvcSumInvTotalsValidationTest6Sub3s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationTest6Sub4> VBvcSumInvTotalsValidationTest6Sub4s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationTest7> VBvcSumInvTotalsValidationTest7s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationTest8> VBvcSumInvTotalsValidationTest8s { get; set; }
        public virtual DbSet<VBvcSumInvTotalsValidationTest9> VBvcSumInvTotalsValidationTest9s { get; set; }
        public virtual DbSet<VBvcSumSplitByParent> VBvcSumSplitByParents { get; set; }
        public virtual DbSet<VBvcSuminvTotalsValidationChkTest1> VBvcSuminvTotalsValidationChkTest1s { get; set; }
        public virtual DbSet<VBvcSuminvTotalsValidationChkTest1Sub> VBvcSuminvTotalsValidationChkTest1Subs { get; set; }
        public virtual DbSet<VBvcSuminvtotalsValidatioTest1Result> VBvcSuminvtotalsValidatioTest1Results { get; set; }
        public virtual DbSet<VBvcSuminvtotalsValidationTest1> VBvcSuminvtotalsValidationTest1s { get; set; }
        public virtual DbSet<VBvcTariffId0> VBvcTariffId0s { get; set; }
        public virtual DbSet<VBvcTariffIdNotInTariff> VBvcTariffIdNotInTariffs { get; set; }
        public virtual DbSet<VBvcTariffSiteNoMismatch> VBvcTariffSiteNoMismatches { get; set; }
        public virtual DbSet<VBvcTariffUnitCostCheck> VBvcTariffUnitCostChecks { get; set; }
        public virtual DbSet<VBvcTariffsNotUsedSelectedBatch> VBvcTariffsNotUsedSelectedBatches { get; set; }
        public virtual DbSet<VBvcTouInvoiceGetDate> VBvcTouInvoiceGetDates { get; set; }
        public virtual DbSet<VBvcTouInvoiceGetNotMonth> VBvcTouInvoiceGetNotMonths { get; set; }
        public virtual DbSet<VBvcTouInvoiceMonth> VBvcTouInvoiceMonths { get; set; }
        public virtual DbSet<VBvcTouInvoiceMonthFinal> VBvcTouInvoiceMonthFinals { get; set; }
        public virtual DbSet<VBvcUnitMultiplierIntegrity> VBvcUnitMultiplierIntegrities { get; set; }
        public virtual DbSet<VBvcUnitMultiplierVerification> VBvcUnitMultiplierVerifications { get; set; }
        public virtual DbSet<VBvcUnitMultiplierVerificationLossFactor> VBvcUnitMultiplierVerificationLossFactors { get; set; }
        public virtual DbSet<VBvcUnitMultiplierVerificationSub> VBvcUnitMultiplierVerificationSubs { get; set; }
        public virtual DbSet<VBvcUnitMultiplierVerificationTotalMultiplierByInvoice> VBvcUnitMultiplierVerificationTotalMultiplierByInvoices { get; set; }
        public virtual DbSet<VBvcUnitTypeView> VBvcUnitTypeViews { get; set; }
        public virtual DbSet<VBvcUnknownIcpActiveSite> VBvcUnknownIcpActiveSites { get; set; }
        public virtual DbSet<VBvcUnknownMeterRead> VBvcUnknownMeterReads { get; set; }
        public virtual DbSet<VBvcUnlockedBatch> VBvcUnlockedBatches { get; set; }
        public virtual DbSet<VBvcVariableIndeicesDateAnomaly> VBvcVariableIndeicesDateAnomalies { get; set; }
        public virtual DbSet<VCalcConsumption> VCalcConsumptions { get; set; }
        public virtual DbSet<VCalcConsumptionBase> VCalcConsumptionBases { get; set; }
        public virtual DbSet<VCalcConsumptionOrg> VCalcConsumptionOrgs { get; set; }
        public virtual DbSet<VCalcInvoiceFunctionLineTotalGst> VCalcInvoiceFunctionLineTotalGsts { get; set; }
        public virtual DbSet<VCalcInvoiceFunctionLineTotalGstByBatch> VCalcInvoiceFunctionLineTotalGstByBatches { get; set; }
        public virtual DbSet<VCalcInvoiceFunctionLinesSum> VCalcInvoiceFunctionLinesSums { get; set; }
        public virtual DbSet<VCalcInvoiceFunctionLinesSumGst> VCalcInvoiceFunctionLinesSumGsts { get; set; }
        public virtual DbSet<VCalcInvoiceFunctionLinesSumGstBase> VCalcInvoiceFunctionLinesSumGstBases { get; set; }
        public virtual DbSet<VCalcInvoiceFunctionLinesSumPpd> VCalcInvoiceFunctionLinesSumPpds { get; set; }
        public virtual DbSet<VCalcInvoiceFunctionLinesSumPpdBase> VCalcInvoiceFunctionLinesSumPpdBases { get; set; }
        public virtual DbSet<VCalcInvoiceFunctionLinesSumPpdGst> VCalcInvoiceFunctionLinesSumPpdGsts { get; set; }
        public virtual DbSet<VCalcInvoiceFunctionLinesSumPpdGstBase> VCalcInvoiceFunctionLinesSumPpdGstBases { get; set; }
        public virtual DbSet<VCalcInvoiceFunctionSelect> VCalcInvoiceFunctionSelects { get; set; }
        public virtual DbSet<VCalcInvoiceFunctionSelectBase> VCalcInvoiceFunctionSelectBases { get; set; }
        public virtual DbSet<VCalcInvoiceGstValue> VCalcInvoiceGstValues { get; set; }
        public virtual DbSet<VCalcTaxRate> VCalcTaxRates { get; set; }
        public virtual DbSet<VConsumptionByRateClass> VConsumptionByRateClasses { get; set; }
        public virtual DbSet<VDashboardCostExGstZeroCredit> VDashboardCostExGstZeroCredits { get; set; }
        public virtual DbSet<VDashboardCostExGstZeroCreditsIrd> VDashboardCostExGstZeroCreditsIrds { get; set; }
        public virtual DbSet<VDefaultConsumptionType1> VDefaultConsumptionType1s { get; set; }
        public virtual DbSet<VDefaultConsumptionType2> VDefaultConsumptionType2s { get; set; }
        public virtual DbSet<VDefaultConsumptionType3> VDefaultConsumptionType3s { get; set; }
        public virtual DbSet<VDetailedInvoiceLineInformation> VDetailedInvoiceLineInformations { get; set; }
        public virtual DbSet<VDollarsConsumptionReport> VDollarsConsumptionReports { get; set; }
        public virtual DbSet<VDollarsConsumptionReportNoOfday> VDollarsConsumptionReportNoOfdays { get; set; }
        public virtual DbSet<VDollarsConsumptionReportSub> VDollarsConsumptionReportSubs { get; set; }
        public virtual DbSet<VDrOnchargeReportHowick> VDrOnchargeReportHowicks { get; set; }
        public virtual DbSet<VDropdownBatch> VDropdownBatches { get; set; }
        public virtual DbSet<VDropdownReadType> VDropdownReadTypes { get; set; }
        public virtual DbSet<VEdiHeader> VEdiHeaders { get; set; }
        public virtual DbSet<VEdiHeaderSummary> VEdiHeaderSummaries { get; set; }
        public virtual DbSet<VEdiHeaderSummaryMeri> VEdiHeaderSummaryMeris { get; set; }
        public virtual DbSet<VEdiIndexLookup> VEdiIndexLookups { get; set; }
        public virtual DbSet<VEdiSiteDetail> VEdiSiteDetails { get; set; }
        public virtual DbSet<VEnvActualsBySiteByDate> VEnvActualsBySiteByDates { get; set; }
        public virtual DbSet<VEnvCountSourceTypeToRemove> VEnvCountSourceTypeToRemoves { get; set; }
        public virtual DbSet<VEnvDailySummaryMtreport> VEnvDailySummaryMtreports { get; set; }
        public virtual DbSet<VEnvDailySummaryMtreportBySite> VEnvDailySummaryMtreportBySites { get; set; }
        public virtual DbSet<VEnvEsitmatesSourceTypeCount> VEnvEsitmatesSourceTypeCounts { get; set; }
        public virtual DbSet<VEnvEstimatesBaseAvgByMonth> VEnvEstimatesBaseAvgByMonths { get; set; }
        public virtual DbSet<VEnvEstimatesBaseAvgByMonthBySite> VEnvEstimatesBaseAvgByMonthBySites { get; set; }
        public virtual DbSet<VEnvEstimatesBySiteByDate> VEnvEstimatesBySiteByDates { get; set; }
        public virtual DbSet<VEnvEstimatesSumBySite> VEnvEstimatesSumBySites { get; set; }
        public virtual DbSet<VEnvInvoicesMtreport> VEnvInvoicesMtreports { get; set; }
        public virtual DbSet<VEnvInvoicesMtreportBySite> VEnvInvoicesMtreportBySites { get; set; }
        public virtual DbSet<VEnvMinStartDate> VEnvMinStartDates { get; set; }
        public virtual DbSet<VEnvMonthlyPivotMtreport> VEnvMonthlyPivotMtreports { get; set; }
        public virtual DbSet<VEnvMonthlySummaryMtreport> VEnvMonthlySummaryMtreports { get; set; }
        public virtual DbSet<VEnvRemoveEstimate> VEnvRemoveEstimates { get; set; }
        public virtual DbSet<VEnvRemoveEstimatesId> VEnvRemoveEstimatesIds { get; set; }
        public virtual DbSet<VEnvResultsMtreportPivot> VEnvResultsMtreportPivots { get; set; }
        public virtual DbSet<VEnvSitesCeasedDateRestriction> VEnvSitesCeasedDateRestrictions { get; set; }
        public virtual DbSet<VEnvSitesListMtreport> VEnvSitesListMtreports { get; set; }
        public virtual DbSet<VEnvSitesListMtreportBySite> VEnvSitesListMtreportBySites { get; set; }
        public virtual DbSet<VEnvSummaryConsumptionMtreport> VEnvSummaryConsumptionMtreports { get; set; }
        public virtual DbSet<VEnvSummaryDailyMtreport> VEnvSummaryDailyMtreports { get; set; }
        public virtual DbSet<VEnvSummaryDollarsMtreport> VEnvSummaryDollarsMtreports { get; set; }
        public virtual DbSet<VEnvSummaryMonthlyPivotMtreport> VEnvSummaryMonthlyPivotMtreports { get; set; }
        public virtual DbSet<VEnvSummarySubSumDay> VEnvSummarySubSumDays { get; set; }
        public virtual DbSet<VEsmartActualCompare> VEsmartActualCompares { get; set; }
        public virtual DbSet<VGepGroupedReconciliationInfo> VGepGroupedReconciliationInfos { get; set; }
        public virtual DbSet<VGepGroupedReconciliationInfoFinal> VGepGroupedReconciliationInfoFinals { get; set; }
        public virtual DbSet<VGepRawReconciliationInfo> VGepRawReconciliationInfos { get; set; }
        public virtual DbSet<VGepRawReconciliationInformation> VGepRawReconciliationInformations { get; set; }
        public virtual DbSet<VGetDefaultValue> VGetDefaultValues { get; set; }
        public virtual DbSet<VGetFiledsPropertiesClient> VGetFiledsPropertiesClients { get; set; }
        public virtual DbSet<VHedgecalcInvoicesConfig> VHedgecalcInvoicesConfigs { get; set; }
        public virtual DbSet<VImwAccrualsbaselineMaxInvEndDateBySite> VImwAccrualsbaselineMaxInvEndDateBySites { get; set; }
        public virtual DbSet<VImwAccrualsbaselineNoOfInvBySite> VImwAccrualsbaselineNoOfInvBySites { get; set; }
        public virtual DbSet<VImwcDatamanagementDeleteOrphanLine> VImwcDatamanagementDeleteOrphanLines { get; set; }
        public virtual DbSet<VImwcDatamanagementDeleteRatesWhereNotUsed> VImwcDatamanagementDeleteRatesWhereNotUseds { get; set; }
        public virtual DbSet<VImwcDatamanagementDeleteTariffsWhereNotUsed> VImwcDatamanagementDeleteTariffsWhereNotUseds { get; set; }
        public virtual DbSet<VImwcDatamanagementDeleteZeroDollarAndConsumptionLine> VImwcDatamanagementDeleteZeroDollarAndConsumptionLines { get; set; }
        public virtual DbSet<VImwcDatamanagementRecalculateDpOfHeaderConsumption> VImwcDatamanagementRecalculateDpOfHeaderConsumptions { get; set; }
        public virtual DbSet<VImwcDatamanagementUpdateGst> VImwcDatamanagementUpdateGsts { get; set; }
        public virtual DbSet<VImwcDatamanagementUpdateHeaderTotalConsumption> VImwcDatamanagementUpdateHeaderTotalConsumptions { get; set; }
        public virtual DbSet<VImwcDatamanagementUpdateHeaderTotalDollar> VImwcDatamanagementUpdateHeaderTotalDollars { get; set; }
        public virtual DbSet<VImwcDatamanagementUpdateHeaderTotalDollarsWhereNull> VImwcDatamanagementUpdateHeaderTotalDollarsWhereNulls { get; set; }
        public virtual DbSet<VImwcDatamanagementUpdateLineUnitMultiplierDay> VImwcDatamanagementUpdateLineUnitMultiplierDays { get; set; }
        public virtual DbSet<VImwcDatamanagementUpdateLineUnitMultiplierLossFactor> VImwcDatamanagementUpdateLineUnitMultiplierLossFactors { get; set; }
        public virtual DbSet<VImwcDatamanagementUpdatePpd> VImwcDatamanagementUpdatePpds { get; set; }
        public virtual DbSet<VImwcDatamanagementUpdateProductidInvoiceLine> VImwcDatamanagementUpdateProductidInvoiceLines { get; set; }
        public virtual DbSet<VImwcDatamanagementUpdateTotalsForAdjustedAmounttopay> VImwcDatamanagementUpdateTotalsForAdjustedAmounttopays { get; set; }
        public virtual DbSet<VImwcDatamanagementUpdateTsitesAccountnoAndRetailercode> VImwcDatamanagementUpdateTsitesAccountnoAndRetailercodes { get; set; }
        public virtual DbSet<VImwcDatamanagementUpdateUnitMultiplierRate> VImwcDatamanagementUpdateUnitMultiplierRates { get; set; }
        public virtual DbSet<VImwcDatamanagementUpdateUnitType> VImwcDatamanagementUpdateUnitTypes { get; set; }
        public virtual DbSet<VImwcDatamanagementZeroObAndUpdateAmounttopay> VImwcDatamanagementZeroObAndUpdateAmounttopays { get; set; }
        public virtual DbSet<VInvoiceCountArchivedBySite> VInvoiceCountArchivedBySites { get; set; }
        public virtual DbSet<VInvoiceCountBySite> VInvoiceCountBySites { get; set; }
        public virtual DbSet<VInvoiceCountFinal> VInvoiceCountFinals { get; set; }
        public virtual DbSet<VInvoiceGroupBatchMonthSelection> VInvoiceGroupBatchMonthSelections { get; set; }
        public virtual DbSet<VInvoiceGroupTotal> VInvoiceGroupTotals { get; set; }
        public virtual DbSet<VInvoiceGroupTotalsSubTotalsBySite> VInvoiceGroupTotalsSubTotalsBySites { get; set; }
        public virtual DbSet<VInvoiceGroupTotalsWithLine> VInvoiceGroupTotalsWithLines { get; set; }
        public virtual DbSet<VInvoiceGroupTotalsWithLinesBatchSeleection> VInvoiceGroupTotalsWithLinesBatchSeleections { get; set; }
        public virtual DbSet<VInvoiceGroupTotalsWithLinesSubTotalsBySite> VInvoiceGroupTotalsWithLinesSubTotalsBySites { get; set; }
        public virtual DbSet<VInvoiceHistory> VInvoiceHistories { get; set; }
        public virtual DbSet<VInvoiceHistoryAll> VInvoiceHistoryAlls { get; set; }
        public virtual DbSet<VInvoiceHistoryMain> VInvoiceHistoryMains { get; set; }
        public virtual DbSet<VInvoicesBatchlockingLogic1> VInvoicesBatchlockingLogic1s { get; set; }
        public virtual DbSet<VInvoicesConsumptionAll> VInvoicesConsumptionAlls { get; set; }
        public virtual DbSet<VInvoicesConsumptionAllPre> VInvoicesConsumptionAllPres { get; set; }
        public virtual DbSet<VInvoicesConsumptionWater> VInvoicesConsumptionWaters { get; set; }
        public virtual DbSet<VInvoicesConsumptionWater1> VInvoicesConsumptionWater1s { get; set; }
        public virtual DbSet<VInvoicesExcludeOther> VInvoicesExcludeOthers { get; set; }
        public virtual DbSet<VInvoicesKWh> VInvoicesKWhs { get; set; }
        public virtual DbSet<VInvoicesKWh1> VInvoicesKWh1s { get; set; }
        public virtual DbSet<VJournalCdc> VJournalCdcs { get; set; }
        public virtual DbSet<VJournalCdcGstexempt> VJournalCdcGstexempts { get; set; }
        public virtual DbSet<VJournalCdcGstexemptSummary> VJournalCdcGstexemptSummaries { get; set; }
        public virtual DbSet<VJournalCdcServcFeesJournal> VJournalCdcServcFeesJournals { get; set; }
        public virtual DbSet<VJournalCdcSummary> VJournalCdcSummaries { get; set; }
        public virtual DbSet<VJournalCountCreditInvoice> VJournalCountCreditInvoices { get; set; }
        public virtual DbSet<VJournalCreditInvoiceMessageSub> VJournalCreditInvoiceMessageSubs { get; set; }
        public virtual DbSet<VJournalsAnzJournal> VJournalsAnzJournals { get; set; }
        public virtual DbSet<VJournalsBunnJournal> VJournalsBunnJournals { get; set; }
        public virtual DbSet<VJournalsDccPayfile> VJournalsDccPayfiles { get; set; }
        public virtual DbSet<VJournalsDccshPayfile> VJournalsDccshPayfiles { get; set; }
        public virtual DbSet<VJournalsHdcPayfile> VJournalsHdcPayfiles { get; set; }
        public virtual DbSet<VJournalsHealtJournal> VJournalsHealtJournals { get; set; }
        public virtual DbSet<VJournalsHealtPre> VJournalsHealtPres { get; set; }
        public virtual DbSet<VJournalsIrdJournal> VJournalsIrdJournals { get; set; }
        public virtual DbSet<VJournalsKtmJournal> VJournalsKtmJournals { get; set; }
        public virtual DbSet<VJournalsKtmPre> VJournalsKtmPres { get; set; }
        public virtual DbSet<VJournalsKtmReading> VJournalsKtmReadings { get; set; }
        public virtual DbSet<VJournalsMfish1> VJournalsMfish1s { get; set; }
        public virtual DbSet<VJournalsMfish2> VJournalsMfish2s { get; set; }
        public virtual DbSet<VJournalsMfishPayfile> VJournalsMfishPayfiles { get; set; }
        public virtual DbSet<VJournalsMfishPre> VJournalsMfishPres { get; set; }
        public virtual DbSet<VJournalsMfishRemit> VJournalsMfishRemits { get; set; }
        public virtual DbSet<VJournalsMhjJournal> VJournalsMhjJournals { get; set; }
        public virtual DbSet<VJournalsMobilRemittance> VJournalsMobilRemittances { get; set; }
        public virtual DbSet<VJournalsMobilSummary> VJournalsMobilSummaries { get; set; }
        public virtual DbSet<VJournalsMobilSummaryCte> VJournalsMobilSummaryCtes { get; set; }
        public virtual DbSet<VJournalsNccJournal> VJournalsNccJournals { get; set; }
        public virtual DbSet<VJournalsNzpPayfile> VJournalsNzpPayfiles { get; set; }
        public virtual DbSet<VJournalsNzpoJournal1> VJournalsNzpoJournal1s { get; set; }
        public virtual DbSet<VJournalsNzpoJournal2> VJournalsNzpoJournal2s { get; set; }
        public virtual DbSet<VJournalsNzpoJournal3> VJournalsNzpoJournal3s { get; set; }
        public virtual DbSet<VJournalsPnccJournal> VJournalsPnccJournals { get; set; }
        public virtual DbSet<VJournalsRepcoJournal> VJournalsRepcoJournals { get; set; }
        public virtual DbSet<VJournalsSanfJornalPre> VJournalsSanfJornalPres { get; set; }
        public virtual DbSet<VJournalsSanfJournal> VJournalsSanfJournals { get; set; }
        public virtual DbSet<VJournalsTollEnergyJournal> VJournalsTollEnergyJournals { get; set; }
        public virtual DbSet<VJournalsTollWaterJournal> VJournalsTollWaterJournals { get; set; }
        public virtual DbSet<VJournalsTycoJournal> VJournalsTycoJournals { get; set; }
        public virtual DbSet<VJournalsVeroJournal> VJournalsVeroJournals { get; set; }
        public virtual DbSet<VJournalsWpacJournal> VJournalsWpacJournals { get; set; }
        public virtual DbSet<VLastInvToDate> VLastInvToDates { get; set; }
        public virtual DbSet<VLastInvToDateSub> VLastInvToDateSubs { get; set; }
        public virtual DbSet<VLastNonZeroSpin> VLastNonZeroSpins { get; set; }
        public virtual DbSet<VLatestNonZeroDate> VLatestNonZeroDates { get; set; }
        public virtual DbSet<VNoOfDaysPerSeason> VNoOfDaysPerSeasons { get; set; }
        public virtual DbSet<VNoOfDaysPerSeasonStep2> VNoOfDaysPerSeasonStep2s { get; set; }
        public virtual DbSet<VNoofDaysPerSeasonFinal> VNoofDaysPerSeasonFinals { get; set; }
        public virtual DbSet<VPenaltyCharge> VPenaltyCharges { get; set; }
        public virtual DbSet<VRatesLookupMain> VRatesLookupMains { get; set; }
        public virtual DbSet<VReportRepInvoicesWithLine> VReportRepInvoicesWithLines { get; set; }
        public virtual DbSet<VReportsGstRate> VReportsGstRates { get; set; }
        public virtual DbSet<VReposCostExGstZeroCredit> VReposCostExGstZeroCredits { get; set; }
        public virtual DbSet<VReposCostExGstZeroCreditsIrd> VReposCostExGstZeroCreditsIrds { get; set; }
        public virtual DbSet<VReposCostExGstZeroCreditsIrdPre2dp> VReposCostExGstZeroCreditsIrdPre2dps { get; set; }
        public virtual DbSet<VReposSiteDataNzme> VReposSiteDataNzmes { get; set; }
        public virtual DbSet<VReposSitesCustomerRep> VReposSitesCustomerReps { get; set; }
        public virtual DbSet<VReposTouMonthlyReport> VReposTouMonthlyReports { get; set; }
        public virtual DbSet<VReposWestpacBpayFile> VReposWestpacBpayFiles { get; set; }
        public virtual DbSet<VReposWestpacBpayFileCheck> VReposWestpacBpayFileChecks { get; set; }
        public virtual DbSet<VReposWestpacBpayFilePre2dp> VReposWestpacBpayFilePre2dps { get; set; }
        public virtual DbSet<VRepositoryEnvironmental> VRepositoryEnvironmentals { get; set; }
        public virtual DbSet<VSiteInvLastEndDate> VSiteInvLastEndDates { get; set; }
        public virtual DbSet<VSiteInvLastStartDate> VSiteInvLastStartDates { get; set; }
        public virtual DbSet<VSiteTypesReport> VSiteTypesReports { get; set; }
        public virtual DbSet<VSiteTypesReportE> VSiteTypesReportEs { get; set; }
        public virtual DbSet<VSiteTypesReportEgt> VSiteTypesReportEgts { get; set; }
        public virtual DbSet<VSiteTypesReportG> VSiteTypesReportGs { get; set; }
        public virtual DbSet<VSiteTypesReportT> VSiteTypesReportTs { get; set; }
        public virtual DbSet<VSitesActiveWithInv> VSitesActiveWithInvs { get; set; }
        public virtual DbSet<VSitesLookupAccountNo1> VSitesLookupAccountNo1s { get; set; }
        public virtual DbSet<VSitesLookupCreateSitesList> VSitesLookupCreateSitesLists { get; set; }
        public virtual DbSet<VSitesLookupEdiSitesDetail> VSitesLookupEdiSitesDetails { get; set; }
        public virtual DbSet<VSitesLookupEdiidByBatch> VSitesLookupEdiidByBatches { get; set; }
        public virtual DbSet<VSitesLookupExSplit> VSitesLookupExSplits { get; set; }
        public virtual DbSet<VSitesLookupFilterByUtilityType> VSitesLookupFilterByUtilityTypes { get; set; }
        public virtual DbSet<VSitesLookupIcp> VSitesLookupIcps { get; set; }
        public virtual DbSet<VSitesLookupIcpByEdiid> VSitesLookupIcpByEdiids { get; set; }
        public virtual DbSet<VSitesLookupIcpBySpin> VSitesLookupIcpBySpins { get; set; }
        public virtual DbSet<VSitesLookupIcps1> VSitesLookupIcps1s { get; set; }
        public virtual DbSet<VSitesLookupMain> VSitesLookupMains { get; set; }
        public virtual DbSet<VSitesLookupMainResultsByEdiid> VSitesLookupMainResultsByEdiids { get; set; }
        public virtual DbSet<VSitesLookupRetailer1> VSitesLookupRetailer1s { get; set; }
        public virtual DbSet<VSitesLookupSiteDetailsBySpin> VSitesLookupSiteDetailsBySpins { get; set; }
        public virtual DbSet<VSitesLookupStep1> VSitesLookupStep1s { get; set; }
        public virtual DbSet<VSitesLookupStep2> VSitesLookupStep2s { get; set; }
        public virtual DbSet<VSitesLookupStep3> VSitesLookupStep3s { get; set; }
        public virtual DbSet<VSparkGst> VSparkGsts { get; set; }
        public virtual DbSet<VSparkMonthlySummaryLine> VSparkMonthlySummaryLines { get; set; }
        public virtual DbSet<VSparkMonthlySummaryLinesBase> VSparkMonthlySummaryLinesBases { get; set; }
        public virtual DbSet<VSparkNewSite> VSparkNewSites { get; set; }
        public virtual DbSet<VSparkOpeningBalance> VSparkOpeningBalances { get; set; }
        public virtual DbSet<VSparkPayfile> VSparkPayfiles { get; set; }
        public virtual DbSet<VSparkPayfilePre2dp> VSparkPayfilePre2dps { get; set; }
        public virtual DbSet<VSplitChildAmountToPayTestSum> VSplitChildAmountToPayTestSums { get; set; }
        public virtual DbSet<VSplitInvoicesByBatch> VSplitInvoicesByBatches { get; set; }
        public virtual DbSet<VSplitInvoicesSiteDetail> VSplitInvoicesSiteDetails { get; set; }
        public virtual DbSet<VSplitParentAmountToPayTest> VSplitParentAmountToPayTests { get; set; }
        public virtual DbSet<VSplitParentChildAmountToPayCompareTest> VSplitParentChildAmountToPayCompareTests { get; set; }
        public virtual DbSet<VSplitParentChildAmountToPayCompareTestView> VSplitParentChildAmountToPayCompareTestViews { get; set; }
        public virtual DbSet<VSplitParentSite> VSplitParentSites { get; set; }
        public virtual DbSet<VSplitSite> VSplitSites { get; set; }
        public virtual DbSet<VSplitSubDetail> VSplitSubDetails { get; set; }
        public virtual DbSet<VSplitSumSplitValueByParentSite> VSplitSumSplitValueByParentSites { get; set; }
        public virtual DbSet<VTablesViewsInvoiceHeader> VTablesViewsInvoiceHeaders { get; set; }
        public virtual DbSet<VTariffsDuplicationTest> VTariffsDuplicationTests { get; set; }
        public virtual DbSet<VTariffsDuplicationTestFinal> VTariffsDuplicationTestFinals { get; set; }
        public virtual DbSet<VWebChartActual> VWebChartActuals { get; set; }
        public virtual DbSet<VWebChartsActualsSmall> VWebChartsActualsSmalls { get; set; }
        public virtual DbSet<VWebDailySummaryDatum> VWebDailySummaryData { get; set; }
        public virtual DbSet<VWebEmissionsDatum> VWebEmissionsData { get; set; }
        public virtual DbSet<VWebFinancialYearEndCalc> VWebFinancialYearEndCalcs { get; set; }
        public virtual DbSet<VWebFinancialYearEndCalcDefunct> VWebFinancialYearEndCalcDefuncts { get; set; }
        public virtual DbSet<VWebInvoiceDetail> VWebInvoiceDetails { get; set; }
        public virtual DbSet<VWebInvoiceDetailReport> VWebInvoiceDetailReports { get; set; }
        public virtual DbSet<VWebInvoiceHeader> VWebInvoiceHeaders { get; set; }
        public virtual DbSet<VWebInvoiceLine> VWebInvoiceLines { get; set; }
        public virtual DbSet<VWebInvoiceSearch> VWebInvoiceSearches { get; set; }
        public virtual DbSet<VWebMasterFiltersBySite> VWebMasterFiltersBySites { get; set; }
        public virtual DbSet<VWebRetailerLookupByInvoice> VWebRetailerLookupByInvoices { get; set; }
        public virtual DbSet<VWebSiteDetail> VWebSiteDetails { get; set; }
        public virtual DbSet<VWebSiteRetailerFilter> VWebSiteRetailerFilters { get; set; }
        public virtual DbSet<VWebSiteSearch> VWebSiteSearches { get; set; }
        public virtual DbSet<VWebSummaryAccrualsDollarsConsumption> VWebSummaryAccrualsDollarsConsumptions { get; set; }
        public virtual DbSet<VWebSummaryActual> VWebSummaryActuals { get; set; }
        public virtual DbSet<VWebSummaryBudgetDollarsConsumption> VWebSummaryBudgetDollarsConsumptions { get; set; }
        public virtual DbSet<VWebSummaryEnvDollarsConsumption> VWebSummaryEnvDollarsConsumptions { get; set; }
        public virtual DbSet<VWebSummaryEnvDollarsConsumptionAccrual> VWebSummaryEnvDollarsConsumptionAccruals { get; set; }
        public virtual DbSet<VWebSummaryInvoicesActualsFinancial> VWebSummaryInvoicesActualsFinancials { get; set; }
        public virtual DbSet<VWebSummaryInvoicesActualsFinancial1> VWebSummaryInvoicesActualsFinancial1s { get; set; }
        public virtual DbSet<VWebSummaryInvoicesActualsFinancialBase> VWebSummaryInvoicesActualsFinancialBases { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Server=.\\;Database=Master_DB_DEMO;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Latin1_General_CI_AS");

            modelBuilder.Entity<DeleteVBvCheckBatchOneOffFeeReview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Batch_OneOffFee_Review");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.LineDescription)
                    .HasMaxLength(250)
                    .HasColumnName("Line Description");

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.RateDescription)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DeleteVBvCheckBudegtGapsBaseSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Budegt_Gaps_Base_Sub");

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.LenUtilityCode).HasColumnName("Len_UtilityCode");

                entity.Property(e => e.UtilityCode)
                    .HasMaxLength(255)
                    .HasColumnName("Utility_Code");
            });

            modelBuilder.Entity<DeleteVBvCheckCalConsumptionPre>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Cal_Consumption_pre");

                entity.Property(e => e.ConsumptionExpected).HasColumnName("Consumption_Expected");

                entity.Property(e => e.HeaderUnits).HasColumnName("Header_Units");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Comments");

                entity.Property(e => e.LinesUnits).HasColumnName("Lines_Units");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<DeleteVBvCheckCalConsumptionPre3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Cal_Consumption_pre3");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<DeleteVBvCheckCarbonFactorArea>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Carbon_Factor_Area");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CarbonFactorArea)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Carbon_Factor_Area");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);
            });

            modelBuilder.Entity<DeleteVBvCheckCarbonFactorAreaEau>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Carbon_Factor_Area_EAUS");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CarbonFactorArea)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Carbon_Factor_Area");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);
            });

            modelBuilder.Entity<DeleteVBvCheckChargesNoGst>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_ChargesNoGST");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.GstInInvoiceLines).HasColumnName("GST in Invoice Lines");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");
            });

            modelBuilder.Entity<DeleteVBvCheckChargesNoPpd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Charges_NoPPD");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.Ppd).HasColumnName("PPD");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");
            });

            modelBuilder.Entity<DeleteVBvCheckChargesWithNoGst>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_ChargesWithNoGST");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");
            });

            modelBuilder.Entity<DeleteVBvCheckChargesWithNoPpd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_ChargesWithNoPPD");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.Ppd).HasColumnName("PPD");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");
            });

            modelBuilder.Entity<DeleteVBvCheckConsumptionCostsFinalSql>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Consumption_Costs_Final_SQL");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.AmountExGst).HasColumnName("AmountExGST");

                entity.Property(e => e.Consumption).HasColumnName("$/Consumption");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InputType).HasMaxLength(50);

                entity.Property(e => e.InvAmountExGst).HasColumnName("InvAmountExGST");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<DeleteVBvCheckDateGapsResult>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Date_Gaps_Result");

                entity.Property(e => e.DgBatchNo).HasColumnName("DG_BatchNo");

                entity.Property(e => e.DgDateGap).HasColumnName("DG_Date_Gap");

                entity.Property(e => e.DgId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DG_ID");

                entity.Property(e => e.DgInvEndDate)
                    .HasColumnType("date")
                    .HasColumnName("DG_InvEndDate");

                entity.Property(e => e.DgInvStartDate)
                    .HasColumnType("date")
                    .HasColumnName("DG_InvStartDate");

                entity.Property(e => e.DgLastEnd)
                    .HasColumnType("date")
                    .HasColumnName("DG_LastEnd");

                entity.Property(e => e.DgLastInvoice).HasColumnName("DG_LastInvoice");

                entity.Property(e => e.DgLastSiteNo).HasColumnName("DG_LastSiteNo");

                entity.Property(e => e.DgNextBachNo).HasColumnName("DG_NextBachNo");

                entity.Property(e => e.DgNextInvoice).HasColumnName("DG_NextInvoice");

                entity.Property(e => e.DgNextStart)
                    .HasColumnType("date")
                    .HasColumnName("DG_NextStart");

                entity.Property(e => e.DgSiteNo).HasColumnName("DG_SiteNo");

                entity.Property(e => e.DgSiteType)
                    .HasMaxLength(10)
                    .HasColumnName("DG_SiteType");

                entity.Property(e => e.DgSpinvNumber).HasColumnName("DG_SPInvNumber");
            });

            modelBuilder.Entity<DeleteVBvCheckExpectedRaw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_ExpectedRaw");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.HistInvEnd).HasColumnType("date");

                entity.Property(e => e.HistInvStart).HasColumnType("date");

                entity.Property(e => e.HistInvToPay).HasColumnType("money");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteNoInvoices).HasColumnName("SiteNo_Invoices");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitTotal).HasColumnName("Unit_Total");
            });

            modelBuilder.Entity<DeleteVBvCheckFutureInvoiceEnteredDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_FutureInvoiceEnteredDate");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(37)
                    .IsUnicode(false);

                entity.Property(e => e.InvEnteredDate).HasColumnType("date");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TodaysDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<DeleteVBvCheckFutureInvoiceIssueDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_FutureInvoiceIssueDate");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<DeleteVBvCheckGreenEneregyVerification>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Green_Eneregy_Verification");

                entity.Property(e => e.CalculatedGreenConsumption).HasColumnName("Calculated Green consumption");

                entity.Property(e => e.GreenConsumption).HasColumnName("Green consumption");

                entity.Property(e => e.GreenEnergy).HasColumnName("Green Energy %");

                entity.Property(e => e.InvoiceNotes)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Notes");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.TotalConsumption).HasColumnName("Total Consumption");

                entity.Property(e => e.Utility).HasMaxLength(255);
            });

            modelBuilder.Entity<DeleteVBvCheckGsttickmismatchTTariffstInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_GSTtickmismatch_tTariffstInvoices");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.GstInInvoiceLines).HasColumnName("GST in InvoiceLines");

                entity.Property(e => e.GstInTTariffs).HasColumnName("GST in tTariffs");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");
            });

            modelBuilder.Entity<DeleteVBvCheckHeaderConsumptionIsZero>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Header_Consumption_Is_Zero");

                entity.Property(e => e.DoLinesHaveRateUnitCodedConsumption).HasColumnName("Do_Lines_Have_Rate/Unit_Coded_Consumption");

                entity.Property(e => e.HeaderUnits).HasColumnName("Header_Units");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.LinesUnits).HasColumnName("Lines_Units");

                entity.Property(e => e.MaxSpinno).HasColumnName("MaxSPINNo");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.NoOfDaysOfZeroConsumption).HasColumnName("No of days of zero consumption");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Utility).HasMaxLength(255);
            });

            modelBuilder.Entity<DeleteVBvCheckHeaderConsumptionNotMatchLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Header_Consumption_Not_Match_Lines");

                entity.Property(e => e.CalculatedUnits).HasColumnName("Calculated Units");

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Comments");

                entity.Property(e => e.InvoicedUnits).HasColumnName("Invoiced Units");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<DeleteVBvCheckHeaderNonBlankField>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Header_NonBlankFields");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvEnteredDate).HasColumnType("date");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitTotal).HasColumnName("Unit_Total");
            });

            modelBuilder.Entity<DeleteVBvCheckInvSiteNotInSite>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Inv_Site_Not_In_Sites");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.SpinvNumber)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<DeleteVBvCheckInvoiceBilledintoFuture>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_InvoiceBilledintoFuture");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvEnteredDate).HasColumnType("date");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<DeleteVBvCheckInvoiceEndDateExceedsCeasedDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_InvoiceEndDate_exceeds_CeasedDate");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.DateCeased).HasColumnType("date");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.ProductSubCatCode)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat_Code");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerName).HasMaxLength(50);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<DeleteVBvCheckInvoiceNilReversal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Invoice_Nil_Reversals");

                entity.Property(e => e.InputTypeCode).HasMaxLength(50);

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<DeleteVBvCheckInvoiceNoDaysHeaderVsDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Invoice_No_Days_HeaderVsDates");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CorrectUnits).HasColumnName("Correct_Units");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.Spil).HasColumnName("SPIL");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DeleteVBvCheckInvoiceNoDaysHeaderVsLines2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Invoice_No_Days_HeaderVsLines2");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CorrectUnits).HasColumnName("Correct Units");

                entity.Property(e => e.CountSpin).HasColumnName("CountSPIN");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(52)
                    .IsUnicode(false)
                    .HasColumnName("Error Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DeleteVBvCheckInvoiceNoDaysHeaderVsLines3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Invoice_No_Days_HeaderVsLines3");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CorrectUnits).HasColumnName("Correct Units");

                entity.Property(e => e.CountSpin).HasColumnName("CountSPIN");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(52)
                    .IsUnicode(false)
                    .HasColumnName("Error Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DeleteVBvCheckInvoiceOpeningBalanceTypeInvalid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_InvoiceOpeningBalanceTypeInvalid");

                entity.Property(e => e.CodeCode).HasMaxLength(50);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(41)
                    .IsUnicode(false)
                    .HasColumnName("Error Description");

                entity.Property(e => e.InvOpenBalType).HasMaxLength(10);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<DeleteVBvCheckInvoiceTest1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Invoice_Test_1");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.RsumLines).HasColumnName("RSumLines");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test1LineTotal).HasColumnName("Test1  - Line Total");
            });

            modelBuilder.Entity<DeleteVBvCheckInvoiceTest2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Invoice_Test_2");

                entity.Property(e => e.CalcGst).HasColumnName("Calc_GST");

                entity.Property(e => e.CurrentTaxRate).HasColumnName("Current_Tax_Rate");

                entity.Property(e => e.GstValue).HasColumnName("GST_Value");

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.RInvGst)
                    .HasColumnType("money")
                    .HasColumnName("R_InvGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test2Gst).HasColumnName("Test2  - GST");
            });

            modelBuilder.Entity<DeleteVBvCheckInvoiceTest3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Invoice_Test_3");

                entity.Property(e => e.SpinvNumber)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SPInvNumber");

                entity.Property(e => e.Test3SubTotal)
                    .HasColumnType("money")
                    .HasColumnName("Test3  - Sub Total");
            });

            modelBuilder.Entity<DeleteVBvCheckInvoiceTest4>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Invoice_Test_4");

                entity.Property(e => e.InvAmountCalc).HasColumnType("money");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.SpinvNumber)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SPInvNumber");

                entity.Property(e => e.Test4CalculatedTotal)
                    .HasColumnType("money")
                    .HasColumnName("Test4  - Calculated Total");
            });

            modelBuilder.Entity<DeleteVBvCheckInvoiceTest5>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Invoice_Test_5");

                entity.Property(e => e.InvAmount).HasColumnType("money");

                entity.Property(e => e.InvAmountCalc).HasColumnType("money");

                entity.Property(e => e.SpinvNumber)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SPInvNumber");

                entity.Property(e => e.Test5InvoiceAmount)
                    .HasColumnType("money")
                    .HasColumnName("Test5 - Invoice Amount");
            });

            modelBuilder.Entity<DeleteVBvCheckInvoiceTest6>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Invoice_Test_6");

                entity.Property(e => e.InvAmount).HasColumnType("money");

                entity.Property(e => e.InvAmountCalc).HasColumnType("money");

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.SpinvNumber)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SPInvNumber");

                entity.Property(e => e.Test6AmountToPay)
                    .HasColumnType("money")
                    .HasColumnName("Test6  - Amount to Pay");
            });

            modelBuilder.Entity<DeleteVBvCheckInvoiceTest7>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Invoice_Test_7");

                entity.Property(e => e.InvAmount).HasColumnType("money");

                entity.Property(e => e.InvAmountCalc).HasColumnType("money");

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.SpinvNumber)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SPInvNumber");

                entity.Property(e => e.Test6AmountToPayDifferentToCalculated)
                    .HasColumnType("money")
                    .HasColumnName("Test6 - Amount to Pay Different to Calculated");
            });

            modelBuilder.Entity<DeleteVBvCheckInvoiceTest7SubAogLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Invoice_Test_7_Sub_AOG_Lines");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.InvLinesIncGst).HasColumnName("InvLines_IncGST");

                entity.Property(e => e.RateCategory)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TaxRate).HasColumnName("Tax_Rate");
            });

            modelBuilder.Entity<DeleteVBvCheckInvoiceTotalsValidation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_InvoiceTotalsValidation");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmount).HasColumnType("money");

                entity.Property(e => e.InvAmountExGst).HasColumnName("InvAmountExGST");

                entity.Property(e => e.InvAmountGst).HasColumnName("InvAmountGST");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvAmountToPayExGst).HasColumnName("InvAmountToPayExGST");

                entity.Property(e => e.InvAmountToPayGst).HasColumnName("InvAmountToPayGST");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvDiscountExGst).HasColumnName("InvDiscountExGST");

                entity.Property(e => e.InvDiscountGst).HasColumnName("InvDiscountGST");

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.OpeningBalanceExGst).HasColumnName("OpeningBalanceExGST");

                entity.Property(e => e.OpeningBalanceGst).HasColumnName("OpeningBalanceGST");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<DeleteVBvCheckInvoiceTotalsValidationTest1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_InvoiceTotalsValidation_Test1");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test1ObExGst).HasColumnName("Test1 – OB ExGST");
            });

            modelBuilder.Entity<DeleteVBvCheckInvoiceTotalsValidationTest10>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_InvoiceTotalsValidation_Test10");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test10InvTotalGst).HasColumnName("Test10 – InvTotal GST");
            });

            modelBuilder.Entity<DeleteVBvCheckInvoiceTotalsValidationTest11>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_InvoiceTotalsValidation_Test11");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test11InvTotalInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Test11 – InvTotal InclGST");
            });

            modelBuilder.Entity<DeleteVBvCheckInvoiceTotalsValidationTest12>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_InvoiceTotalsValidation_Test12");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test12AmountToPayExGst).HasColumnName("Test12 – AmountToPay ExGST");
            });

            modelBuilder.Entity<DeleteVBvCheckInvoiceTotalsValidationTest13>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_InvoiceTotalsValidation_Test13");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test13AmountToPayGst).HasColumnName("Test13 – AmountToPay GST");
            });

            modelBuilder.Entity<DeleteVBvCheckInvoiceTotalsValidationTest14>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_InvoiceTotalsValidation_Test14");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test14AmountToPayInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Test14 – AmountToPay InclGST");
            });

            modelBuilder.Entity<DeleteVBvCheckInvoiceTotalsValidationTest2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_InvoiceTotalsValidation_Test2");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test2ObGst).HasColumnName("Test2 – OB GST");
            });

            modelBuilder.Entity<DeleteVBvCheckInvoiceTotalsValidationTest3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_InvoiceTotalsValidation_Test3");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test3LineTotalExGst)
                    .HasColumnType("money")
                    .HasColumnName("Test3 – LineTotal ExGST");
            });

            modelBuilder.Entity<DeleteVBvCheckInvoiceTotalsValidationTest4>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_InvoiceTotalsValidation_Test4");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test4LineTotalGst)
                    .HasColumnType("money")
                    .HasColumnName("Test4 – LineTotal GST");
            });

            modelBuilder.Entity<DeleteVBvCheckInvoiceTotalsValidationTest5>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_InvoiceTotalsValidation_Test5");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test5LineTotalInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Test5 – LineTotal InclGST");
            });

            modelBuilder.Entity<DeleteVBvCheckInvoiceTotalsValidationTest6>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_InvoiceTotalsValidation_Test6");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test6PpdExGst).HasColumnName("Test6 – PPD ExGST");
            });

            modelBuilder.Entity<DeleteVBvCheckInvoiceTotalsValidationTest7>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_InvoiceTotalsValidation_Test7");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test7PpdGst).HasColumnName("Test7 – PPD GST");
            });

            modelBuilder.Entity<DeleteVBvCheckInvoiceTotalsValidationTest8>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_InvoiceTotalsValidation_Test8");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test8PpdInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Test8 – PPD InclGST");
            });

            modelBuilder.Entity<DeleteVBvCheckInvoiceTotalsValidationTest9>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_InvoiceTotalsValidation_Test9");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test9InvTotalExGst).HasColumnName("Test9 – InvTotal ExGST");
            });

            modelBuilder.Entity<DeleteVBvCheckInvoiceUnitTypeView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Invoice_UnitType_View");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvoiceUnitType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Invoice Unit Type");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitType).HasMaxLength(50);
            });

            modelBuilder.Entity<DeleteVBvCheckInvoicesGstVsTariffsGst>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_InvoicesGST_vs_TariffsGST");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.InvoiceLinesGst).HasColumnName("InvoiceLines_GST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.TariffsGst).HasColumnName("Tariffs_GST");
            });

            modelBuilder.Entity<DeleteVBvCheckInvoicesPpdVsTariffsPpd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_InvoicesPPD_vs_TariffsPPD");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.InvoiceLinesPpd).HasColumnName("InvoiceLines_PPD");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.TariffsPpd).HasColumnName("Tariffs_PPD");
            });

            modelBuilder.Entity<DeleteVBvCheckKgVsCalculatedKWh>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Kg_Vs_Calculated_kWh");

                entity.Property(e => e.CalculatedKWh).HasColumnName("Calculated kWh");

                entity.Property(e => e.HeaderKWh).HasColumnName("Header kWh");

                entity.Property(e => e.KWhDifference).HasColumnName("kWh difference");

                entity.Property(e => e.LinesKg).HasColumnName("Lines kg");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UtilityCode)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("Utility_Code");
            });

            modelBuilder.Entity<DeleteVBvCheckLineTotalNotBalancing1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_LineTotalNotBalancing1");

                entity.Property(e => e.CalculatedLineTotal).HasColumnName("Calculated line total");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.LineDescription)
                    .HasMaxLength(250)
                    .HasColumnName("Line Description");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(1)
                    .HasColumnName("ProductID");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.Spil).HasColumnName("SPIL");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.SpinDays).HasColumnName("SPIN Days");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DeleteVBvCheckLineTotalNotBalancing2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_LineTotalNotBalancing2");

                entity.Property(e => e.CalculatedLineTotal).HasColumnName("Calculated line total");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.LineDescription)
                    .HasMaxLength(250)
                    .HasColumnName("Line Description");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(1)
                    .HasColumnName("ProductID");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.Spil).HasColumnName("SPIL");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.SpinDays).HasColumnName("SPIN Days");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DeleteVBvCheckLineTotalsFromTariff>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Line_Totals_From_Tariffs");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(69)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InputTypeCode).HasMaxLength(50);

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.LineValue).HasColumnName("Line_Value");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.RetailerName).HasMaxLength(50);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site_Comments");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffDescription).HasMaxLength(255);

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.TariffValue).HasColumnName("Tariff_Value");
            });

            modelBuilder.Entity<DeleteVBvCheckMeterReadFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Meter_Read_Final");

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Comments");

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffDescription)
                    .HasMaxLength(250)
                    .HasColumnName("Tariff Description");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DeleteVBvCheckMultipleInvBatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Multiple_Inv_Batch");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Comments");

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");
            });

            modelBuilder.Entity<DeleteVBvCheckMultipleInvoiceTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Multiple_Invoice_Test");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.Nmi)
                    .HasMaxLength(255)
                    .HasColumnName("NMI");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.RetailerInvNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Retailer Inv Number");

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<DeleteVBvCheckMultipleInvoicesSql>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_MultipleInvoices_SQL");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.Nmi)
                    .HasMaxLength(255)
                    .HasColumnName("NMI");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.RetailerInvNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Retailer Inv Number");

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<DeleteVBvCheckMultiplierNotMatchFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Multiplier_Not_Match_final");

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Comments");

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spil).HasColumnName("SPIL");

                entity.Property(e => e.SpilMultiplier).HasColumnName("SPIL Multiplier");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.TariffDescription)
                    .HasMaxLength(250)
                    .HasColumnName("Tariff Description");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.TariffMultiplier).HasColumnName("Tariff Multiplier");
            });

            modelBuilder.Entity<DeleteVBvCheckNullSiteStartDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Null_Site_StartDate");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.DateAdded).HasColumnType("date");

                entity.Property(e => e.FirstInvoiceStartDate).HasColumnType("date");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.ManagedSite).HasColumnName("Managed Site");

                entity.Property(e => e.RetailerName).HasMaxLength(50);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.StartDate).HasColumnType("date");
            });

            modelBuilder.Entity<DeleteVBvCheckNullValueInvoiceLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_NullValueInvoiceLines");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(63)
                    .IsUnicode(false)
                    .HasColumnName("Error_description");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DeleteVBvCheckNullValueInvoiceLinesMeterReadingfield>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Null_Value_InvoiceLinesMeterReadingfields");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<DeleteVBvCheckOcandWumeterRead>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_CheckOCandWUMeterRead");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.QuId).HasColumnName("Qu_ID");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<DeleteVBvCheckOpeningBalNoGst>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_OpeningBalNoGST");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.OpeningBalanceExGst).HasColumnName("OpeningBalanceExGST");

                entity.Property(e => e.OpeningBalanceGst).HasColumnName("OpeningBalanceGST");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<DeleteVBvCheckPpd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_PPD");

                entity.Property(e => e.CalculatedPpd).HasColumnName("CalculatedPPD");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.InvoicedPpd).HasColumnName("Invoiced_PPD");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<DeleteVBvCheckPpdexGstFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_PPDexGST_Final");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.CalculatedDiscount).HasColumnName("Calculated discount");

                entity.Property(e => e.CalculatedPpdexGst).HasColumnName("Calculated PPDexGST");

                entity.Property(e => e.ClientCode).HasMaxLength(10);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvoicePpdexGst)
                    .HasColumnType("money")
                    .HasColumnName("InvoicePPDexGST");

                entity.Property(e => e.Ppd).HasColumnName("PPD");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeCode)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<DeleteVBvCheckPpdexGstcheckCalDi>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_PPDexGSTcheckCalDis");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.CalculatedDiscount).HasColumnName("Calculated discount");

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvoicePpdexGst).HasColumnName("InvoicePPDexGST");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteTypeCode)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<DeleteVBvCheckPpdtickmismatchTTariffstInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_PPDtickmismatch_tTariffstInvoices");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.PpdInInvoiceLines).HasColumnName("PPD in InvoiceLines");

                entity.Property(e => e.PpdInTTariffs).HasColumnName("PPD in tTariffs");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");
            });

            modelBuilder.Entity<DeleteVBvCheckRateIdnotintRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_RateIDnotintRates");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<DeleteVBvCheckReadingGap>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_ReadingGaps");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.MeterNo).HasMaxLength(255);

                entity.Property(e => e.PrevCurrReading).HasColumnName("Prev_CurrReading");

                entity.Property(e => e.PrevInvNotes)
                    .HasMaxLength(255)
                    .HasColumnName("Prev_InvNotes");

                entity.Property(e => e.PrevInvStartDate)
                    .HasColumnType("date")
                    .HasColumnName("Prev_InvStartDate");

                entity.Property(e => e.PrevTariffId).HasColumnName("Prev_TariffID");

                entity.Property(e => e.PreviousSpil).HasColumnName("Previous SPIL");

                entity.Property(e => e.PreviousSpin).HasColumnName("Previous_SPIN");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(1)
                    .HasColumnName("ProductID");

                entity.Property(e => e.Rank1).HasColumnName("rank1");

                entity.Property(e => e.RetailerName).HasMaxLength(50);

                entity.Property(e => e.SiteNotes).IsUnicode(false);

                entity.Property(e => e.Spil).HasColumnName("SPIL");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DeleteVBvCheckReadingNilRev>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Reading_Nil_Rev");

                entity.Property(e => e.InputTypeCode).HasMaxLength(50);

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<DeleteVBvCheckSiteCeasedDatesIsBlank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Site_Ceased_DatesIsBlank");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.DateCeased).HasColumnType("date");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerName).HasMaxLength(50);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");
            });

            modelBuilder.Entity<DeleteVBvCheckSitesCeasedFinalInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_SitesCeased_FinalInvoice");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.DateCeased).HasColumnType("date");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.MaxOfInvEndDate).HasColumnType("date");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.Rdtypcd)
                    .HasMaxLength(10)
                    .HasColumnName("rdtypcd");

                entity.Property(e => e.RetailerName).HasMaxLength(50);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<DeleteVBvCheckSitesNoInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Sites_No_Invoice");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(49)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.LastInvEndDate).HasColumnType("date");

                entity.Property(e => e.LastInvStartDate).HasColumnType("date");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);
            });

            modelBuilder.Entity<DeleteVBvCheckSolarRebates4>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Solar_Rebates4");

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<DeleteVBvCheckSplitCheck>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Split_Check");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SplitParentSite).HasColumnName("Split_Parent_Site");

                entity.Property(e => e.SumOfSplitShouldEqual1).HasColumnName("Sum of Split Should equal 1");
            });

            modelBuilder.Entity<DeleteVBvCheckSumInvTotalsValidationTest1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_SumInvTotalsValidation_Test1");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test1ObExgst)
                    .HasColumnType("numeric(21, 4)")
                    .HasColumnName("Test 1 - OB EXGST");
            });

            modelBuilder.Entity<DeleteVBvCheckSumInvTotalsValidationTest10>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_SumInvTotalsValidation_Test10");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test10CurrentChargesInclGst).HasColumnName("Test 10 - CurrentChargesInclGST");
            });

            modelBuilder.Entity<DeleteVBvCheckSumInvTotalsValidationTest11>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_SumInvTotalsValidation_Test11");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test11AmtToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("Test 11- AmtToPayExGST");
            });

            modelBuilder.Entity<DeleteVBvCheckSumInvTotalsValidationTest12>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_SumInvTotalsValidation_Test12");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test12AmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("Test 12 - AmountToPayGST");
            });

            modelBuilder.Entity<DeleteVBvCheckSumInvTotalsValidationTest13Main>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_SumInvTotalsValidation_Test13_main");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test13AmtToPayInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Test 13 - AmtToPayInclGST");
            });

            modelBuilder.Entity<DeleteVBvCheckSumInvTotalsValidationTest2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_SumInvTotalsValidation_Test2");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test2Obgst).HasColumnName("Test 2 - OBGST");
            });

            modelBuilder.Entity<DeleteVBvCheckSumInvTotalsValidationTest3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_SumInvTotalsValidation_Test3");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test3LineTotalExGst).HasColumnName("Test3 - Line Total ExGST");
            });

            modelBuilder.Entity<DeleteVBvCheckSumInvTotalsValidationTest4Final>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_SumInvTotalsValidation_Test4Final");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test4LineTotalGst).HasColumnName("Test 4 - LineTotalGST");
            });

            modelBuilder.Entity<DeleteVBvCheckSumInvTotalsValidationTest4sub2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_SumInvTotalsValidation_Test4sub2");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<DeleteVBvCheckSumInvTotalsValidationTest5>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_SumInvTotalsValidation_Test5");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test5SubTotal)
                    .HasColumnType("money")
                    .HasColumnName("Test 5 - Sub Total");
            });

            modelBuilder.Entity<DeleteVBvCheckSumInvTotalsValidationTest6>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_SumInvTotalsValidation_Test6");

                entity.Property(e => e.Discount).HasColumnName("Discount%");

                entity.Property(e => e.InvDiscountExGst).HasColumnName("InvDiscountExGST");

                entity.Property(e => e.InvDiscountGst).HasColumnName("InvDiscountGST");

                entity.Property(e => e.LinePpdgst).HasColumnName("Line PPDGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumInvLineTotalPpdgst).HasColumnName("SumInvLineTotalPPDGST");

                entity.Property(e => e.Test6).HasColumnName("Test 6");
            });

            modelBuilder.Entity<DeleteVBvCheckSumInvTotalsValidationTest6final>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_SumInvTotalsValidation_Test6final");

                entity.Property(e => e.CountSpin).HasColumnName("CountSPIN");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.InvDiscountGst).HasColumnName("InvDiscountGST");

                entity.Property(e => e.Ppd).HasColumnName("PPD");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test6Ppdgst).HasColumnName("Test 6 -PPDGST");
            });

            modelBuilder.Entity<DeleteVBvCheckSumInvTotalsValidationTest6final1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_SumInvTotalsValidation_Test6final1");

                entity.Property(e => e.CountSpin).HasColumnName("CountSPIN");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.InvDiscountGst).HasColumnName("InvDiscountGST");

                entity.Property(e => e.Ppd).HasColumnName("PPD");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test6).HasColumnName("Test 6");
            });

            modelBuilder.Entity<DeleteVBvCheckSumInvTotalsValidationTest6sub4>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_SumInvTotalsValidation_Test6sub4");

                entity.Property(e => e.Discount).HasColumnName("Discount%");

                entity.Property(e => e.InvDiscountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountExGST");

                entity.Property(e => e.InvDiscountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountGST");

                entity.Property(e => e.LinePpdgst).HasColumnName("Line PPDGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumInvLineTotalPpdgst).HasColumnName("SumInvLineTotalPPDGST");
            });

            modelBuilder.Entity<DeleteVBvCheckSumInvTotalsValidationTest7>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_SumInvTotalsValidation_Test7");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test7).HasColumnName("Test 7");
            });

            modelBuilder.Entity<DeleteVBvCheckSumInvTotalsValidationTest719112018>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_SumInvTotalsValidation_Test7_19112018");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test7PpdinclGst).HasColumnName("Test 7 - PPDInclGST");
            });

            modelBuilder.Entity<DeleteVBvCheckSumInvTotalsValidationTest8>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_SumInvTotalsValidation_Test8");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test8CurrentChargesExGst).HasColumnName("Test 8 - CurrentChargesExGST");
            });

            modelBuilder.Entity<DeleteVBvCheckSumInvTotalsValidationTest9>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_SumInvTotalsValidation_Test9");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test9CurrentChargesGst).HasColumnName("Test 9 - CurrentChargesGST");
            });

            modelBuilder.Entity<DeleteVBvCheckSumInvTotalsValidationTesting1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_SumInvTotalsValidation_Testing1");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test1ObExgst)
                    .HasColumnType("numeric(21, 4)")
                    .HasColumnName("Test 1 - OB EXGST");
            });

            modelBuilder.Entity<DeleteVBvCheckTariffIdnotintTariff>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_TariffIDnotintTariffs");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");
            });

            modelBuilder.Entity<DeleteVBvCheckTariffSiteNoMismatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Tariff_SiteNO_Mismatch");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.InvoiceSpid).HasColumnName("Invoice_SPID");

                entity.Property(e => e.IsASplitInvoice)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("Is_A_Split_Invoice");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(10)
                    .HasColumnName("ProductID");

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.SiteType)
                    .HasMaxLength(50)
                    .HasColumnName("Site_Type");

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.Spil).HasColumnName("SPIL");

                entity.Property(e => e.SpilRateId).HasColumnName("SPIL_RateID");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.TariffSpid).HasColumnName("Tariff_SPID");

                entity.Property(e => e.TariffsRateId).HasColumnName("Tariffs_RateID");
            });

            modelBuilder.Entity<DeleteVBvCheckUnitMultiplierIntegrity>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_check_UnitMultiplierIntegrity");

                entity.Property(e => e.DataEntryNotes).HasColumnName("Data_Entry_Notes");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TInvoiceLinesUnitMultiplier).HasColumnName("tInvoiceLines_UnitMultiplier");

                entity.Property(e => e.TInvoiceLinesUnitMultiplierType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("tInvoiceLines_UnitMultiplierType");

                entity.Property(e => e.TTariffsUnitMultiplier).HasColumnName("tTariffs_UnitMultiplier");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitMultiplierType)
                    .IsRequired()
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<DeleteVBvCheckUnitMultiplierVerification>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_UnitMultiplierVerification");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.Spib).HasColumnName("SPIB");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spil).HasColumnName("SPIL");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.TariffUnitMultiplierType)
                    .IsRequired()
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<DeleteVBvCheckUnitMultiplierVerificationDay>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_UnitMultiplierVerification_Days");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.Spib).HasColumnName("SPIB");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.TariffUnitMultiplierType)
                    .IsRequired()
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<DeleteVBvCheckUnitMultiplierVerificationLossFactor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_UnitMultiplierVerification_LossFactor");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.Spib).HasColumnName("SPIB");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spil).HasColumnName("SPIL");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.TariffUnitMultiplierType)
                    .IsRequired()
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<DeleteVBvCheckUnlockedBatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Check_Unlocked_Batches");

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.ClientCodeSp)
                    .HasMaxLength(255)
                    .HasColumnName("ClientCodeSP");

                entity.Property(e => e.InputTypeCode).HasMaxLength(50);

                entity.Property(e => e.NoOfInv).HasColumnName("No_Of_Inv");

                entity.Property(e => e.Spib).HasColumnName("SPIB");
            });

            modelBuilder.Entity<DeleteVBvChecksDateGap>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Checks_Date_Gap");

                entity.Property(e => e.DateGapTest)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("DateGap_Test");

                entity.Property(e => e.DgId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DG_ID");

                entity.Property(e => e.LastInvoiceTest)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("LastInvoice_Test");

                entity.Property(e => e.OverlapTest)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("Overlap_Test");
            });

            modelBuilder.Entity<DeleteVBvChecksDateGapLastInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Checks_Date_Gap_Last_Invoice");

                entity.Property(e => e.DgId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DG_ID");

                entity.Property(e => e.LastInvoiceTest)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("LastInvoice_Test");
            });

            modelBuilder.Entity<DeleteVBvChecksMjToKwhTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Checks_MJ_To_KWH_Test");

                entity.Property(e => e.CalculatedGj).HasColumnName("Calculated_GJ");

                entity.Property(e => e.CalculatedKwh).HasColumnName("Calculated_KWh");

                entity.Property(e => e.CalculatedMj).HasColumnName("Calculated_MJ");

                entity.Property(e => e.GjDifference).HasColumnName("GJ_Difference");

                entity.Property(e => e.HeaderKWh).HasColumnName("Header_kWh");

                entity.Property(e => e.LinesMj).HasColumnName("Lines_MJ");

                entity.Property(e => e.MjDifference).HasColumnName("MJ_Difference");

                entity.Property(e => e.RatioGj)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Ratio_GJ");

                entity.Property(e => e.RatioMj)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Ratio_MJ");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Utility).HasMaxLength(255);
            });

            modelBuilder.Entity<DeleteVBvChecksSplitRetailerAccountNoMismatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Checks_Split_Retailer_AccountNo_Mismatch");

                entity.Property(e => e.ChildAccountNo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Child AccountNo");

                entity.Property(e => e.ChildRetailer)
                    .HasMaxLength(20)
                    .HasColumnName("Child Retailer");

                entity.Property(e => e.ChildSpid).HasColumnName("Child SPID");

                entity.Property(e => e.ParentAccountNo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Parent AccountNo");

                entity.Property(e => e.ParentRetailer)
                    .HasMaxLength(20)
                    .HasColumnName("Parent Retailer");

                entity.Property(e => e.ParentSiteNo).HasColumnName("Parent SiteNo");

                entity.Property(e => e.SplitChildSite).HasColumnName("Split_Child_Site");

                entity.Property(e => e.SplitParentSite).HasColumnName("Split_Parent_Site");
            });

            modelBuilder.Entity<DeleteVBvChecksSplitSiteStatusMismatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Checks_Split_Site_Status_Mismatch");

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.Status).HasMaxLength(10);
            });

            modelBuilder.Entity<DeleteVBvChecksSplitsAwaitingWork>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Checks_Splits_Awaiting_Work");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ChildSiteAccount)
                    .HasMaxLength(212)
                    .HasColumnName("Child_Site_Account");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.NewInvoice).HasColumnName("New_Invoice");

                entity.Property(e => e.NewInvoiceNo)
                    .HasMaxLength(62)
                    .HasColumnName("New_Invoice_No");

                entity.Property(e => e.ParentSpin).HasColumnName("Parent_SPIN");

                entity.Property(e => e.ReadyForUpload).HasColumnName("Ready_For_Upload");

                entity.Property(e => e.SiteCreateError)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("Site_Create_Error");

                entity.Property(e => e.SiteExistsError)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("Site_Exists_Error");

                entity.Property(e => e.SiteFixError)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Site Fix Error");

                entity.Property(e => e.SiteSplitError)
                    .HasMaxLength(17)
                    .IsUnicode(false)
                    .HasColumnName("Site Split Error");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SplitAccountPostFix).HasColumnName("Split_Account_PostFix");

                entity.Property(e => e.SplitChildSite).HasColumnName("Split_Child_Site");

                entity.Property(e => e.SplitClientCode)
                    .HasMaxLength(255)
                    .HasColumnName("Split_Client_Code");

                entity.Property(e => e.SplitId).HasColumnName("Split_ID");

                entity.Property(e => e.SplitParentSite).HasColumnName("Split_Parent_Site");

                entity.Property(e => e.SplitSubTotal).HasColumnName("Split_Sub_Total");

                entity.Property(e => e.SplitTotal).HasColumnName("Split_Total");
            });

            modelBuilder.Entity<DeleteVBvChecksSplitsUndeletedCheck>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Checks_Splits_Undeleted_Check");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ChildSiteAccount)
                    .HasMaxLength(212)
                    .HasColumnName("Child_Site_Account");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.NewInvoice).HasColumnName("New_Invoice");

                entity.Property(e => e.NewInvoiceNo)
                    .HasMaxLength(62)
                    .HasColumnName("New_Invoice_No");

                entity.Property(e => e.ParentSpin).HasColumnName("Parent_SPIN");

                entity.Property(e => e.ReadyForUpload).HasColumnName("Ready_For_Upload");

                entity.Property(e => e.SiteCreateError)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("Site_Create_Error");

                entity.Property(e => e.SiteExistsError)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("Site_Exists_Error");

                entity.Property(e => e.SiteFixError)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Site Fix Error");

                entity.Property(e => e.SiteSplitError)
                    .HasMaxLength(17)
                    .IsUnicode(false)
                    .HasColumnName("Site Split Error");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SplitAccountPostFix).HasColumnName("Split_Account_PostFix");

                entity.Property(e => e.SplitChildSite).HasColumnName("Split_Child_Site");

                entity.Property(e => e.SplitClientCode)
                    .HasMaxLength(255)
                    .HasColumnName("Split_Client_Code");

                entity.Property(e => e.SplitId).HasColumnName("Split_ID");

                entity.Property(e => e.SplitParentSite).HasColumnName("Split_Parent_Site");

                entity.Property(e => e.SplitSubTotal).HasColumnName("Split_Sub_Total");

                entity.Property(e => e.SplitTotal).HasColumnName("Split_Total");
            });

            modelBuilder.Entity<DeleteVBvChecksTouInvoiceMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_v_BV_Checks_TOU_Invoice_Month");

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<DeleteVReportsAnnualConsumptionDollar>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_V_Reports_Annual_Consumption_Dollars");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.BatchDate).HasColumnType("date");

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.BatchMonthYear).HasMaxLength(8);

                entity.Property(e => e.CalcTotalUnits).HasColumnName("Calc_Total_Units");

                entity.Property(e => e.ClientCode).HasMaxLength(10);

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.EnergyType).HasMaxLength(50);

                entity.Property(e => e.EnergyTypeCode).HasMaxLength(255);

                entity.Property(e => e.Entity).HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvAmtToPayExGst).HasColumnName("InvAmtToPay_ExGST");

                entity.Property(e => e.InvAmtToPayExGstZeroCredits).HasColumnName("InvAmtToPay_ExGST_ZeroCredits");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.OrgId).HasColumnName("Org_ID");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.ReadyForUpload).HasColumnName("Ready_For_Upload");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteComments).IsUnicode(false);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(50);

                entity.Property(e => e.SiteTypeCode)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<DeleteVReportsAnnualConsumptionDollarsInclReversal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_V_Reports_Annual_Consumption_Dollars_InclReversals");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.BatchDate).HasColumnType("date");

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.BatchMonthYear).HasMaxLength(8);

                entity.Property(e => e.CalcTotalUnits).HasColumnName("Calc_Total_Units");

                entity.Property(e => e.ClientCode).HasMaxLength(10);

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.EnergyType).HasMaxLength(50);

                entity.Property(e => e.EnergyTypeCode).HasMaxLength(255);

                entity.Property(e => e.Entity).HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvAmtToPayExGst).HasColumnName("InvAmtToPay_ExGST");

                entity.Property(e => e.InvAmtToPayExGstZeroCredits).HasColumnName("InvAmtToPay_ExGST_ZeroCredits");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.OrgId).HasColumnName("Org_ID");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteComments).IsUnicode(false);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(50);

                entity.Property(e => e.SiteTypeCode)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<DeleteVReportsAnnualCostInclReversal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("_Delete_V_Reports_Annual_Cost_inclReversals");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.BatchDate).HasColumnType("date");

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.BatchMonthYear).HasMaxLength(8);

                entity.Property(e => e.CalcTotalUnits).HasColumnName("Calc_Total_Units");

                entity.Property(e => e.ClientCode).HasMaxLength(10);

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.EnergyType).HasMaxLength(50);

                entity.Property(e => e.EnergyTypeCode).HasMaxLength(255);

                entity.Property(e => e.Entity).HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvAmtToPayExGst).HasColumnName("InvAmtToPay_ExGST");

                entity.Property(e => e.InvAmtToPayExGstZeroCredits).HasColumnName("InvAmtToPay_ExGST_ZeroCredits");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.OrgId).HasColumnName("Org_ID");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.ReadyForUpload).HasColumnName("Ready_For_Upload");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteComments).IsUnicode(false);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(50);

                entity.Property(e => e.SiteTypeCode)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<TActivityManagement>(entity =>
            {
                entity.HasKey(e => e.AmId)
                    .HasName("tActivity_Management$PrimaryKey1");

                entity.ToTable("tActivity_Management");

                entity.Property(e => e.AmId).HasColumnName("AM_ID");

                entity.Property(e => e.AmAchieved)
                    .HasColumnName("AM_Achieved")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AmAction)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("AM_Action");

                entity.Property(e => e.AmBatchId).HasColumnName("AM_Batch_ID");

                entity.Property(e => e.AmCat).HasColumnName("AM_Cat");

                entity.Property(e => e.AmClass).HasColumnName("AM_Class");

                entity.Property(e => e.AmClientCode)
                    .HasMaxLength(255)
                    .HasColumnName("AM_ClientCode");

                entity.Property(e => e.AmClientContact)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("AM_ClientContact");

                entity.Property(e => e.AmComments).HasColumnName("AM_Comments");

                entity.Property(e => e.AmDateClosed)
                    .HasColumnType("date")
                    .HasColumnName("AM_DateClosed");

                entity.Property(e => e.AmDateEntered)
                    .HasColumnType("date")
                    .HasColumnName("AM_DateEntered")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AmDateReminder)
                    .HasColumnType("date")
                    .HasColumnName("AM_DateReminder");

                entity.Property(e => e.AmDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("AM_Description");

                entity.Property(e => e.AmEnteredBy)
                    .HasMaxLength(255)
                    .HasColumnName("AM_EnteredBy");

                entity.Property(e => e.AmFormulatedDescription)
                    .IsUnicode(false)
                    .HasColumnName("AM_Formulated_Description");

                entity.Property(e => e.AmFuntionTypeId).HasColumnName("AM_Funtion_Type_ID");

                entity.Property(e => e.AmInvId).HasColumnName("AM_Inv_ID");

                entity.Property(e => e.AmManagedBy).HasColumnName("AM_ManagedBy");

                entity.Property(e => e.AmOrgQuId).HasColumnName("AM_Org_QU_ID");

                entity.Property(e => e.AmOutcomeType).HasColumnName("AM_Outcome_Type");

                entity.Property(e => e.AmOverview).HasColumnName("AM_Overview");

                entity.Property(e => e.AmPendingSavings).HasColumnName("AM_Pending_Savings");

                entity.Property(e => e.AmReportToClient).HasColumnName("AM_Report_To_Client");

                entity.Property(e => e.AmRetailCode)
                    .HasMaxLength(255)
                    .HasColumnName("AM_RetailCode");

                entity.Property(e => e.AmSavingsDollars)
                    .HasColumnType("money")
                    .HasColumnName("AM_Savings_Dollars");

                entity.Property(e => e.AmSavingsKwh).HasColumnName("AM_Savings_KWH");

                entity.Property(e => e.AmSiteId).HasColumnName("AM_Site_ID");

                entity.Property(e => e.AmStatus).HasColumnName("AM_Status");

                entity.Property(e => e.AmSubCat).HasColumnName("AM_SubCat");

                entity.Property(e => e.AmSysTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("AM_Sys_Timestamp");

                entity.Property(e => e.AmType).HasColumnName("AM_Type");
            });

            modelBuilder.Entity<TActivityManagementAction>(entity =>
            {
                entity.HasKey(e => e.AmActionId)
                    .HasName("PK_tActivity_Management_Actions_New");

                entity.ToTable("tActivity_Management_Actions");

                entity.Property(e => e.AmActionId).HasColumnName("AM_ActionID");

                entity.Property(e => e.AmActionDate)
                    .HasColumnType("date")
                    .HasColumnName("AM_Action_Date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AmActionTypeId).HasColumnName("AM_Action_Type_ID");

                entity.Property(e => e.AmActionedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("AM_Actioned_By");

                entity.Property(e => e.AmComment)
                    .IsRequired()
                    .HasColumnName("AM_Comment");

                entity.Property(e => e.AmFuntionTypeId).HasColumnName("AM_Funtion_Type_ID");

                entity.Property(e => e.AmId).HasColumnName("AM_ID");

                entity.HasOne(d => d.Am)
                    .WithMany(p => p.TActivityManagementActions)
                    .HasForeignKey(d => d.AmId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tActivity_Management_Actions_New_tActivity_Management");
            });

            modelBuilder.Entity<TActivityManagementLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tActivity_Management_Log");

                entity.Property(e => e.AmAchieved).HasColumnName("AM_Achieved");

                entity.Property(e => e.AmAction)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("AM_Action");

                entity.Property(e => e.AmBatchId).HasColumnName("AM_Batch_ID");

                entity.Property(e => e.AmCat).HasColumnName("AM_Cat");

                entity.Property(e => e.AmClass).HasColumnName("AM_Class");

                entity.Property(e => e.AmClientCode)
                    .HasMaxLength(255)
                    .HasColumnName("AM_ClientCode");

                entity.Property(e => e.AmClientContact)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("AM_ClientContact");

                entity.Property(e => e.AmComments).HasColumnName("AM_Comments");

                entity.Property(e => e.AmDateClosed)
                    .HasColumnType("date")
                    .HasColumnName("AM_DateClosed");

                entity.Property(e => e.AmDateEntered)
                    .HasColumnType("date")
                    .HasColumnName("AM_DateEntered");

                entity.Property(e => e.AmDateReminder)
                    .HasColumnType("date")
                    .HasColumnName("AM_DateReminder");

                entity.Property(e => e.AmDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("AM_Description");

                entity.Property(e => e.AmEnteredBy)
                    .HasMaxLength(255)
                    .HasColumnName("AM_EnteredBy");

                entity.Property(e => e.AmFuntionTypeId).HasColumnName("AM_Funtion_Type_ID");

                entity.Property(e => e.AmId).HasColumnName("AM_ID");

                entity.Property(e => e.AmInvId).HasColumnName("AM_Inv_ID");

                entity.Property(e => e.AmLogDate)
                    .HasColumnType("datetime")
                    .HasColumnName("AM_Log_Date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.AmManagedBy).HasColumnName("AM_ManagedBy");

                entity.Property(e => e.AmOutcomeType).HasColumnName("AM_Outcome_Type");

                entity.Property(e => e.AmOverview).HasColumnName("AM_Overview");

                entity.Property(e => e.AmPendingSavings).HasColumnName("AM_Pending_Savings");

                entity.Property(e => e.AmRetailCode)
                    .HasMaxLength(255)
                    .HasColumnName("AM_RetailCode");

                entity.Property(e => e.AmSavingsDollars)
                    .HasColumnType("money")
                    .HasColumnName("AM_Savings_Dollars");

                entity.Property(e => e.AmSavingsKwh).HasColumnName("AM_Savings_KWH");

                entity.Property(e => e.AmSiteId).HasColumnName("AM_Site_ID");

                entity.Property(e => e.AmStatus).HasColumnName("AM_Status");

                entity.Property(e => e.AmSubCat).HasColumnName("AM_SubCat");

                entity.Property(e => e.AmSysTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("AM_Sys_Timestamp");

                entity.Property(e => e.AmType).HasColumnName("AM_Type");
            });

            modelBuilder.Entity<TActivityManagementObjectLink>(entity =>
            {
                entity.HasKey(e => e.AmLinkedId);

                entity.ToTable("tActivity_Management_Object_Links");

                entity.Property(e => e.AmLinkedId).HasColumnName("AM_Linked_ID");

                entity.Property(e => e.AmId).HasColumnName("AM_ID");

                entity.Property(e => e.AmObjectLinkedDate)
                    .HasColumnType("date")
                    .HasColumnName("AM_Object_Linked_Date");

                entity.Property(e => e.AmObjectLinkedDescription)
                    .IsUnicode(false)
                    .HasColumnName("AM_Object_Linked_Description");

                entity.Property(e => e.AmObjectTypeId).HasColumnName("AM_Object_Type_ID");

                entity.Property(e => e.AmObjectTypeReferenceId).HasColumnName("AM_Object_Type_Reference_ID");
            });

            modelBuilder.Entity<TBatch>(entity =>
            {
                entity.HasKey(e => e.BatchNo)
                    .HasName("tBatches$PrimaryKey");

                entity.ToTable("tBatches");

                entity.Property(e => e.Archived).HasDefaultValueSql("((0))");

                entity.Property(e => e.ArchivedDate)
                    .HasColumnType("date")
                    .HasColumnName("Archived_Date");

                entity.Property(e => e.BatchDate)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.BatchInvoice).HasMaxLength(255);

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.BatchMonthDesc).HasMaxLength(255);

                entity.Property(e => e.BatchMonthDraft).HasMaxLength(255);

                entity.Property(e => e.BatchTotal).HasDefaultValueSql("((0))");

                entity.Property(e => e.ClientCode).HasMaxLength(10);

                entity.Property(e => e.ClientCodeSp)
                    .HasMaxLength(255)
                    .HasColumnName("ClientCodeSP");

                entity.Property(e => e.DataType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Data_Type")
                    .HasDefaultValueSql("('Managed')");

                entity.Property(e => e.IgnoreSiteDiscountPc).HasColumnName("Ignore_Site_DiscountPC");

                entity.Property(e => e.InputTypeCode)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('Manual')");

                entity.Property(e => e.OrgId).HasColumnName("Org_ID");

                entity.Property(e => e.Paid).HasDefaultValueSql("((1))");

                entity.Property(e => e.ReadyForUpload)
                    .HasColumnName("Ready_For_Upload")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SysBatchesTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_Batches_Timestamp");

                entity.Property(e => e.Verified).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.ClientCodeNavigation)
                    .WithMany(p => p.TBatches)
                    .HasForeignKey(d => d.ClientCode)
                    .HasConstraintName("tBatches$tClientstBatches");
            });

            modelBuilder.Entity<TBatchesCustomerInvNo>(entity =>
            {
                entity.ToTable("tBatches_CustomerInvNo");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CustomerInvNo).HasMaxLength(20);
            });

            modelBuilder.Entity<TBvBatchNumber>(entity =>
            {
                entity.HasKey(e => e.BatchNo)
                    .HasName("PK_tBV_Batch_Number_1");

                entity.ToTable("tBV_Batch_Number");

                entity.Property(e => e.BatchNo).ValueGeneratedNever();

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TBvBatchNumberEdi>(entity =>
            {
                entity.HasKey(e => e.BatchNo);

                entity.ToTable("tBV_Batch_Number_EDI");

                entity.Property(e => e.BatchNo).ValueGeneratedNever();

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TBvBatchNumberEdiLookup>(entity =>
            {
                entity.HasKey(e => e.BatchNo);

                entity.ToTable("tBV_Batch_Number_EDI_Lookup");

                entity.Property(e => e.BatchNo).ValueGeneratedNever();

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TBvBatchNumberHedge>(entity =>
            {
                entity.HasKey(e => e.BatchNumber);

                entity.ToTable("tBV_Batch_Number_Hedge");

                entity.Property(e => e.BatchNumber)
                    .ValueGeneratedNever()
                    .HasColumnName("Batch_Number");

                entity.Property(e => e.UserName).HasMaxLength(250);
            });

            modelBuilder.Entity<TBvCheckExpectedRawBase>(entity =>
            {
                entity.HasKey(e => e.ErId);

                entity.ToTable("tBV_Check_ExpectedRaw_Base");

                entity.Property(e => e.ErId).HasColumnName("ER_ID");

                entity.Property(e => e.ErAccountNo)
                    .HasMaxLength(200)
                    .HasColumnName("ER_AccountNo");

                entity.Property(e => e.ErBatchNo).HasColumnName("ER_BatchNo");

                entity.Property(e => e.ErClientRef)
                    .HasMaxLength(200)
                    .HasColumnName("ER_ClientRef");

                entity.Property(e => e.ErComments)
                    .IsUnicode(false)
                    .HasColumnName("ER_Comments");

                entity.Property(e => e.ErConsumptionVariance).HasColumnName("ER_ConsumptionVariance");

                entity.Property(e => e.ErIcp)
                    .HasMaxLength(255)
                    .HasColumnName("ER_ICP");

                entity.Property(e => e.ErInvAmountToPay)
                    .HasColumnType("money")
                    .HasColumnName("ER_InvAmountToPay");

                entity.Property(e => e.ErInvNoOfDays).HasColumnName("ER_InvNoOfDays");

                entity.Property(e => e.ErInvNotes)
                    .HasMaxLength(255)
                    .HasColumnName("ER_InvNotes");

                entity.Property(e => e.ErInvStartDate)
                    .HasColumnType("date")
                    .HasColumnName("ER_InvStartDate");

                entity.Property(e => e.ErReadTypeCode)
                    .HasMaxLength(10)
                    .HasColumnName("ER_ReadTypeCode");

                entity.Property(e => e.ErSiteDescription)
                    .HasMaxLength(255)
                    .HasColumnName("ER_SiteDescription");

                entity.Property(e => e.ErSiteNo).HasColumnName("ER_SiteNo");

                entity.Property(e => e.ErSiteNoInvoices).HasColumnName("ER_SiteNo_Invoices");

                entity.Property(e => e.ErSpinvNumber).HasColumnName("ER_SPInvNumber");

                entity.Property(e => e.ErUnitTotal).HasColumnName("ER_Unit_Total");
            });

            modelBuilder.Entity<TBvCheckInvoiceHistoryHighlight>(entity =>
            {
                entity.ToTable("tBV_Check_Invoice_History_Highlight");

                entity.Property(e => e.Id).HasColumnName("ID");
            });

            modelBuilder.Entity<TBvCheckLineTotalsFromTariff>(entity =>
            {
                entity.HasKey(e => e.LtId);

                entity.ToTable("tBV_Check_Line_Totals_From_Tariffs");

                entity.Property(e => e.LtId).HasColumnName("LT_ID");

                entity.Property(e => e.LtBatchNo).HasColumnName("LT_BatchNo");

                entity.Property(e => e.LtCalcResults).HasColumnName("LT_Calc_Results");

                entity.Property(e => e.LtCalculated).HasColumnName("LT_Calculated");

                entity.Property(e => e.LtDifference).HasColumnName("LT_Difference");

                entity.Property(e => e.LtInvLineNo).HasColumnName("LT_InvLineNo");

                entity.Property(e => e.LtInvLineTotal).HasColumnName("LT_InvLineTotal");

                entity.Property(e => e.LtLineValue).HasColumnName("LT_Line_Value");

                entity.Property(e => e.LtRateId).HasColumnName("LT_RateID");

                entity.Property(e => e.LtSiteNo).HasColumnName("LT_SiteNo");

                entity.Property(e => e.LtSpinvNumber).HasColumnName("LT_SPInvNumber");

                entity.Property(e => e.LtTariffDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LT_TariffDescription");

                entity.Property(e => e.LtTariffId).HasColumnName("LT_TariffID");

                entity.Property(e => e.LtTariffValue).HasColumnName("LT_Tariff_Value");

                entity.Property(e => e.SysLineTotalsTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_Line_Totals_Timestamp");
            });

            modelBuilder.Entity<TBvCheckSite>(entity =>
            {
                entity.HasKey(e => e.SiteNo);

                entity.ToTable("tBV_Check_Sites");

                entity.Property(e => e.Id).HasColumnName("ID");
            });

            modelBuilder.Entity<TBvCheckSumInvTotalsValidation>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tBV_Check_SumInvTotalsValidation");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test10CurrentChargesInclGst).HasColumnName("Test 10 - CurrentChargesInclGST");

                entity.Property(e => e.Test11AmtToPayExGst).HasColumnName("Test 11- AmtToPayExGST");

                entity.Property(e => e.Test12AmountToPayGst).HasColumnName("Test 12 - AmountToPayGST");

                entity.Property(e => e.Test13AmtToPayInclGst).HasColumnName("Test 13 - AmtToPayInclGST");

                entity.Property(e => e.Test1ObExgst).HasColumnName("Test 1 - OB EXGST");

                entity.Property(e => e.Test2Obgst).HasColumnName("Test 2 - OBGST");

                entity.Property(e => e.Test3LineTotalExGst).HasColumnName("Test3 - Line Total ExGST");

                entity.Property(e => e.Test4LineTotalGst).HasColumnName("Test 4 - LineTotalGST");

                entity.Property(e => e.Test5SubTotal).HasColumnName("Test 5 - Sub Total");

                entity.Property(e => e.Test6).HasColumnName("Test 6");

                entity.Property(e => e.Test7).HasColumnName("Test 7");

                entity.Property(e => e.Test8CurrentChargesExGst).HasColumnName("Test 8 - CurrentChargesExGST");

                entity.Property(e => e.Test9CurrentChargesGst).HasColumnName("Test 9 - CurrentChargesGST");
            });

            modelBuilder.Entity<TBvChecksDateGap>(entity =>
            {
                entity.HasKey(e => e.DgId)
                    .HasName("PK_tBV_Check_Date_Gaps");

                entity.ToTable("tBV_Checks_Date_Gaps");

                entity.Property(e => e.DgId).HasColumnName("DG_ID");

                entity.Property(e => e.DgBatchNo).HasColumnName("DG_BatchNo");

                entity.Property(e => e.DgDateGap).HasColumnName("DG_Date_Gap");

                entity.Property(e => e.DgInvEndDate)
                    .HasColumnType("date")
                    .HasColumnName("DG_InvEndDate");

                entity.Property(e => e.DgInvStartDate)
                    .HasColumnType("date")
                    .HasColumnName("DG_InvStartDate");

                entity.Property(e => e.DgLastEnd)
                    .HasColumnType("date")
                    .HasColumnName("DG_LastEnd");

                entity.Property(e => e.DgLastInvoice).HasColumnName("DG_LastInvoice");

                entity.Property(e => e.DgLastSiteNo).HasColumnName("DG_LastSiteNo");

                entity.Property(e => e.DgNextBachNo).HasColumnName("DG_NextBachNo");

                entity.Property(e => e.DgNextEnd)
                    .HasColumnType("date")
                    .HasColumnName("DG_NextEnd");

                entity.Property(e => e.DgNextInvoice).HasColumnName("DG_NextInvoice");

                entity.Property(e => e.DgNextStart)
                    .HasColumnType("date")
                    .HasColumnName("DG_NextStart");

                entity.Property(e => e.DgSiteNo).HasColumnName("DG_SiteNo");

                entity.Property(e => e.DgSiteType)
                    .HasMaxLength(10)
                    .HasColumnName("DG_SiteType");

                entity.Property(e => e.DgSpinvNumber).HasColumnName("DG_SPInvNumber");

                entity.Property(e => e.SysDateGapsTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_Date_Gaps_Timestamp");
            });

            modelBuilder.Entity<TBvChecksDuplicateIcp>(entity =>
            {
                entity.HasKey(e => e.DupId);

                entity.ToTable("tBV_Checks_Duplicate_ICP");

                entity.Property(e => e.DupId).HasColumnName("Dup_ID");

                entity.Property(e => e.AccountNo).HasMaxLength(100);

                entity.Property(e => e.Icp)
                    .HasMaxLength(100)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(100);

                entity.Property(e => e.SiteStatus).HasMaxLength(100);

                entity.Property(e => e.SiteType).HasMaxLength(100);
            });

            modelBuilder.Entity<TBvChecksEstimate>(entity =>
            {
                entity.HasKey(e => e.EsId)
                    .HasName("PK_tBV_Checks_Estimate");

                entity.ToTable("tBV_Checks_Estimates");

                entity.Property(e => e.EsId).HasColumnName("ES_ID");

                entity.Property(e => e.EsEstimateCount).HasColumnName("ES_Estimate_Count");

                entity.Property(e => e.EsHadActaulRead).HasColumnName("ES_HadActaulRead");

                entity.Property(e => e.EsLastactualReadDate)
                    .HasColumnType("date")
                    .HasColumnName("ES_LastactualReadDate");

                entity.Property(e => e.EsSiteId).HasColumnName("ES_SiteID");

                entity.Property(e => e.SysEstimatesTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_Estimates_Timestamp");
            });

            modelBuilder.Entity<TBvChecksExpectedRaw>(entity =>
            {
                entity.HasKey(e => e.TSitesSiteNo);

                entity.ToTable("tBV_Checks_Expected_Raw");

                entity.Property(e => e.TSitesSiteNo)
                    .ValueGeneratedNever()
                    .HasColumnName("tSites_SiteNo");

                entity.Property(e => e.AccountNo).HasMaxLength(250);

                entity.Property(e => e.ClientRef).HasMaxLength(250);

                entity.Property(e => e.Comments).HasMaxLength(250);

                entity.Property(e => e.HistInvEnd).HasColumnType("date");

                entity.Property(e => e.HistInvStart).HasColumnType("date");

                entity.Property(e => e.HistInvToPay).HasColumnType("money");

                entity.Property(e => e.Icp)
                    .HasMaxLength(250)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvNotes).HasMaxLength(250);

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.SiteDescription).HasMaxLength(250);

                entity.Property(e => e.Spinv).HasColumnName("SPINV");

                entity.Property(e => e.TInvoicesSiteNo).HasColumnName("tInvoices_SiteNo");
            });

            modelBuilder.Entity<TBvChecksLastInvoiceEstimate>(entity =>
            {
                entity.HasKey(e => e.LiId);

                entity.ToTable("tBV_Checks_Last_Invoice_Estimate");

                entity.Property(e => e.LiId).HasColumnName("LI_ID");

                entity.Property(e => e.LiEstimate).HasColumnName("LI_Estimate");

                entity.Property(e => e.LiInvEndDate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LI_InvEndDate");

                entity.Property(e => e.LiReadTypeCode)
                    .HasMaxLength(10)
                    .HasColumnName("LI_ReadTypeCode")
                    .IsFixedLength(true);

                entity.Property(e => e.LiSiteNo).HasColumnName("LI_SiteNo");

                entity.Property(e => e.LiSpInvoiceNo).HasColumnName("LI_SP_InvoiceNo");

                entity.Property(e => e.SysLastInvoiceTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_Last_Invoice_Timestamp");
            });

            modelBuilder.Entity<TBvChecksReadingGap>(entity =>
            {
                entity.HasKey(e => e.RgId)
                    .HasName("PK_tBV_Check_Reading_Gaps");

                entity.ToTable("tBV_Checks_Reading_Gaps");

                entity.Property(e => e.RgId).HasColumnName("RG_ID");

                entity.Property(e => e.RgBatchNo).HasColumnName("RG_BatchNo");

                entity.Property(e => e.RgInvReadEnd).HasColumnName("RG_InvReadEnd");

                entity.Property(e => e.RgInvReadLastEnd).HasColumnName("RG_InvReadLastEnd");

                entity.Property(e => e.RgInvReadNextStart).HasColumnName("RG_InvReadNextStart");

                entity.Property(e => e.RgInvReadStart).HasColumnName("RG_InvReadStart");

                entity.Property(e => e.RgLastInvoice).HasColumnName("RG_LastInvoice");

                entity.Property(e => e.RgLastSiteNo).HasColumnName("RG_LastSiteNo");

                entity.Property(e => e.RgNextInvoice).HasColumnName("RG_NextInvoice");

                entity.Property(e => e.RgPrevInvoice).HasColumnName("RG_PrevInvoice");

                entity.Property(e => e.RgReadGap).HasColumnName("RG_Read_Gap");

                entity.Property(e => e.RgSiteNo).HasColumnName("RG_SiteNo");

                entity.Property(e => e.RgSpinvNumber).HasColumnName("RG_SPInvNumber");

                entity.Property(e => e.SysReadingGapsTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_Reading_Gaps_Timestamp");
            });

            modelBuilder.Entity<TBvExpectedRawInvoice>(entity =>
            {
                entity.HasKey(e => e.SpinvNumber);

                entity.ToTable("tBV_Expected_Raw_Invoices");

                entity.Property(e => e.SpinvNumber)
                    .ValueGeneratedNever()
                    .HasColumnName("SPInvNumber");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNotes)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.ReadTypeCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TBvSpinHedge>(entity =>
            {
                entity.HasKey(e => e.Spin);

                entity.ToTable("tBV_SPIN_Hedge");

                entity.Property(e => e.Spin)
                    .ValueGeneratedNever()
                    .HasColumnName("SPIN");
            });

            modelBuilder.Entity<TBvcEstimatesCheck>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tBVC_Estimates_Check");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.CountOfActuals).HasColumnName("Count_Of_Actuals");

                entity.Property(e => e.ErrorDescription)
                    .HasMaxLength(255)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.EstimateCount).HasColumnName("Estimate_Count");

                entity.Property(e => e.HasAnActual).HasColumnName("Has_An_Actual");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvoiceCount).HasColumnName("Invoice_Count");

                entity.Property(e => e.LastActualRead)
                    .HasColumnType("date")
                    .HasColumnName("Last_Actual_Read");

                entity.Property(e => e.LatestSpin).HasColumnName("LatestSPIN");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.Retailer).HasMaxLength(20);

                entity.Property(e => e.SiteComments).IsUnicode(false);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);
            });

            modelBuilder.Entity<TBvcNoOfInvoicesNetAmt>(entity =>
            {
                entity.HasKey(e => e.InvId);

                entity.ToTable("tBVC_NoOfInvoices_Net_Amt");

                entity.Property(e => e.InvId).HasColumnName("Inv_ID");

                entity.Property(e => e.EarliestDueDate)
                    .HasColumnType("date")
                    .HasColumnName("Earliest_Due_Date");

                entity.Property(e => e.Kwh).HasColumnName("KWH");

                entity.Property(e => e.Ppdvalue)
                    .HasColumnType("money")
                    .HasColumnName("PPDValue");

                entity.Property(e => e.RetailerCode).HasMaxLength(250);

                entity.Property(e => e.RetailerName).HasMaxLength(250);

                entity.Property(e => e.SumInvAmountToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("Sum_InvAmountToPay_ExGST");

                entity.Property(e => e.SumInvAmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("Sum_InvAmountToPay_GST");

                entity.Property(e => e.SumInvLinesTotalGstFree)
                    .HasColumnType("money")
                    .HasColumnName("Sum_InvLinesTotal_GST_Free");

                entity.Property(e => e.SumOfInvAmountToPay).HasColumnType("money");
            });

            modelBuilder.Entity<TBvcNoOfInvoicesNetAmtDueDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tBVC_NoOfInvoices_Net_Amt_DueDate");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvNumber).HasMaxLength(50);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.RetailerName).HasMaxLength(50);

                entity.Property(e => e.SumInvAmountToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("Sum_InvAmountToPay_ExGST");

                entity.Property(e => e.SumInvAmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("Sum_InvAmountToPay_GST");

                entity.Property(e => e.SumInvLinesTotalGstFree)
                    .HasColumnType("money")
                    .HasColumnName("Sum_InvLinesTotal_GST_Free");

                entity.Property(e => e.SumOfInvAmtToPay).HasColumnType("money");

                entity.Property(e => e.SumOfKwh).HasColumnName("SumOfKWH");

                entity.Property(e => e.SumOfPpdValue)
                    .HasColumnType("money")
                    .HasColumnName("SumOfPPD_Value");
            });

            modelBuilder.Entity<TCarbonFactorArea>(entity =>
            {
                entity.HasKey(e => e.AreaId);

                entity.ToTable("tCarbonFactorArea");

                entity.Property(e => e.Area)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TClient>(entity =>
            {
                entity.HasKey(e => e.ClientCode)
                    .HasName("tClients$PrimaryKey");

                entity.ToTable("tClients");

                entity.Property(e => e.ClientCode).HasMaxLength(10);

                entity.Property(e => e.ClientName).HasMaxLength(50);

                entity.Property(e => e.ClientVariance).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TCo2Emission>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tCO2_Emissions");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.SysEmissionsTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_Emissions_Timestamp");
            });

            modelBuilder.Entity<TContact>(entity =>
            {
                entity.HasKey(e => e.ContactId);

                entity.ToTable("tContacts");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ContactAddComments).HasColumnName("Contact_Add_Comments");

                entity.Property(e => e.ContactAddPhysical)
                    .HasMaxLength(255)
                    .HasColumnName("Contact_Add_Physical");

                entity.Property(e => e.ContactAddPostal)
                    .HasMaxLength(255)
                    .HasColumnName("Contact_Add_Postal");

                entity.Property(e => e.ContactCompanyName)
                    .HasMaxLength(255)
                    .HasColumnName("Contact_Company_Name");

                entity.Property(e => e.ContactEmail)
                    .HasMaxLength(255)
                    .HasColumnName("Contact_Email");

                entity.Property(e => e.ContactNameFirst)
                    .HasMaxLength(255)
                    .HasColumnName("Contact_Name_First");

                entity.Property(e => e.ContactNameLast)
                    .HasMaxLength(255)
                    .HasColumnName("Contact_Name_Last");

                entity.Property(e => e.ContactPhone1)
                    .HasMaxLength(255)
                    .HasColumnName("Contact_Phone_1");

                entity.Property(e => e.ContactPhone2)
                    .HasMaxLength(255)
                    .HasColumnName("Contact_Phone_2");

                entity.Property(e => e.ContactRole)
                    .HasMaxLength(255)
                    .HasColumnName("Contact_Role");

                entity.Property(e => e.Salutation)
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.SysSitesContactTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_Sites_Contact_Timestamp");
            });

            modelBuilder.Entity<TContactsSite>(entity =>
            {
                entity.HasKey(e => e.ContactSiteId);

                entity.ToTable("tContacts_Sites");

                entity.Property(e => e.ContactSiteId).HasColumnName("ContactSiteID");

                entity.Property(e => e.ContactId).HasColumnName("ContactID");

                entity.Property(e => e.Status)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(N'Current')");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.TContactsSites)
                    .HasForeignKey(d => d.ContactId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_tContacts_Sites_tContacts");

                entity.HasOne(d => d.SiteNoNavigation)
                    .WithMany(p => p.TContactsSites)
                    .HasForeignKey(d => d.SiteNo)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_tContacts_Sites_tSites");
            });

            modelBuilder.Entity<TContactsSitesPrimaryContact>(entity =>
            {
                entity.HasKey(e => e.ContactSiteId);

                entity.ToTable("tContacts_Sites_Primary_Contacts");

                entity.Property(e => e.ContactSiteId)
                    .ValueGeneratedNever()
                    .HasColumnName("ContactSiteID");

                entity.HasOne(d => d.ContactSite)
                    .WithOne(p => p.TContactsSitesPrimaryContact)
                    .HasForeignKey<TContactsSitesPrimaryContact>(d => d.ContactSiteId)
                    .HasConstraintName("FK_tContacts_Sites_Primary_Contacts_tContacts_Sites");
            });

            modelBuilder.Entity<TCostCentre>(entity =>
            {
                entity.HasKey(e => new { e.ClientCode, e.CostCentre })
                    .HasName("tCostCentres$PrimaryKey");

                entity.ToTable("tCostCentres");

                entity.Property(e => e.ClientCode).HasMaxLength(10);

                entity.Property(e => e.CostCentre).HasMaxLength(12);

                entity.Property(e => e.Ccdescription)
                    .HasMaxLength(50)
                    .HasColumnName("CCDescription");

                entity.Property(e => e.ClientCodeSp)
                    .HasMaxLength(255)
                    .HasColumnName("ClientCodeSP");

                entity.Property(e => e.SysTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_Timestamp");

                entity.HasOne(d => d.ClientCodeNavigation)
                    .WithMany(p => p.TCostCentres)
                    .HasForeignKey(d => d.ClientCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tCostCentres$tClientstCostCentres");
            });

            modelBuilder.Entity<TDataManagementBatchNo>(entity =>
            {
                entity.HasKey(e => e.BatchNumber);

                entity.ToTable("tData_Management_BatchNo");

                entity.Property(e => e.BatchNumber)
                    .ValueGeneratedNever()
                    .HasColumnName("Batch_Number");
            });

            modelBuilder.Entity<TDataManagementBatchNumber>(entity =>
            {
                entity.HasKey(e => e.BatchNumber);

                entity.ToTable("tData_Management_Batch_Number");

                entity.Property(e => e.BatchNumber)
                    .ValueGeneratedNever()
                    .HasColumnName("Batch_Number");

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDmUnitType>(entity =>
            {
                entity.HasKey(e => e.DmutId);

                entity.ToTable("tDM_UnitType");

                entity.Property(e => e.DmutId).HasColumnName("DMUT_ID");

                entity.Property(e => e.CurrentUnitType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Current_UnitType");

                entity.Property(e => e.NewUnitType)
                    .HasMaxLength(50)
                    .HasColumnName("New_UnitType");

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDmUnitTypeOptionSelected>(entity =>
            {
                entity.HasKey(e => e.DmUtId);

                entity.ToTable("tDM_Unit_Type_Option_Selected");

                entity.Property(e => e.DmUtId).HasColumnName("DM_UT_ID");

                entity.Property(e => e.DmUtOptionSelected).HasColumnName("DM_UT_Option_Selected");

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TDuplicateInvoice>(entity =>
            {
                entity.HasKey(e => e.DupId);

                entity.ToTable("tDuplicateInvoices");

                entity.Property(e => e.DupId).HasColumnName("Dup_ID");

                entity.Property(e => e.AccountNo).HasMaxLength(100);

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvGst).HasColumnName("InvGST");

                entity.Property(e => e.InvNotes).HasMaxLength(250);

                entity.Property(e => e.InvNumber).HasMaxLength(100);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(100);

                entity.Property(e => e.RetailerCode).HasMaxLength(100);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<TEdiLookupBatchNumber>(entity =>
            {
                entity.HasKey(e => e.EdiLBatchNo);

                entity.ToTable("tEDI_Lookup_Batch_Number");

                entity.Property(e => e.EdiLBatchNo)
                    .ValueGeneratedNever()
                    .HasColumnName("EDI_L_BatchNo");

                entity.Property(e => e.EdiLUserName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EDI_L_UserName");
            });

            modelBuilder.Entity<TEdiLookupIcp1>(entity =>
            {
                entity.HasKey(e => e.EdiIcpId);

                entity.ToTable("tEDI_Lookup_ICP_1");

                entity.Property(e => e.EdiIcpId).HasColumnName("EDI_ICP_ID");

                entity.Property(e => e.EdiAccountNo)
                    .HasMaxLength(200)
                    .HasColumnName("EDI_AccountNo");

                entity.Property(e => e.EdiBatchNo).HasColumnName("EDI_BatchNo");

                entity.Property(e => e.EdiCountSiteNoIcp).HasColumnName("EDI_Count_SiteNo_ICP");

                entity.Property(e => e.EdiIcp)
                    .HasMaxLength(255)
                    .HasColumnName("EDI_ICP");

                entity.Property(e => e.EdiUserName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EDI_UserName");
            });

            modelBuilder.Entity<TEdiLookupIcpStep1>(entity =>
            {
                entity.HasKey(e => e.EdiLIcpId);

                entity.ToTable("tEDI_Lookup_ICP_Step_1");

                entity.Property(e => e.EdiLIcpId).HasColumnName("EDI_L_ICP_ID");

                entity.Property(e => e.EdiLAccountNo)
                    .HasMaxLength(200)
                    .HasColumnName("EDI_L_AccountNo");

                entity.Property(e => e.EdiLBatchNo).HasColumnName("EDI_L_BatchNo");

                entity.Property(e => e.EdiLCountSiteNoIcp).HasColumnName("EDI_L_Count_SiteNo_ICP");

                entity.Property(e => e.EdiLIcp)
                    .HasMaxLength(255)
                    .HasColumnName("EDI_L_ICP");

                entity.Property(e => e.EdiLRetailerCode)
                    .HasMaxLength(200)
                    .HasColumnName("EDI_L_Retailer_Code");

                entity.Property(e => e.EdiLUserName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EDI_L_UserName");
            });

            modelBuilder.Entity<TEdiLookupSiteType>(entity =>
            {
                entity.HasKey(e => e.EdiLSiteTypeId);

                entity.ToTable("tEDI_Lookup_SiteTypes");

                entity.Property(e => e.EdiLSiteTypeId).HasColumnName("EDI_L_Site_Type_ID");

                entity.Property(e => e.EdiLProductId)
                    .HasMaxLength(10)
                    .HasColumnName("EDI_L_ProductID");

                entity.Property(e => e.EdiLProductSubCatCode)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_L_Product_Sub_Cat_Code");

                entity.Property(e => e.EdiLUserName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EDI_L_UserName");
            });

            modelBuilder.Entity<TEdiRateCat>(entity =>
            {
                entity.HasKey(e => e.CatId);

                entity.ToTable("tEDI_Rate_Cat");

                entity.Property(e => e.CatId).HasColumnName("Cat_ID");

                entity.Property(e => e.CatCategory)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Cat_Category");

                entity.Property(e => e.CatLineDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Cat_Line_Description");

                entity.Property(e => e.CatRateClass).HasColumnName("Cat_Rate_Class");
            });

            modelBuilder.Entity<TEnvAccrualsSummaryMtreport>(entity =>
            {
                entity.HasKey(e => e.EsId)
                    .HasName("tEnv_Accruals_Summary_MTReport$PrimaryKey");

                entity.ToTable("tEnv_Accruals_Summary_MTReport");

                entity.Property(e => e.EsId).HasColumnName("ES_ID");

                entity.Property(e => e.EsAccrualConsumption).HasColumnName("ES_Accrual_Consumption");

                entity.Property(e => e.EsAccrualDollars).HasColumnName("ES_Accrual_Dollars");

                entity.Property(e => e.EsActualConsumption).HasColumnName("ES_Actual_Consumption");

                entity.Property(e => e.EsActualDollars).HasColumnName("ES_Actual_Dollars");

                entity.Property(e => e.EsConsumptionDailyAvg).HasColumnName("ES_Consumption_Daily_Avg");

                entity.Property(e => e.EsDaysInMonth).HasColumnName("ES_Days_In_Month");

                entity.Property(e => e.EsDollarsDailyAvg).HasColumnName("ES_Dollars_Daily_Avg");

                entity.Property(e => e.EsNoOfAccrualDays).HasColumnName("ES_No_Of_Accrual_Days");

                entity.Property(e => e.EsNoOfInvDays).HasColumnName("ES_No_Of_Inv_Days");

                entity.Property(e => e.EsSiteId).HasColumnName("ES_SiteID");

                entity.Property(e => e.SysAccrualsSummaryTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_Accruals_Summary_Timestamp");
            });

            modelBuilder.Entity<TEnvBySiteValue>(entity =>
            {
                entity.HasKey(e => e.ErSiteLimitId)
                    .HasName("PK_tENV_By_Site_Value");

                entity.ToTable("tEnv_By_Site_Value");

                entity.Property(e => e.ErSiteLimitId).HasColumnName("ER_Site_Limit_ID");

                entity.Property(e => e.SiteNo).HasColumnName("Site_No");
            });

            modelBuilder.Entity<TEnvCreditsFlag>(entity =>
            {
                entity.HasKey(e => e.ErCreditsFlagId);

                entity.ToTable("tEnv_Credits_Flag");

                entity.Property(e => e.ErCreditsFlagId).HasColumnName("ER_Credits_Flag_ID");

                entity.Property(e => e.ErCreditsToBeZeroed).HasColumnName("ER_Credits_To_Be_Zeroed");
            });

            modelBuilder.Entity<TEnvDailySummaryMtreport>(entity =>
            {
                entity.HasKey(e => e.EsId)
                    .HasName("tEnv_Daily_Summary_MTReport$PrimaryKey");

                entity.ToTable("tEnv_Daily_Summary_MTReport");

                entity.Property(e => e.EsId).HasColumnName("ES_ID");

                entity.Property(e => e.EsConsumptionDailyAvg).HasColumnName("ES_Consumption_Daily_Avg");

                entity.Property(e => e.EsCreditBalance)
                    .HasMaxLength(255)
                    .HasColumnName("ES_Credit_Balance");

                entity.Property(e => e.EsCreditInvoice).HasColumnName("ES_Credit_Invoice");

                entity.Property(e => e.EsDateSiteAdded)
                    .HasColumnType("date")
                    .HasColumnName("ES_Date_Site_Added");

                entity.Property(e => e.EsDateSiteCeased)
                    .HasColumnType("date")
                    .HasColumnName("ES_Date_Site_Ceased");

                entity.Property(e => e.EsDay).HasColumnName("ES_Day");

                entity.Property(e => e.EsDollarsDailyAvg).HasColumnName("ES_Dollars_Daily_Avg");

                entity.Property(e => e.EsEstimateInvCount).HasColumnName("ES_Estimate_Inv_Count");

                entity.Property(e => e.EsInvNum)
                    .HasMaxLength(255)
                    .HasColumnName("ES_InvNum");

                entity.Property(e => e.EsMonth).HasColumnName("ES_Month");

                entity.Property(e => e.EsPeriod)
                    .HasColumnType("date")
                    .HasColumnName("ES_Period");

                entity.Property(e => e.EsReadType)
                    .HasMaxLength(255)
                    .HasColumnName("ES_ReadType");

                entity.Property(e => e.EsSiteId).HasColumnName("ES_SiteID");

                entity.Property(e => e.EsSourceType)
                    .HasMaxLength(255)
                    .HasColumnName("ES_Source_Type");

                entity.Property(e => e.EsSpinvNum).HasColumnName("ES_SPInvNum");

                entity.Property(e => e.EsYear).HasColumnName("ES_Year");

                entity.Property(e => e.SysDailySummaryMtreportTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_Daily_Summary_MTReport_Timestamp");
            });

            modelBuilder.Entity<TEnvDateRangeEstimetMtreport>(entity =>
            {
                entity.HasKey(e => e.ErEstimateDateRangeId);

                entity.ToTable("tEnv_Date_Range_Estimet_MTReport");

                entity.Property(e => e.ErEstimateDateRangeId).HasColumnName("ER_Estimate_Date_Range_ID");

                entity.Property(e => e.ErEndDate)
                    .HasColumnType("date")
                    .HasColumnName("ER_EndDate");

                entity.Property(e => e.ErStartDate)
                    .HasColumnType("date")
                    .HasColumnName("ER_StartDate");
            });

            modelBuilder.Entity<TEnvDateRangeMasterMtreport>(entity =>
            {
                entity.HasKey(e => e.ErDateRangeId);

                entity.ToTable("tEnv_Date_Range_Master_MTReport");

                entity.Property(e => e.ErDateRangeId).HasColumnName("ER_Date_Range_ID");

                entity.Property(e => e.ErEndDate)
                    .HasColumnType("date")
                    .HasColumnName("ER_EndDate");

                entity.Property(e => e.ErStartDate)
                    .HasColumnType("date")
                    .HasColumnName("ER_StartDate");
            });

            modelBuilder.Entity<TEnvDateRangeMasterMtreportHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tEnv_Date_Range_Master_MTReport_History");

                entity.Property(e => e.ErEndDate)
                    .HasColumnType("date")
                    .HasColumnName("ER_EndDate");

                entity.Property(e => e.ErStartDate)
                    .HasColumnType("date")
                    .HasColumnName("ER_StartDate");
            });

            modelBuilder.Entity<TEnvDateRangeMtreport>(entity =>
            {
                entity.HasKey(e => e.ErDateRangeId);

                entity.ToTable("tEnv_Date_Range_MTReport");

                entity.Property(e => e.ErDateRangeId).HasColumnName("ER_Date_Range_ID");

                entity.Property(e => e.ErEndDate)
                    .HasColumnType("date")
                    .HasColumnName("ER_EndDate");

                entity.Property(e => e.ErStartDate)
                    .HasColumnType("date")
                    .HasColumnName("ER_StartDate");
            });

            modelBuilder.Entity<TEnvDateRangeSiteCeased>(entity =>
            {
                entity.HasKey(e => e.ErSiteCeasedRangeId)
                    .HasName("PK_tENV_Site_Ceased_Range");

                entity.ToTable("tEnv_Date_Range_Site_Ceased");

                entity.Property(e => e.ErSiteCeasedRangeId).HasColumnName("ER_Site_Ceased_Range_ID");

                entity.Property(e => e.ErSiteCeasedDateRange)
                    .HasColumnType("date")
                    .HasColumnName("ER_Site_Ceased_Date_Range");
            });

            modelBuilder.Entity<TEnvInvoicesRangeMtreport>(entity =>
            {
                entity.HasKey(e => e.ErInvoiceBaseId);

                entity.ToTable("tEnv_Invoices_Range_MTReport");

                entity.Property(e => e.ErInvoiceBaseId).HasColumnName("ER_Invoice_Base_ID");

                entity.Property(e => e.AmountExclGst).HasColumnName("AmountExclGST");

                entity.Property(e => e.AmountInclGst).HasColumnName("AmountInclGST");

                entity.Property(e => e.CreditBalance).HasMaxLength(255);

                entity.Property(e => e.CreditInv).HasDefaultValueSql("((0))");

                entity.Property(e => e.DailyAvgConsumption).HasColumnName("Daily_Avg_Consumption");

                entity.Property(e => e.DailyAvgDollars).HasColumnName("Daily_Avg_Dollars");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvEndDateRange)
                    .HasColumnType("date")
                    .HasColumnName("InvEndDate_Range");

                entity.Property(e => e.InvNumber).HasMaxLength(50);

                entity.Property(e => e.InvStartDateRange)
                    .HasColumnType("date")
                    .HasColumnName("InvStartDate_Range");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.ReadyForUpload)
                    .HasColumnName("Ready_For_Upload")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SsmaTimeStamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SSMA_TimeStamp");
            });

            modelBuilder.Entity<TEnvRangeCountMtreport>(entity =>
            {
                entity.HasKey(e => e.EsRangeCount)
                    .HasName("tEnv_Range_Count_MTReport$PrimaryKey");

                entity.ToTable("tEnv_Range_Count_MTReport");

                entity.Property(e => e.EsRangeCount)
                    .ValueGeneratedNever()
                    .HasColumnName("ES_Range_Count");
            });

            modelBuilder.Entity<TEnvSummaryMtreport>(entity =>
            {
                entity.HasKey(e => e.EsId)
                    .HasName("tEnv_Summary_MTReport$PrimaryKey");

                entity.ToTable("tEnv_Summary_MTReport");

                entity.Property(e => e.EsId).HasColumnName("ES_ID");

                entity.Property(e => e.EsAccrualConsumption).HasColumnName("ES_Accrual_Consumption");

                entity.Property(e => e.EsAccrualDollars).HasColumnName("ES_Accrual_Dollars");

                entity.Property(e => e.EsActualConsumption).HasColumnName("ES_Actual_Consumption");

                entity.Property(e => e.EsActualDollars).HasColumnName("ES_Actual_Dollars");

                entity.Property(e => e.EsConsumptionDailyAvg).HasColumnName("ES_Consumption_Daily_Avg");

                entity.Property(e => e.EsDaysInMonth).HasColumnName("ES_Days_In_Month");

                entity.Property(e => e.EsDollarsDailyAvg).HasColumnName("ES_Dollars_Daily_Avg");

                entity.Property(e => e.EsMonth).HasColumnName("ES_Month");

                entity.Property(e => e.EsNoOfAccrualDays).HasColumnName("ES_No_Of_Accrual_Days");

                entity.Property(e => e.EsNoOfInvDays).HasColumnName("ES_No_Of_Inv_Days");

                entity.Property(e => e.EsSiteId).HasColumnName("ES_SiteID");

                entity.Property(e => e.EsYear).HasColumnName("ES_Year");

                entity.Property(e => e.SysSummaryMtreportTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_Summary_MTReport_Timestamp");
            });

            modelBuilder.Entity<TImwAccrualsBase>(entity =>
            {
                entity.HasKey(e => e.BaseId);

                entity.ToTable("tIMW_Accruals_Base");

                entity.Property(e => e.BaseId).HasColumnName("Base_ID");

                entity.Property(e => e.BlConsumption).HasColumnName("BL_Consumption");

                entity.Property(e => e.BlDollars)
                    .HasColumnType("money")
                    .HasColumnName("BL_Dollars");

                entity.Property(e => e.EstimatePreRead).HasColumnName("Estimate_Pre_Read");

                entity.Property(e => e.InvEndDate).HasColumnType("datetime");

                entity.Property(e => e.InvStartDate).HasColumnType("datetime");

                entity.Property(e => e.LastReadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Read_Date");

                entity.Property(e => e.MeConsumption).HasColumnName("ME_Consumption");

                entity.Property(e => e.MeDollars)
                    .HasColumnType("money")
                    .HasColumnName("ME_Dollars");

                entity.Property(e => e.ReadCount).HasColumnName("Read_Count");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.SecoundLastReadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Secound_Last_Read_Date");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Status).HasMaxLength(250);

                entity.Property(e => e.StatusDup)
                    .HasMaxLength(250)
                    .HasColumnName("Status_Dup");
            });

            modelBuilder.Entity<TImwAccrualsBaseline>(entity =>
            {
                entity.HasKey(e => e.BaseId);

                entity.ToTable("tIMW_Accruals_Baseline");

                entity.Property(e => e.BaseId).HasColumnName("Base_ID");

                entity.Property(e => e.BlCentsPerKwh).HasColumnName("BL_Cents_Per_Kwh");

                entity.Property(e => e.BlConsumption).HasColumnName("BL_Consumption");

                entity.Property(e => e.BlDollars)
                    .HasColumnType("money")
                    .HasColumnName("BL_Dollars");

                entity.Property(e => e.BlDollarsPerDay).HasColumnName("BL_Dollars_Per_Day");

                entity.Property(e => e.BlKwhPerDay).HasColumnName("BL_Kwh_Per_Day");

                entity.Property(e => e.LastReadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Last_Read_Date");

                entity.Property(e => e.MeConsumption).HasColumnName("ME_Consumption");

                entity.Property(e => e.MeDollars)
                    .HasColumnType("money")
                    .HasColumnName("ME_Dollars");

                entity.Property(e => e.NoOfInvSite).HasColumnName("No_Of_Inv_Site");

                entity.Property(e => e.SecoundLastReadDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Secound_Last_Read_Date");

                entity.Property(e => e.Status).HasMaxLength(255);
            });

            modelBuilder.Entity<TInputType>(entity =>
            {
                entity.HasKey(e => e.InputTypeCode)
                    .HasName("tInputTypes$PrimaryKey");

                entity.ToTable("tInputTypes");

                entity.Property(e => e.InputTypeCode).HasMaxLength(50);

                entity.Property(e => e.CustomerNo).HasMaxLength(50);

                entity.Property(e => e.EnvType)
                    .HasMaxLength(255)
                    .HasColumnName("ENV_Type");

                entity.Property(e => e.InputType).HasMaxLength(50);

                entity.Property(e => e.Itsort).HasColumnName("ITSort");
            });

            modelBuilder.Entity<TInvoice>(entity =>
            {
                entity.HasKey(e => e.SpinvNumber);

                entity.ToTable("tInvoices");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.AcadjFactor)
                    .HasColumnName("ACAdjFactor")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ApplySitePpd)
                    .HasColumnName("Apply_Site_PPD")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ArchiveDate).HasColumnType("date");

                entity.Property(e => e.ClientCode).HasMaxLength(10);

                entity.Property(e => e.CostsFees).HasDefaultValueSql("((0))");

                entity.Property(e => e.CostsNetwork).HasDefaultValueSql("((0))");

                entity.Property(e => e.CostsUsage).HasDefaultValueSql("((0))");

                entity.Property(e => e.CreditInv).HasDefaultValueSql("((0))");

                entity.Property(e => e.EdiId).HasColumnName("EDI_ID");

                entity.Property(e => e.FixedKva)
                    .HasColumnName("FixedKVA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.GstFreeCharges).HasColumnName("GST_Free_Charges");

                entity.Property(e => e.InvAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvAmountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountExGST");

                entity.Property(e => e.InvAmountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountGST");

                entity.Property(e => e.InvAmountSoa)
                    .HasColumnName("InvAmountSOA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvAmountToPay)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvAmountToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPayExGST");

                entity.Property(e => e.InvAmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPayGST");

                entity.Property(e => e.InvArchived)
                    .HasColumnName("Inv_Archived")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvDiscount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvDiscountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountExGST");

                entity.Property(e => e.InvDiscountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountGST");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvEnteredDate)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvLinesArchived).HasColumnName("Inv_Lines_Archived");

                entity.Property(e => e.InvNoPayfile).HasColumnName("InvNo_Payfile");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvOpenBalType).HasMaxLength(10);

                entity.Property(e => e.InvOpeningBalance)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvSubTotal)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvTotal)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Losses).HasDefaultValueSql("((0))");

                entity.Property(e => e.NtwkFixed).HasDefaultValueSql("((0))");

                entity.Property(e => e.ObGst)
                    .HasColumnName("OB_GST")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ObGstFree)
                    .HasColumnName("OB_GST_Free")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Obnotes)
                    .HasMaxLength(255)
                    .HasColumnName("OBNotes");

                entity.Property(e => e.OpeningBalanceExGst)
                    .HasColumnType("money")
                    .HasColumnName("OpeningBalanceExGST");

                entity.Property(e => e.OpeningBalanceGst)
                    .HasColumnType("money")
                    .HasColumnName("OpeningBalanceGST");

                entity.Property(e => e.OrgId).HasColumnName("Org_ID");

                entity.Property(e => e.ParentAccNum)
                    .HasMaxLength(255)
                    .HasColumnName("Parent_Acc_Num");

                entity.Property(e => e.ParentSpin).HasColumnName("Parent_SPIN");

                entity.Property(e => e.PdfInvAmountToPay)
                    .HasColumnType("money")
                    .HasColumnName("PDF_InvAmountToPay");

                entity.Property(e => e.PpdGst)
                    .HasColumnName("PPD_GST")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PpdGstFree)
                    .HasColumnName("PPD_GST_Free")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PpdIgnoreSiteDiscount)
                    .HasColumnName("PPD_Ignore_Site_Discount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ReadTypeCode)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(N'U')");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumberOrig).HasColumnName("SPInvNumberOrig");

                entity.Property(e => e.Split).HasColumnName("Split%");

                entity.Property(e => e.SpotRate).HasDefaultValueSql("((0))");

                entity.Property(e => e.StatementNumber).HasMaxLength(255);

                entity.Property(e => e.SysInvoicesTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_Invoices_Timestamp");

                entity.Property(e => e.UnitTotal).HasColumnName("Unit_Total");

                entity.HasOne(d => d.RetailerCodeNavigation)
                    .WithMany(p => p.TInvoices)
                    .HasForeignKey(d => d.RetailerCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tInvoices$tRetailerstInvoices");
            });

            modelBuilder.Entity<TInvoiceImportCatLine>(entity =>
            {
                entity.HasKey(e => e.CatId);

                entity.ToTable("tInvoice_Import_Cat_Lines");

                entity.Property(e => e.CatId).HasColumnName("Cat_ID");

                entity.Property(e => e.CatChargeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Cat_Charge_Description");

                entity.Property(e => e.HeaderId).HasColumnName("Header_ID");
            });

            modelBuilder.Entity<TInvoiceImportHeader>(entity =>
            {
                entity.HasKey(e => e.SpinvNumberOrig)
                    .HasName("PK_tInvoice_Import_Headers_1");

                entity.ToTable("tInvoice_Import_Headers");

                entity.Property(e => e.SpinvNumberOrig).HasColumnName("SPInvNumberOrig");

                entity.Property(e => e.AcadjFactor)
                    .HasColumnName("ACAdjFactor")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.BillType).HasMaxLength(255);

                entity.Property(e => e.CostsFees)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CostsNetwork)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CostsUsage)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreditInv).HasDefaultValueSql("((0))");

                entity.Property(e => e.FixedKva)
                    .HasColumnName("FixedKVA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Gxp)
                    .HasMaxLength(255)
                    .HasColumnName("GXP");

                entity.Property(e => e.HeaderId).HasColumnName("Header_ID");

                entity.Property(e => e.HighlightRecord)
                    .HasColumnName("Highlight_Record")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvAmountCalc)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvAmountSoa)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountSOA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvAmountToPay)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvDate).HasPrecision(0);

                entity.Property(e => e.InvDiscount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvDiscountPercent).HasColumnName("InvDiscount_Percent");

                entity.Property(e => e.InvDueDate).HasPrecision(0);

                entity.Property(e => e.InvEndDate).HasPrecision(0);

                entity.Property(e => e.InvEnteredDate).HasPrecision(0);

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvNumber).HasMaxLength(255);

                entity.Property(e => e.InvOpenBalType).HasMaxLength(10);

                entity.Property(e => e.InvOpeningBalance)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvStartDate).HasPrecision(0);

                entity.Property(e => e.InvSubTotal)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvTotal)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvoiceChanged)
                    .HasColumnName("Invoice_Changed")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Losses).HasDefaultValueSql("((0))");

                entity.Property(e => e.MeterNo).HasMaxLength(255);

                entity.Property(e => e.NetwrokId)
                    .HasMaxLength(255)
                    .HasColumnName("NetwrokID");

                entity.Property(e => e.NtwkFixed).HasDefaultValueSql("((0))");

                entity.Property(e => e.OtherTransactions).HasColumnType("money");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RegisterNo).HasMaxLength(255);

                entity.Property(e => e.RetailerCode).HasMaxLength(10);

                entity.Property(e => e.Reversals).HasColumnType("money");

                entity.Property(e => e.SiteDesciption).HasMaxLength(255);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SpotRate)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SysImportHeadersTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_Import_Headers_Timestamp");

                entity.Property(e => e.TaxClass)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Tax_Class");

                entity.Property(e => e.Warning).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<TInvoiceImportLine>(entity =>
            {
                entity.HasKey(e => e.InvLineNo)
                    .HasName("PK_tInvoice_Import_Lines_1");

                entity.ToTable("tInvoice_Import_Lines");

                entity.Property(e => e.ChargeLineDesc).HasMaxLength(255);

                entity.Property(e => e.ChargeLineId)
                    .HasMaxLength(255)
                    .HasColumnName("ChargeLineID");

                entity.Property(e => e.ChargeLineType).HasMaxLength(255);

                entity.Property(e => e.ConsumerNo).HasMaxLength(255);

                entity.Property(e => e.CostCentreId).HasColumnName("Cost_Centre_ID");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Exclude).HasDefaultValueSql("((0))");

                entity.Property(e => e.HeaderId).HasColumnName("Header_ID");

                entity.Property(e => e.HighlightRecord)
                    .HasColumnName("Highlight_Record")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvLineTotal)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvNo).HasMaxLength(255);

                entity.Property(e => e.InvoiceDate).HasPrecision(0);

                entity.Property(e => e.LineType).HasMaxLength(255);

                entity.Property(e => e.MeterNo).HasMaxLength(255);

                entity.Property(e => e.Metered).HasDefaultValueSql("((1))");

                entity.Property(e => e.NetworkId)
                    .HasMaxLength(255)
                    .HasColumnName("NetworkID");

                entity.Property(e => e.PriceType).HasMaxLength(1);

                entity.Property(e => e.ProductId)
                    .HasMaxLength(1)
                    .HasColumnName("ProductID")
                    .HasDefaultValueSql("('E')");

                entity.Property(e => e.RateCategory)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Rate_Category");

                entity.Property(e => e.RateClass).HasColumnName("Rate_Class");

                entity.Property(e => e.RateDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Rate_Description");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.ReadType).HasMaxLength(255);

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SpinvNumberOrig).HasColumnName("SPInvNumberOrig");

                entity.Property(e => e.SysImportLinesTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_Import_Lines_Timestamp");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitCost).HasDefaultValueSql("((0))");

                entity.Property(e => e.UnitType).HasMaxLength(50);

                entity.Property(e => e.UnitsUsedCheck).HasDefaultValueSql("((0))");

                entity.Property(e => e.UtilityCode)
                    .HasMaxLength(255)
                    .HasColumnName("Utility_Code");
            });

            modelBuilder.Entity<TInvoiceImportMeridianCredit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tInvoice_Import_MERIDIAN_Credits");

                entity.Property(e => e.Amountincgst).HasColumnName("AMOUNTINCGST");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DESCRIPTION");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.HeaderId).HasColumnName("Header_ID");

                entity.Property(e => e.Invoicenumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("INVOICENUMBER");

                entity.Property(e => e.Statementnumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STATEMENTNUMBER");

                entity.Property(e => e.Test).HasColumnName("TEST");
            });

            modelBuilder.Entity<TInvoiceImportMeridianHeader>(entity =>
            {
                entity.HasKey(e => e.MeridianId);

                entity.ToTable("tInvoice_Import_MERIDIAN_Header");

                entity.Property(e => e.MeridianId).HasColumnName("Meridian_ID");

                entity.Property(e => e.Accountno)
                    .HasMaxLength(255)
                    .HasColumnName("ACCOUNTNO");

                entity.Property(e => e.CustCode).HasMaxLength(255);

                entity.Property(e => e.Customerno)
                    .HasMaxLength(255)
                    .HasColumnName("CUSTOMERNO");

                entity.Property(e => e.DiscountGranted).HasColumnName("DISCOUNT_GRANTED");

                entity.Property(e => e.Duedate)
                    .HasPrecision(0)
                    .HasColumnName("DUEDATE");

                entity.Property(e => e.Gxp)
                    .HasMaxLength(255)
                    .HasColumnName("GXP");

                entity.Property(e => e.HeaderId).HasColumnName("Header_ID");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.Internalinvoicenumber).HasColumnName("INTERNALINVOICENUMBER");

                entity.Property(e => e.Invoicecurrentcharges).HasColumnName("INVOICECURRENTCHARGES");

                entity.Property(e => e.Invoicedate)
                    .HasPrecision(0)
                    .HasColumnName("INVOICEDATE");

                entity.Property(e => e.Invoicediscount).HasColumnName("INVOICEDISCOUNT");

                entity.Property(e => e.Invoicediscountpercent).HasColumnName("INVOICEDISCOUNTPERCENT");

                entity.Property(e => e.Invoiceenddate)
                    .HasPrecision(0)
                    .HasColumnName("INVOICEENDDATE");

                entity.Property(e => e.Invoicegst).HasColumnName("INVOICEGST");

                entity.Property(e => e.Invoicenoofdays).HasColumnName("INVOICENOOFDAYS");

                entity.Property(e => e.Invoicenotes)
                    .HasMaxLength(255)
                    .HasColumnName("INVOICENOTES");

                entity.Property(e => e.Invoicenumber)
                    .HasMaxLength(255)
                    .HasColumnName("INVOICENUMBER");

                entity.Property(e => e.Invoicestartdate)
                    .HasPrecision(0)
                    .HasColumnName("INVOICESTARTDATE");

                entity.Property(e => e.Invoicesubtotal).HasColumnName("INVOICESUBTOTAL");

                entity.Property(e => e.Invoicetotal).HasColumnName("INVOICETOTAL");

                entity.Property(e => e.Invoicetype)
                    .HasMaxLength(255)
                    .HasColumnName("INVOICETYPE");

                entity.Property(e => e.Losspercentage)
                    .HasMaxLength(255)
                    .HasColumnName("LOSSPERCENTAGE");

                entity.Property(e => e.Lossrate)
                    .HasMaxLength(255)
                    .HasColumnName("LOSSRATE");

                entity.Property(e => e.Othertransactions).HasColumnName("OTHERTRANSACTIONS");

                entity.Property(e => e.Readtype)
                    .HasMaxLength(255)
                    .HasColumnName("READTYPE");

                entity.Property(e => e.Retailercode)
                    .HasMaxLength(255)
                    .HasColumnName("RETAILERCODE");

                entity.Property(e => e.Reversals).HasColumnName("REVERSALS");

                entity.Property(e => e.Siteaddress1)
                    .HasMaxLength(255)
                    .HasColumnName("SITEADDRESS1");

                entity.Property(e => e.Siteaddress2)
                    .HasMaxLength(255)
                    .HasColumnName("SITEADDRESS2");

                entity.Property(e => e.Sitedescription)
                    .HasMaxLength(255)
                    .HasColumnName("SITEDESCRIPTION");

                entity.Property(e => e.Spotrate).HasColumnName("SPOTRATE");

                entity.Property(e => e.SsmaTimeStamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SSMA_TimeStamp");

                entity.Property(e => e.Statementnumber)
                    .HasMaxLength(255)
                    .HasColumnName("STATEMENTNUMBER");

                entity.Property(e => e.Statementopeningbalance).HasColumnName("STATEMENTOPENINGBALANCE");

                entity.Property(e => e.Totalconsumption).HasColumnName("TOTALCONSUMPTION");
            });

            modelBuilder.Entity<TInvoiceImportMeridianHeader1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tInvoice_Import_MERIDIAN_Header_1");

                entity.Property(e => e.Accountno)
                    .HasMaxLength(255)
                    .HasColumnName("ACCOUNTNO");

                entity.Property(e => e.CustCode).HasMaxLength(255);

                entity.Property(e => e.Customerno)
                    .HasMaxLength(255)
                    .HasColumnName("CUSTOMERNO");

                entity.Property(e => e.DiscountGranted).HasColumnName("DISCOUNT_GRANTED");

                entity.Property(e => e.Duedate)
                    .HasPrecision(0)
                    .HasColumnName("DUEDATE");

                entity.Property(e => e.Gxp)
                    .HasMaxLength(255)
                    .HasColumnName("GXP");

                entity.Property(e => e.HeaderId).HasColumnName("Header_ID");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.Internalinvoicenumber).HasColumnName("INTERNALINVOICENUMBER");

                entity.Property(e => e.Invoicecurrentcharges).HasColumnName("INVOICECURRENTCHARGES");

                entity.Property(e => e.Invoicedate)
                    .HasPrecision(0)
                    .HasColumnName("INVOICEDATE");

                entity.Property(e => e.Invoicediscount).HasColumnName("INVOICEDISCOUNT");

                entity.Property(e => e.Invoicediscountpercent).HasColumnName("INVOICEDISCOUNTPERCENT");

                entity.Property(e => e.Invoiceenddate)
                    .HasPrecision(0)
                    .HasColumnName("INVOICEENDDATE");

                entity.Property(e => e.Invoicegst).HasColumnName("INVOICEGST");

                entity.Property(e => e.Invoicenoofdays).HasColumnName("INVOICENOOFDAYS");

                entity.Property(e => e.Invoicenotes)
                    .HasMaxLength(255)
                    .HasColumnName("INVOICENOTES");

                entity.Property(e => e.Invoicenumber)
                    .HasMaxLength(255)
                    .HasColumnName("INVOICENUMBER");

                entity.Property(e => e.Invoicestartdate)
                    .HasPrecision(0)
                    .HasColumnName("INVOICESTARTDATE");

                entity.Property(e => e.Invoicesubtotal).HasColumnName("INVOICESUBTOTAL");

                entity.Property(e => e.Invoicetotal).HasColumnName("INVOICETOTAL");

                entity.Property(e => e.Invoicetype)
                    .HasMaxLength(255)
                    .HasColumnName("INVOICETYPE");

                entity.Property(e => e.Losspercentage)
                    .HasMaxLength(255)
                    .HasColumnName("LOSSPERCENTAGE");

                entity.Property(e => e.Lossrate)
                    .HasMaxLength(255)
                    .HasColumnName("LOSSRATE");

                entity.Property(e => e.Othertransactions).HasColumnName("OTHERTRANSACTIONS");

                entity.Property(e => e.Readtype)
                    .HasMaxLength(255)
                    .HasColumnName("READTYPE");

                entity.Property(e => e.Retailercode)
                    .HasMaxLength(255)
                    .HasColumnName("RETAILERCODE");

                entity.Property(e => e.Reversals).HasColumnName("REVERSALS");

                entity.Property(e => e.Siteaddress1)
                    .HasMaxLength(255)
                    .HasColumnName("SITEADDRESS1");

                entity.Property(e => e.Siteaddress2)
                    .HasMaxLength(255)
                    .HasColumnName("SITEADDRESS2");

                entity.Property(e => e.Sitedescription)
                    .HasMaxLength(255)
                    .HasColumnName("SITEDESCRIPTION");

                entity.Property(e => e.Spotrate).HasColumnName("SPOTRATE");

                entity.Property(e => e.SsmaTimeStamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SSMA_TimeStamp");

                entity.Property(e => e.Statementnumber)
                    .HasMaxLength(255)
                    .HasColumnName("STATEMENTNUMBER");

                entity.Property(e => e.Statementopeningbalance).HasColumnName("STATEMENTOPENINGBALANCE");

                entity.Property(e => e.Totalconsumption).HasColumnName("TOTALCONSUMPTION");
            });

            modelBuilder.Entity<TInvoiceImportMeridianLine>(entity =>
            {
                entity.HasKey(e => e.MeridianId);

                entity.ToTable("tInvoice_Import_MERIDIAN_Lines");

                entity.Property(e => e.MeridianId).HasColumnName("Meridian_ID");

                entity.Property(e => e.Accountno).HasColumnName("ACCOUNTNO");

                entity.Property(e => e.Consumptionused).HasColumnName("CONSUMPTIONUSED");

                entity.Property(e => e.Currreading).HasColumnName("CURRREADING");

                entity.Property(e => e.CustCode).HasMaxLength(255);

                entity.Property(e => e.HeaderId).HasColumnName("Header_ID");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.Invoicedate)
                    .HasPrecision(0)
                    .HasColumnName("INVOICEDATE");

                entity.Property(e => e.Invoicelinenumber)
                    .HasMaxLength(255)
                    .HasColumnName("INVOICELINENUMBER");

                entity.Property(e => e.Invoicelinetotal).HasColumnName("INVOICELINETOTAL");

                entity.Property(e => e.Invoicenumber)
                    .HasMaxLength(255)
                    .HasColumnName("INVOICENUMBER");

                entity.Property(e => e.Linedescription)
                    .HasMaxLength(255)
                    .HasColumnName("LINEDESCRIPTION");

                entity.Property(e => e.Linetype)
                    .HasMaxLength(255)
                    .HasColumnName("LINETYPE");

                entity.Property(e => e.Metered)
                    .HasMaxLength(255)
                    .HasColumnName("METERED");

                entity.Property(e => e.Meterno)
                    .HasMaxLength(255)
                    .HasColumnName("METERNO");

                entity.Property(e => e.Multiplier).HasColumnName("MULTIPLIER");

                entity.Property(e => e.Prevreading).HasColumnName("PREVREADING");

                entity.Property(e => e.Readtype)
                    .HasMaxLength(255)
                    .HasColumnName("READTYPE");

                entity.Property(e => e.Siteid)
                    .HasMaxLength(255)
                    .HasColumnName("SITEID");

                entity.Property(e => e.SsmaTimeStamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SSMA_TimeStamp");

                entity.Property(e => e.Tariffid)
                    .HasMaxLength(255)
                    .HasColumnName("TARIFFID");

                entity.Property(e => e.Unitcost).HasColumnName("UNITCOST");

                entity.Property(e => e.Unittype)
                    .HasMaxLength(255)
                    .HasColumnName("UNITTYPE");

                entity.Property(e => e.Utilitytype)
                    .HasMaxLength(255)
                    .HasColumnName("UTILITYTYPE");
            });

            modelBuilder.Entity<TInvoiceImportMeridianSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tInvoice_Import_Meridian_Summary");

                entity.Property(e => e.Currentcharges).HasColumnName("CURRENTCHARGES");

                entity.Property(e => e.CustCode)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Distotaldue).HasColumnName("DISTOTALDUE");

                entity.Property(e => e.HeaderId).HasColumnName("Header_ID");

                entity.Property(e => e.InternalInvoiceNumbers)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.Invoicenumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("INVOICENUMBER");

                entity.Property(e => e.Openingbalance).HasColumnName("OPENINGBALANCE");

                entity.Property(e => e.Othertransactions).HasColumnName("OTHERTRANSACTIONS");

                entity.Property(e => e.Promptpaymentdis).HasColumnName("PROMPTPAYMENTDIS");

                entity.Property(e => e.Statementnumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STATEMENTNUMBER");

                entity.Property(e => e.Totaldue).HasColumnName("TOTALDUE");
            });

            modelBuilder.Entity<TInvoiceLine>(entity =>
            {
                entity.HasKey(e => e.InvLineNo)
                    .HasName("tInvoiceLines$PrimaryKey");

                entity.ToTable("tInvoiceLines");

                entity.Property(e => e.ArchiveDate).HasColumnType("date");

                entity.Property(e => e.CostCentreId).HasColumnName("Cost_Centre_ID");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.EdiId).HasColumnName("EDI_ID");

                entity.Property(e => e.Gst)
                    .IsRequired()
                    .HasColumnName("GST")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Gstrate).HasColumnName("GSTRate");

                entity.Property(e => e.InvLineTotal).HasDefaultValueSql("((0))");

                entity.Property(e => e.InvLineTotalGst).HasColumnName("InvLineTotal_GST");

                entity.Property(e => e.InvLineTotalInclGst).HasColumnName("InvLineTotal_Incl_GST");

                entity.Property(e => e.LinesReference).HasMaxLength(255);

                entity.Property(e => e.Metered).HasDefaultValueSql("((1))");

                entity.Property(e => e.Ppd)
                    .IsRequired()
                    .HasColumnName("PPD")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PriceType).HasMaxLength(1);

                entity.Property(e => e.ProductId)
                    .HasMaxLength(1)
                    .HasColumnName("ProductID")
                    .HasDefaultValueSql("('E')");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SpinvNumberOrig).HasColumnName("SPInvNumberOrig");

                entity.Property(e => e.SysInvoiceLinesTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_InvoiceLines_Timestamp");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitCost).HasDefaultValueSql("((0))");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UnitsUsedCheck).HasDefaultValueSql("((0))");

                entity.Property(e => e.UtilityCode)
                    .HasMaxLength(255)
                    .HasColumnName("Utility_Code");
            });

            modelBuilder.Entity<TInvoiceLinesArchived>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tInvoiceLinesArchived");

                entity.Property(e => e.ArchiveDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CostCentreId).HasColumnName("Cost_Centre_ID");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.EdiId).HasColumnName("EDI_ID");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.Gstrate).HasColumnName("GSTRate");

                entity.Property(e => e.InvLineTotalGst).HasColumnName("InvLineTotal_GST");

                entity.Property(e => e.InvLineTotalInclGst).HasColumnName("InvLineTotal_Incl_GST");

                entity.Property(e => e.LinesReference).HasMaxLength(255);

                entity.Property(e => e.Ppd).HasColumnName("PPD");

                entity.Property(e => e.PriceType).HasMaxLength(1);

                entity.Property(e => e.ProductId)
                    .HasMaxLength(1)
                    .HasColumnName("ProductID");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SpinvNumberOrig).HasColumnName("SPInvNumberOrig");

                entity.Property(e => e.SysInvoiceLinesTimestamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_InvoiceLines_Timestamp");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitType).HasMaxLength(50);

                entity.Property(e => e.UtilityCode)
                    .HasMaxLength(255)
                    .HasColumnName("Utility_Code");
            });

            modelBuilder.Entity<TInvoiceLinesArchivedOld>(entity =>
            {
                entity.HasKey(e => e.InvLineNo)
                    .HasName("tInvoiceLinesArchived$PrimaryKey");

                entity.ToTable("tInvoiceLinesArchived_OLD");

                entity.Property(e => e.ArchiveDate).HasColumnType("date");

                entity.Property(e => e.CostCentreId).HasColumnName("Cost_Centre_ID");

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.EdiId).HasColumnName("EDI_ID");

                entity.Property(e => e.Gst)
                    .IsRequired()
                    .HasColumnName("GST")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Gstrate).HasColumnName("GSTRate");

                entity.Property(e => e.InvLineTotal).HasDefaultValueSql("((0))");

                entity.Property(e => e.LinesReference).HasMaxLength(255);

                entity.Property(e => e.Metered).HasDefaultValueSql("((1))");

                entity.Property(e => e.Ppd)
                    .IsRequired()
                    .HasColumnName("PPD")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PriceType).HasMaxLength(1);

                entity.Property(e => e.ProductId)
                    .HasMaxLength(1)
                    .HasColumnName("ProductID")
                    .HasDefaultValueSql("('E')");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SpinvNumberOrig).HasColumnName("SPInvNumberOrig");

                entity.Property(e => e.SysInvoiceLinesArchivedTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_InvoiceLinesArchived_Timestamp");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitCost).HasDefaultValueSql("((0))");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UnitsUsedCheck).HasDefaultValueSql("((0))");

                entity.Property(e => e.UtilityCode)
                    .HasMaxLength(255)
                    .HasColumnName("Utility_Code");
            });

            modelBuilder.Entity<TInvoicesArchived>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tInvoicesArchived");

                entity.Property(e => e.AcadjFactor).HasColumnName("ACAdjFactor");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ApplySitePpd).HasColumnName("Apply_Site_PPD");

                entity.Property(e => e.ArchiveDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ClientCode).HasMaxLength(10);

                entity.Property(e => e.EdiId).HasColumnName("EDI_ID");

                entity.Property(e => e.FixedKva).HasColumnName("FixedKVA");

                entity.Property(e => e.GstFreeCharges).HasColumnName("GST_Free_Charges");

                entity.Property(e => e.InvAmount).HasColumnType("money");

                entity.Property(e => e.InvAmountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountExGST");

                entity.Property(e => e.InvAmountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountGST");

                entity.Property(e => e.InvAmountSoa).HasColumnName("InvAmountSOA");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvAmountToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPayExGST");

                entity.Property(e => e.InvAmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPayGST");

                entity.Property(e => e.InvArchived).HasColumnName("Inv_Archived");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvDiscountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountExGST");

                entity.Property(e => e.InvDiscountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountGST");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvEnteredDate).HasColumnType("date");

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST");

                entity.Property(e => e.InvLinesArchived).HasColumnName("Inv_Lines_Archived");

                entity.Property(e => e.InvNoPayfile).HasColumnName("InvNo_Payfile");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvNumber).HasMaxLength(50);

                entity.Property(e => e.InvOpenBalType).HasMaxLength(10);

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.ObGst).HasColumnName("OB_GST");

                entity.Property(e => e.Obnotes)
                    .HasMaxLength(255)
                    .HasColumnName("OBNotes");

                entity.Property(e => e.OpeningBalanceExGst)
                    .HasColumnType("money")
                    .HasColumnName("OpeningBalanceExGST");

                entity.Property(e => e.OpeningBalanceGst)
                    .HasColumnType("money")
                    .HasColumnName("OpeningBalanceGST");

                entity.Property(e => e.OrgId).HasColumnName("Org_ID");

                entity.Property(e => e.ParentAccNum)
                    .HasMaxLength(255)
                    .HasColumnName("Parent_Acc_Num");

                entity.Property(e => e.ParentSpin).HasColumnName("Parent_SPIN");

                entity.Property(e => e.PdfInvAmountToPay)
                    .HasColumnType("money")
                    .HasColumnName("PDF_InvAmountToPay");

                entity.Property(e => e.PpdGst).HasColumnName("PPD_GST");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SpinvNumberOrig).HasColumnName("SPInvNumberOrig");

                entity.Property(e => e.Split).HasColumnName("Split%");

                entity.Property(e => e.StatementNumber).HasMaxLength(255);

                entity.Property(e => e.SysInvoicesTimestamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_Invoices_Timestamp");

                entity.Property(e => e.UnitTotal).HasColumnName("Unit_Total");
            });

            modelBuilder.Entity<TInvoicesArchivedOld>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tInvoicesArchived_OLD");

                entity.Property(e => e.AcadjFactor)
                    .HasColumnName("ACAdjFactor")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ArchiveDate).HasColumnType("date");

                entity.Property(e => e.CostsFees).HasDefaultValueSql("((0))");

                entity.Property(e => e.CostsNetwork).HasDefaultValueSql("((0))");

                entity.Property(e => e.CostsUsage).HasDefaultValueSql("((0))");

                entity.Property(e => e.CreditInv).HasDefaultValueSql("((0))");

                entity.Property(e => e.EdiId).HasColumnName("EDI_ID");

                entity.Property(e => e.FixedKva)
                    .HasColumnName("FixedKVA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.GstFreeCharges).HasColumnName("GST_Free_Charges");

                entity.Property(e => e.InvAmount).HasDefaultValueSql("((0))");

                entity.Property(e => e.InvAmountExGst).HasColumnName("InvAmountExGST");

                entity.Property(e => e.InvAmountGst).HasColumnName("InvAmountGST");

                entity.Property(e => e.InvAmountSoa)
                    .HasColumnName("InvAmountSOA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvAmountToPay).HasDefaultValueSql("((0))");

                entity.Property(e => e.InvAmountToPayExGst).HasColumnName("InvAmountToPayExGST");

                entity.Property(e => e.InvAmountToPayGst).HasColumnName("InvAmountToPayGST");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvDiscount).HasDefaultValueSql("((0))");

                entity.Property(e => e.InvDiscountExGst).HasColumnName("InvDiscountExGST");

                entity.Property(e => e.InvDiscountGst).HasColumnName("InvDiscountGST");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvEnteredDate).HasColumnType("date");

                entity.Property(e => e.InvGst)
                    .HasColumnName("InvGST")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.InvNoPayfile).HasColumnName("InvNo_Payfile");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvOpenBalType).HasMaxLength(10);

                entity.Property(e => e.InvOpeningBalance).HasDefaultValueSql("((0))");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvSubTotal).HasDefaultValueSql("((0))");

                entity.Property(e => e.InvTotal).HasDefaultValueSql("((0))");

                entity.Property(e => e.Losses).HasDefaultValueSql("((0))");

                entity.Property(e => e.NtwkFixed).HasDefaultValueSql("((0))");

                entity.Property(e => e.Obnotes)
                    .HasMaxLength(255)
                    .HasColumnName("OBNotes");

                entity.Property(e => e.OpeningBalanceExGst).HasColumnName("OpeningBalanceExGST");

                entity.Property(e => e.OpeningBalanceGst).HasColumnName("OpeningBalanceGST");

                entity.Property(e => e.OrgId).HasColumnName("Org_ID");

                entity.Property(e => e.ParentAccNum)
                    .HasMaxLength(255)
                    .HasColumnName("Parent_Acc_Num");

                entity.Property(e => e.ParentSpin).HasColumnName("Parent_SPIN");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumber)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SPInvNumber");

                entity.Property(e => e.SpinvNumberOrig).HasColumnName("SPInvNumberOrig");

                entity.Property(e => e.Split).HasColumnName("Split%");

                entity.Property(e => e.SpotRate).HasDefaultValueSql("((0))");

                entity.Property(e => e.StatementNumber).HasMaxLength(255);

                entity.Property(e => e.SysInvoicesArchivedTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_InvoicesArchived_Timestamp");

                entity.Property(e => e.UnitTotal).HasColumnName("Unit_Total");
            });

            modelBuilder.Entity<TIo>(entity =>
            {
                entity.HasKey(e => e.Iotype)
                    .HasName("tIO$PrimaryKey");

                entity.ToTable("tIO");

                entity.Property(e => e.Iotype)
                    .HasMaxLength(50)
                    .HasColumnName("IOType");

                entity.Property(e => e.Iodirectory)
                    .HasMaxLength(255)
                    .HasColumnName("IODirectory");
            });

            modelBuilder.Entity<TJrnlBatchNumber>(entity =>
            {
                entity.HasKey(e => e.BatchNo)
                    .HasName("PK_tJrnl_Batch_Number_1");

                entity.ToTable("tJrnl_Batch_Number");

                entity.Property(e => e.BatchNo).ValueGeneratedNever();

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TLionBatchNumber>(entity =>
            {
                entity.HasKey(e => e.BatchNumber);

                entity.ToTable("tLION_Batch_Number");

                entity.Property(e => e.BatchNumber)
                    .ValueGeneratedNever()
                    .HasColumnName("Batch_Number");

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TMdeDefaultValue>(entity =>
            {
                entity.HasKey(e => e.MdeDefaultId);

                entity.ToTable("tMDE_Default_Values");

                entity.Property(e => e.MdeDefaultId).HasColumnName("MDE_Default_ID");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("date")
                    .HasColumnName("Invoice_Date");

                entity.Property(e => e.InvoiceDueDate)
                    .HasColumnType("date")
                    .HasColumnName("Invoice_Due_Date");

                entity.Property(e => e.ReadTypeCode)
                    .HasMaxLength(10)
                    .HasColumnName("Read_Type_Code");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.Spib).HasColumnName("SPIB");
            });

            modelBuilder.Entity<TMeter>(entity =>
            {
                entity.HasKey(e => e.MeterId)
                    .HasName("tMeters$PrimaryKey");

                entity.ToTable("tMeters");

                entity.Property(e => e.MeterId).HasColumnName("MeterID");

                entity.Property(e => e.Active)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CustCode).HasMaxLength(255);

                entity.Property(e => e.MeterIndex).HasDefaultValueSql("((1))");

                entity.Property(e => e.MeterNo).HasMaxLength(255);

                entity.Property(e => e.Multiplier).HasDefaultValueSql("((1))");

                entity.Property(e => e.RegisterNo).HasMaxLength(255);

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.SsmaTimeStamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("SSMA_TimeStamp");
            });

            modelBuilder.Entity<TMobilJournal>(entity =>
            {
                entity.HasKey(e => e.RowNumber);

                entity.ToTable("tMOBIL_Journal");

                entity.Property(e => e.RowNumber)
                    .ValueGeneratedNever()
                    .HasColumnName("Row Number");

                entity.Property(e => e.Acc)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("ACC#");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(50)
                    .HasColumnName("Account Number");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.CustNo).HasMaxLength(200);

                entity.Property(e => e.DateStamp)
                    .IsRequired()
                    .HasMaxLength(1)
                    .HasColumnName("Date Stamp");

                entity.Property(e => e.Discount).HasColumnType("money");

                entity.Property(e => e.DiscountTitle)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasColumnName("Discount_Title");

                entity.Property(e => e.Freq)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.FullAmount)
                    .HasColumnType("money")
                    .HasColumnName("Full amount");

                entity.Property(e => e.GLAccount)
                    .IsRequired()
                    .HasMaxLength(8)
                    .HasColumnName("G/L Account");

                entity.Property(e => e.GstAfterDiscount).HasColumnName("GST (After discount)");

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("date")
                    .HasColumnName("Invoice Date");

                entity.Property(e => e.InvoiceNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Invoice No");

                entity.Property(e => e.PaymentDueDate)
                    .HasColumnType("date")
                    .HasColumnName("Payment Due Date");

                entity.Property(e => e.PeriodFrom)
                    .HasColumnType("date")
                    .HasColumnName("Period From");

                entity.Property(e => e.PeriodTo)
                    .HasColumnType("date")
                    .HasColumnName("Period To");

                entity.Property(e => e.ReceivedDate)
                    .HasColumnType("date")
                    .HasColumnName("Received Date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.RelatedAccount)
                    .HasMaxLength(255)
                    .HasColumnName("Related Account");

                entity.Property(e => e.Remark).HasMaxLength(109);

                entity.Property(e => e.S)
                    .IsRequired()
                    .HasMaxLength(1);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.VendorNo)
                    .HasMaxLength(15)
                    .HasColumnName("Vendor No");
            });

            modelBuilder.Entity<TOptionsSelected>(entity =>
            {
                entity.ToTable("tOptionsSelected");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.SelectedOption).HasMaxLength(100);
            });

            modelBuilder.Entity<TOutage>(entity =>
            {
                entity.HasKey(e => e.OutageId)
                    .HasName("PK__tOutages__DE0553097410CCEC");

                entity.ToTable("tOutages");

                entity.Property(e => e.OutageId).HasColumnName("OutageID");

                entity.Property(e => e.AlternateSartDate).HasColumnType("date");

                entity.Property(e => e.CancellationComments).HasMaxLength(100);

                entity.Property(e => e.CancelledDate).HasColumnType("datetime");

                entity.Property(e => e.ClientOutageId)
                    .HasMaxLength(50)
                    .HasColumnName("ClientOutageID");

                entity.Property(e => e.Comments).HasMaxLength(100);

                entity.Property(e => e.DateEntered)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.EnteredBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NetworkReference).HasMaxLength(50);

                entity.Property(e => e.OutageType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Planned')");

                entity.Property(e => e.Reason)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Maintenance')");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.HasOne(d => d.SiteNoNavigation)
                    .WithMany(p => p.TOutages)
                    .HasForeignKey(d => d.SiteNo)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_tSites_Outages_SiteNo");
            });

            modelBuilder.Entity<TPayfileBatch>(entity =>
            {
                entity.HasKey(e => e.BatchNumber);

                entity.ToTable("tPayfile_Batches");

                entity.Property(e => e.BatchNumber)
                    .ValueGeneratedNever()
                    .HasColumnName("Batch_Number");
            });

            modelBuilder.Entity<TPayfileGeccV>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tPayfile_GECC_V");

                entity.Property(e => e.AllowanceDate8)
                    .HasMaxLength(250)
                    .HasColumnName("Allowance_Date_8");

                entity.Property(e => e.BatchNo9)
                    .HasMaxLength(250)
                    .HasColumnName("BatchNo_9");

                entity.Property(e => e.ComapnyNo3)
                    .HasMaxLength(250)
                    .HasColumnName("ComapnyNo_3");

                entity.Property(e => e.Currency4)
                    .HasMaxLength(250)
                    .HasColumnName("Currency_4");

                entity.Property(e => e.DiscountDate8)
                    .HasMaxLength(250)
                    .HasColumnName("Discount_Date_8");

                entity.Property(e => e.DueAmount17)
                    .HasMaxLength(250)
                    .HasColumnName("Due_Amount_17");

                entity.Property(e => e.ExternalHoldSwitch1)
                    .HasMaxLength(250)
                    .HasColumnName("External_Hold_Switch_1");

                entity.Property(e => e.ExternalModswitch1)
                    .HasMaxLength(250)
                    .HasColumnName("External_Modswitch_1");

                entity.Property(e => e.Factor6)
                    .HasMaxLength(250)
                    .HasColumnName("Factor_6");

                entity.Property(e => e.ForeignCurencyRate12)
                    .HasMaxLength(250)
                    .HasColumnName("ForeignCurencyRate_12");

                entity.Property(e => e.ForeignCurrencyFormat1)
                    .HasMaxLength(250)
                    .HasColumnName("Foreign_Currency_Format_1");

                entity.Property(e => e.Form2Code1)
                    .HasMaxLength(250)
                    .HasColumnName("Form_2_Code_1");

                entity.Property(e => e.HoldPaymentFlag1)
                    .HasMaxLength(250)
                    .HasColumnName("Hold_Payment_Flag_1");

                entity.Property(e => e.HoldReasonCode3)
                    .HasMaxLength(250)
                    .HasColumnName("Hold_Reason_Code_3");

                entity.Property(e => e.InvoiceDate8)
                    .HasMaxLength(250)
                    .HasColumnName("Invoice_Date_8");

                entity.Property(e => e.InvoiceEndDate)
                    .HasMaxLength(250)
                    .HasColumnName("Invoice_End_Date");

                entity.Property(e => e.InvoiceNo20)
                    .HasMaxLength(250)
                    .HasColumnName("InvoiceNo_20");

                entity.Property(e => e.Miscref15)
                    .HasMaxLength(250)
                    .HasColumnName("Miscref__15");

                entity.Property(e => e.Miscref151)
                    .HasMaxLength(250)
                    .HasColumnName("Miscref_15");

                entity.Property(e => e.Miscref40)
                    .HasMaxLength(250)
                    .HasColumnName("Miscref_40");

                entity.Property(e => e.PayDueDate8)
                    .HasMaxLength(250)
                    .HasColumnName("Pay_Due_Date_8");

                entity.Property(e => e.PayingCurrency4)
                    .HasMaxLength(250)
                    .HasColumnName("Paying_Currency_4");

                entity.Property(e => e.PaymentMethod3)
                    .HasMaxLength(250)
                    .HasColumnName("Payment_Method_3");

                entity.Property(e => e.PoNumber15)
                    .HasMaxLength(250)
                    .HasColumnName("PO_Number_15");

                entity.Property(e => e.PoVoucherInd1)
                    .HasMaxLength(250)
                    .HasColumnName("PO_Voucher_Ind_1");

                entity.Property(e => e.PoVoucherType2)
                    .HasMaxLength(250)
                    .HasColumnName("PO_Voucher_Type_2");

                entity.Property(e => e.PostingDate8)
                    .HasMaxLength(250)
                    .HasColumnName("Posting_Date_8");

                entity.Property(e => e.ReceiptDate8)
                    .HasMaxLength(250)
                    .HasColumnName("Receipt_Date_8");

                entity.Property(e => e.RecordType1)
                    .HasMaxLength(250)
                    .HasColumnName("RecordType_1");

                entity.Property(e => e.SeparateCheckSwitch10)
                    .HasMaxLength(250)
                    .HasColumnName("Separate_Check_Switch_10");

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.Space127)
                    .HasMaxLength(250)
                    .HasColumnName("Space_127");

                entity.Property(e => e.Space163)
                    .HasMaxLength(250)
                    .HasColumnName("Space_163");

                entity.Property(e => e.Space223)
                    .HasMaxLength(250)
                    .HasColumnName("Space_223");

                entity.Property(e => e.VendorId10)
                    .HasMaxLength(250)
                    .HasColumnName("VendorID_10");

                entity.Property(e => e.VendorRemit3)
                    .HasMaxLength(250)
                    .HasColumnName("VendorRemit_3");

                entity.Property(e => e.VoucherCategory3)
                    .HasMaxLength(250)
                    .HasColumnName("Voucher_Category_3");

                entity.Property(e => e.VoucherComment30)
                    .HasMaxLength(250)
                    .HasColumnName("Voucher_Comment_30");

                entity.Property(e => e.VoucherNo9)
                    .HasMaxLength(250)
                    .HasColumnName("VoucherNo_9");

                entity.Property(e => e.VoucherReference30)
                    .HasMaxLength(250)
                    .HasColumnName("Voucher_Reference_30");

                entity.Property(e => e.VoucherSubCategory3)
                    .HasMaxLength(250)
                    .HasColumnName("Voucher_Sub_Category_3");

                entity.Property(e => e._1099Code1)
                    .HasMaxLength(250)
                    .HasColumnName("1099_Code_1");

                entity.Property(e => e._1filler1)
                    .HasMaxLength(250)
                    .HasColumnName("1Filler_1");

                entity.Property(e => e._1miscSoftKey30)
                    .HasMaxLength(250)
                    .HasColumnName("1Misc_Soft_Key_30");

                entity.Property(e => e._2filler4)
                    .HasMaxLength(250)
                    .HasColumnName("2Filler_4");

                entity.Property(e => e._2miscSoftKey30)
                    .HasMaxLength(250)
                    .HasColumnName("2Misc_Soft_Key_30");
            });

            modelBuilder.Entity<TRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tRates");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Gstrate).HasColumnName("GSTRate");

                entity.Property(e => e.InvoiceType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('Standard')");

                entity.Property(e => e.NetworkId)
                    .HasMaxLength(10)
                    .HasColumnName("NetworkID");

                entity.Property(e => e.OrgId).HasColumnName("Org_ID");

                entity.Property(e => e.PenaltyRate).HasColumnName("Penalty_Rate");

                entity.Property(e => e.RateCategory)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RateDescription)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.RateFirstkWh).HasMaxLength(255);

                entity.Property(e => e.RateId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RateID");

                entity.Property(e => e.RateName).HasMaxLength(255);

                entity.Property(e => e.RateSeason).HasMaxLength(255);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Status)
                    .HasMaxLength(25)
                    .HasDefaultValueSql("('Active')");

                entity.Property(e => e.SysRatesTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_Rates_Timestamp");

                entity.Property(e => e.UnitCost).HasDefaultValueSql("((0))");

                entity.Property(e => e.UnitType).HasMaxLength(50);

                entity.HasOne(d => d.RetailerCodeNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.RetailerCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("tRates$tRetailerstRates");
            });

            modelBuilder.Entity<TRatesLookupCreateRate>(entity =>
            {
                entity.HasKey(e => e.RatesEdiId);

                entity.ToTable("tRates_Lookup_Create_Rates");

                entity.Property(e => e.RatesEdiId).HasColumnName("Rates_EDI_ID");

                entity.Property(e => e.DateCreated).HasColumnType("date");

                entity.Property(e => e.Description).HasMaxLength(200);

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.RatesCat)
                    .HasMaxLength(200)
                    .HasColumnName("Rates_Cat");

                entity.Property(e => e.RetailerCode).HasMaxLength(50);

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.UnitCost).HasColumnName("Unit_Cost");

                entity.Property(e => e.UnitType).HasMaxLength(50);
            });

            modelBuilder.Entity<TReportRepBatchNumber>(entity =>
            {
                entity.HasKey(e => e.BatchNumber);

                entity.ToTable("tReport_Rep_Batch_Number");

                entity.Property(e => e.BatchNumber)
                    .ValueGeneratedNever()
                    .HasColumnName("Batch_Number");

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TReportRepositoryCrosstabBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tReportRepository_Crosstab_Base");

                entity.Property(e => e.ReportRepository)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<TRetailer>(entity =>
            {
                entity.HasKey(e => e.RetailerCode)
                    .HasName("tRetailers$PrimaryKey");

                entity.ToTable("tRetailers");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.AccountNo).HasMaxLength(50);

                entity.Property(e => e.ClientSupplierCode)
                    .HasMaxLength(15)
                    .HasColumnName("Client_Supplier_Code");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Exclude).HasDefaultValueSql("((0))");

                entity.Property(e => e.Fax).HasMaxLength(50);

                entity.Property(e => e.RetailerName).HasMaxLength(50);

                entity.Property(e => e.RetailerRef)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SysRetailersTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_Retailers_Timestamp");
            });

            modelBuilder.Entity<TReversalsBulkList>(entity =>
            {
                entity.HasKey(e => e.RevId);

                entity.ToTable("tReversals_Bulk_List");

                entity.Property(e => e.RevId).HasColumnName("Rev_ID");

                entity.Property(e => e.NewSpInvNumber).HasColumnName("New_SpInvNumber");

                entity.Property(e => e.OrgSpinvNumber).HasColumnName("Org_SPInvNumber");

                entity.Property(e => e.RevResults)
                    .HasMaxLength(100)
                    .HasColumnName("Rev_Results");

                entity.Property(e => e.RevStatus)
                    .HasMaxLength(100)
                    .HasColumnName("Rev_Status");

                entity.Property(e => e.UserName).HasMaxLength(100);
            });

            modelBuilder.Entity<TSite>(entity =>
            {
                entity.HasKey(e => e.SiteNo)
                    .HasName("PK_tSites_2");

                entity.ToTable("tSites");

                entity.HasIndex(e => e.ClientCode, "Indx_tSites");

                entity.Property(e => e.AccountCode).HasMaxLength(200);

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("(N'Unknown')");

                entity.Property(e => e.BillPayment)
                    .IsRequired()
                    .HasColumnName("Bill_Payment")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.BillVerification)
                    .IsRequired()
                    .HasColumnName("Bill_Verification")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.BillingFrequency)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Billing_Frequency")
                    .HasDefaultValueSql("('Monthly')");

                entity.Property(e => e.BpayCode)
                    .HasMaxLength(20)
                    .HasColumnName("BPayCode");

                entity.Property(e => e.BpayReference)
                    .HasMaxLength(20)
                    .HasColumnName("BPayReference");

                entity.Property(e => e.BuildingNo).HasMaxLength(200);

                entity.Property(e => e.CalSqMetres)
                    .HasColumnName("Cal_SqMetres")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CarbonFactorArea)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Carbon_Factor_Area");

                entity.Property(e => e.ClientCc)
                    .HasMaxLength(200)
                    .HasColumnName("ClientCC");

                entity.Property(e => e.ClientCode).HasMaxLength(10);

                entity.Property(e => e.ClientRef)
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('Unknown')");

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.CompanyCode).HasMaxLength(255);

                entity.Property(e => e.ConsumptionVariance).HasDefaultValueSql("((25))");

                entity.Property(e => e.ContactAddressCity).HasMaxLength(200);

                entity.Property(e => e.ContactAddressLine1).HasMaxLength(200);

                entity.Property(e => e.ContactAddressLine2).HasMaxLength(200);

                entity.Property(e => e.ContactFloor).HasMaxLength(200);

                entity.Property(e => e.ContactMailAddressLine1).HasMaxLength(200);

                entity.Property(e => e.ContactName).HasMaxLength(200);

                entity.Property(e => e.ContactName2).HasMaxLength(200);

                entity.Property(e => e.ContactPhone).HasMaxLength(200);

                entity.Property(e => e.Contestable).HasDefaultValueSql("((1))");

                entity.Property(e => e.CustomerNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Customer_Number");

                entity.Property(e => e.DataEntryNotes).HasColumnName("Data_Entry_Notes");

                entity.Property(e => e.DateAdded)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateCeased).HasColumnType("date");

                entity.Property(e => e.DmType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("DM_Type")
                    .HasDefaultValueSql("('STANDARD')");

                entity.Property(e => e.Dvn)
                    .HasMaxLength(255)
                    .HasColumnName("DVN");

                entity.Property(e => e.EdiCreated)
                    .HasMaxLength(255)
                    .HasColumnName("EDI_Created");

                entity.Property(e => e.EmissionsCode)
                    .HasMaxLength(200)
                    .HasColumnName("Emissions_Code");

                entity.Property(e => e.Entity).HasMaxLength(200);

                entity.Property(e => e.FixedKva)
                    .HasColumnName("FixedKVA")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FloorUtilityFactor).HasColumnName("Floor_Utility_Factor");

                entity.Property(e => e.GreenEnergyPercentage)
                    .HasColumnName("Green_Energy_Percentage")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.GridExitPoint).HasMaxLength(255);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InputType)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('Manual')");

                entity.Property(e => e.LeaseExpiry).HasColumnType("date");

                entity.Property(e => e.LeaseType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("('Unknown')");

                entity.Property(e => e.Losses).HasDefaultValueSql("((0))");

                entity.Property(e => e.MainSite).HasDefaultValueSql("((0))");

                entity.Property(e => e.Managed)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.MasterList)
                    .HasColumnName("Master_List")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.MasterListSiteType).HasMaxLength(255);

                entity.Property(e => e.MaxAq).HasColumnName("Max_AQ");

                entity.Property(e => e.Mdq).HasColumnName("MDQ");

                entity.Property(e => e.MeterAccessDetails)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Meter_Access_Details");

                entity.Property(e => e.MeterDataAgent)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Meter_Data_Agent");

                entity.Property(e => e.MeterNo).HasMaxLength(255);

                entity.Property(e => e.MeterType)
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('Unknown')");

                entity.Property(e => e.MinAq).HasColumnName("Min_AQ");

                entity.Property(e => e.NetworkCompany).HasMaxLength(255);

                entity.Property(e => e.NetworkId)
                    .HasMaxLength(200)
                    .HasColumnName("NetworkID");

                entity.Property(e => e.Nmi)
                    .HasMaxLength(255)
                    .HasColumnName("NMI");

                entity.Property(e => e.NonContestable).HasDefaultValueSql("((0))");

                entity.Property(e => e.OrderNumber).HasMaxLength(255);

                entity.Property(e => e.OrgId).HasColumnName("Org_ID");

                entity.Property(e => e.ParentCustomer).HasMaxLength(255);

                entity.Property(e => e.PowerFactor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Unknown')");

                entity.Property(e => e.RebatePc).HasDefaultValueSql("((0))");

                entity.Property(e => e.RedFlag).HasDefaultValueSql("((0))");

                entity.Property(e => e.Region)
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('Unknown')");

                entity.Property(e => e.Region2)
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('Unknown')");

                entity.Property(e => e.RegistryAddress)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Address");

                entity.Property(e => e.RegistryChannelCount).HasColumnName("Registry_Channel_Count");

                entity.Property(e => e.RegistryChargeableCapacity).HasColumnName("Registry_Chargeable_Capacity");

                entity.Property(e => e.RegistryGenerationCapacity).HasColumnName("Registry_Generation_Capacity");

                entity.Property(e => e.RegistryInstallDetails).HasColumnName("Registry_Install_Details");

                entity.Property(e => e.RegistryLossCat1)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Loss_Cat_1");

                entity.Property(e => e.RegistryLossCat2)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Loss_Cat_2");

                entity.Property(e => e.RegistryMep)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_MEP");

                entity.Property(e => e.RegistryMeterCat).HasColumnName("Registry_Meter_Cat");

                entity.Property(e => e.RegistryMeterMultiplier).HasColumnName("Registry_Meter_Multiplier");

                entity.Property(e => e.RegistryMeterType)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_MeterType");

                entity.Property(e => e.RegistryNetwork)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Network");

                entity.Property(e => e.RegistryPoc)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_POC");

                entity.Property(e => e.RegistryPriceCat)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Price_Cat");

                entity.Property(e => e.RegistryStatus)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Status");

                entity.Property(e => e.RegistryUnmeteredLoad)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Unmetered_Load");

                entity.Property(e => e.RetailId)
                    .HasMaxLength(255)
                    .HasColumnName("RetailID");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.RetailerSiteRef).HasMaxLength(200);

                entity.Property(e => e.SiteConsolidationFlag)
                    .HasMaxLength(255)
                    .HasColumnName("Site_Consolidation_Flag");

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteLocation).HasMaxLength(200);

                entity.Property(e => e.SiteLocationDd)
                    .HasMaxLength(255)
                    .HasColumnName("SiteLocationDD");

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus)
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('Active')");

                entity.Property(e => e.SiteType)
                    .HasMaxLength(255)
                    .HasDefaultValueSql("('Z')");

                entity.Property(e => e.SiteTypeCode)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('Z')");

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat")
                    .HasDefaultValueSql("(N'U')");

                entity.Property(e => e.SqMetresOccupied).HasDefaultValueSql("((0))");

                entity.Property(e => e.SqMetresTotal).HasDefaultValueSql("((0))");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.Property(e => e.SubClientCode).HasMaxLength(255);

                entity.Property(e => e.SysSitesTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_Sites_Timestamp");

                entity.Property(e => e.TaxClass)
                    .HasMaxLength(255)
                    .HasColumnName("Tax_Class")
                    .HasDefaultValueSql("('NZ_All')");

                entity.Property(e => e.TerminationFee)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Termination_fee");

                entity.Property(e => e.TimeAdded)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Transformer)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Unknown')");

                entity.Property(e => e.Vhaaddress1)
                    .HasMaxLength(255)
                    .HasColumnName("VHAAddress1");

                entity.Property(e => e.Vhaaddress2)
                    .HasMaxLength(255)
                    .HasColumnName("VHAAddress2");

                entity.Property(e => e.Vhaaddress3)
                    .HasMaxLength(255)
                    .HasColumnName("VHAAddress3");

                entity.HasOne(d => d.ClientCodeNavigation)
                    .WithMany(p => p.TSites)
                    .HasForeignKey(d => d.ClientCode)
                    .HasConstraintName("FK_tSites_2_tClients");

                entity.HasOne(d => d.RetailerCodeNavigation)
                    .WithMany(p => p.TSites)
                    .HasForeignKey(d => d.RetailerCode)
                    .HasConstraintName("FK_tSites_2_tRetailers");
            });

            modelBuilder.Entity<TSiteLocation>(entity =>
            {
                entity.HasKey(e => e.SiteLocation)
                    .HasName("tSiteLocations$PrimaryKey");

                entity.ToTable("tSiteLocations");

                entity.Property(e => e.SiteLocation).HasMaxLength(50);

                entity.Property(e => e.Region).HasMaxLength(255);

                entity.Property(e => e.SysSiteLocationsTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_SiteLocations_Timestamp");
            });

            modelBuilder.Entity<TSitesContract>(entity =>
            {
                entity.HasKey(e => e.SiteContractId)
                    .HasName("PK_SiteContract");

                entity.ToTable("tSites_Contracts");

                entity.Property(e => e.SiteContractId).HasColumnName("SiteContractID");

                entity.Property(e => e.ContractId).HasColumnName("ContractID");

                entity.HasOne(d => d.SiteNoNavigation)
                    .WithMany(p => p.TSitesContracts)
                    .HasForeignKey(d => d.SiteNo)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_tSites_Contracts_SiteNo");
            });

            modelBuilder.Entity<TSitesLookupCreateSite>(entity =>
            {
                entity.HasKey(e => e.CreateId);

                entity.ToTable("tSites_Lookup_Create_Sites");

                entity.Property(e => e.CreateId).HasColumnName("Create_ID");

                entity.Property(e => e.EdiAccountNo)
                    .HasMaxLength(200)
                    .HasColumnName("EDI_Account_No");

                entity.Property(e => e.EdiClientCode)
                    .HasMaxLength(10)
                    .HasColumnName("EDI_Client_Code");

                entity.Property(e => e.EdiComments).HasColumnName("EDI_Comments");

                entity.Property(e => e.EdiDateAdded)
                    .HasColumnType("date")
                    .HasColumnName("EDI_Date_Added");

                entity.Property(e => e.EdiIcp)
                    .HasMaxLength(200)
                    .HasColumnName("EDI_ICP");

                entity.Property(e => e.EdiId).HasColumnName("EDI_ID");

                entity.Property(e => e.EdiInvNumber)
                    .HasMaxLength(50)
                    .HasColumnName("EDI_Inv_Number");

                entity.Property(e => e.EdiNetwrokId)
                    .HasMaxLength(50)
                    .HasColumnName("EDI_NetwrokID");

                entity.Property(e => e.EdiRedFlag).HasColumnName("EDI_Red_Flag");

                entity.Property(e => e.EdiRetailerCode)
                    .HasMaxLength(20)
                    .HasColumnName("EDI_Retailer_Code");

                entity.Property(e => e.EdiSiteDesciption)
                    .HasMaxLength(255)
                    .HasColumnName("EDI_Site_Desciption");

                entity.Property(e => e.EdiSiteId).HasColumnName("EDI_Site_ID");

                entity.Property(e => e.EdiSiteName)
                    .HasMaxLength(255)
                    .HasColumnName("EDI_Site_Name");

                entity.Property(e => e.EdiSiteStatus)
                    .HasMaxLength(20)
                    .HasColumnName("EDI_Site_Status");

                entity.Property(e => e.EdiSiteSubType)
                    .HasMaxLength(200)
                    .HasColumnName("EDI_Site_Sub_Type");

                entity.Property(e => e.EdiSiteType)
                    .HasMaxLength(200)
                    .HasColumnName("EDI_Site_Type");

                entity.Property(e => e.EdiSpin).HasColumnName("EDI_SPIN");

                entity.Property(e => e.EdiTaxClass)
                    .HasMaxLength(20)
                    .HasColumnName("EDI_Tax_Class");

                entity.Property(e => e.EdiTimeAdded)
                    .HasColumnType("datetime")
                    .HasColumnName("EDI_Time_Added");

                entity.Property(e => e.SiteIdCreated).HasColumnName("Site_ID_Created");

                entity.Property(e => e.SitesMatchWarning)
                    .HasMaxLength(50)
                    .HasColumnName("Sites_Match_Warning");
            });

            modelBuilder.Entity<TSitesLookupIssue>(entity =>
            {
                entity.ToTable("tSites_lookup_Issues");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EdiId).HasColumnName("EDI_ID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");
            });

            modelBuilder.Entity<TSplitBatchNumber>(entity =>
            {
                entity.HasKey(e => e.BatchNo)
                    .HasName("PK_tSplit_Batch_Number_1");

                entity.ToTable("tSplit_Batch_Number");

                entity.Property(e => e.BatchNo).ValueGeneratedNever();

                entity.Property(e => e.UserName)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<TSplitInvoicesConfig>(entity =>
            {
                entity.HasKey(e => e.SplitId)
                    .HasName("tSplit_Invoices_Config_New$PrimaryKey");

                entity.ToTable("tSplit_Invoices_Config");

                entity.Property(e => e.SplitId).HasColumnName("Split_ID");

                entity.Property(e => e.SplitAccountPostFix).HasColumnName("Split_Account_PostFix");

                entity.Property(e => e.SplitChildSite).HasColumnName("Split_Child_Site");

                entity.Property(e => e.SplitClientCode)
                    .HasMaxLength(255)
                    .HasColumnName("Split_Client_Code");

                entity.Property(e => e.SplitParentSite).HasColumnName("Split_Parent_Site");

                entity.Property(e => e.SplitValue).HasColumnName("Split_Value");

                entity.Property(e => e.Status)
                    .HasMaxLength(10)
                    .HasDefaultValueSql("(N'Active')");
            });

            modelBuilder.Entity<TSummaryAccrual>(entity =>
            {
                entity.HasKey(e => e.SAccrualsId);

                entity.ToTable("tSummary_Accruals");

                entity.Property(e => e.SAccrualsId).HasColumnName("S_Accruals_ID");

                entity.Property(e => e.SAccrualConsumption).HasColumnName("S_Accrual_Consumption");

                entity.Property(e => e.SAccrualDollars)
                    .HasColumnType("money")
                    .HasColumnName("S_Accrual_Dollars");

                entity.Property(e => e.SBatchMonth)
                    .HasColumnType("date")
                    .HasColumnName("S_Batch_Month");

                entity.Property(e => e.SMonth).HasColumnName("S_Month");

                entity.Property(e => e.SSiteId).HasColumnName("S_SiteID");

                entity.Property(e => e.SYear).HasColumnName("S_Year");

                entity.Property(e => e.SysSummaryAccrualsTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_Summary_Accruals_Timestamp");
            });

            modelBuilder.Entity<TSummaryBudget>(entity =>
            {
                entity.HasKey(e => e.SDataId);

                entity.ToTable("tSummary_Budget");

                entity.Property(e => e.SDataId).HasColumnName("S_Data_ID");

                entity.Property(e => e.SBatchMonth)
                    .HasColumnType("date")
                    .HasColumnName("S_Batch_Month");

                entity.Property(e => e.SBudgetConsumption).HasColumnName("S_Budget_Consumption");

                entity.Property(e => e.SBudgetDollar)
                    .HasColumnType("money")
                    .HasColumnName("S_Budget_Dollar");

                entity.Property(e => e.SMonth).HasColumnName("S_Month");

                entity.Property(e => e.SSiteId).HasColumnName("S_SiteID");

                entity.Property(e => e.SYear).HasColumnName("s_Year");

                entity.Property(e => e.SysSummaryBudgetTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_Summary_Budget_Timestamp");
            });

            modelBuilder.Entity<TSummaryCo2Factor>(entity =>
            {
                entity.HasKey(e => e.SCo2Id);

                entity.ToTable("tSummary_CO2_Factors");

                entity.Property(e => e.SCo2Id).HasColumnName("S_CO2_ID");

                entity.Property(e => e.SBatchMonth)
                    .HasColumnType("date")
                    .HasColumnName("S_Batch_Month");

                entity.Property(e => e.SCo2Factor).HasColumnName("S_CO2_Factor");

                entity.Property(e => e.SCo2Region)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("S_CO2_Region");

                entity.Property(e => e.SMonth).HasColumnName("S_Month");

                entity.Property(e => e.SUtilityCat)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("S_Utility_Cat");

                entity.Property(e => e.SUtilityClass)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("S_Utility_Class");

                entity.Property(e => e.SUtilitySubCat)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("S_Utility_Sub_Cat");

                entity.Property(e => e.SYear).HasColumnName("S_Year");

                entity.Property(e => e.SysSummaryCo2FactorsTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_Summary_CO2_Factors_Timestamp");
            });

            modelBuilder.Entity<TSummaryConfig>(entity =>
            {
                entity.HasKey(e => e.SConfigId);

                entity.ToTable("tSummary_Config");

                entity.Property(e => e.SConfigId).HasColumnName("s_Config_ID");

                entity.Property(e => e.SAccrualsAuto).HasColumnName("s_Accruals_Auto");

                entity.Property(e => e.SBudgetAuto).HasColumnName("s_Budget_Auto");

                entity.Property(e => e.SFyeStartMonth).HasColumnName("s_FYE_Start_Month");

                entity.Property(e => e.STrendAuto).HasColumnName("s_Trend_Auto");

                entity.Property(e => e.SZeroCredits).HasColumnName("s_Zero_Credits");
            });

            modelBuilder.Entity<TSummaryDatum>(entity =>
            {
                entity.HasKey(e => e.SDataId);

                entity.ToTable("tSummary_Data");

                entity.Property(e => e.SDataId).HasColumnName("S_Data_ID");

                entity.Property(e => e.SAccountNo)
                    .HasMaxLength(500)
                    .HasColumnName("s_Account_No");

                entity.Property(e => e.SAccrualConsumption)
                    .HasColumnName("S_Accrual_Consumption")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SAccrualDollars)
                    .HasColumnName("S_Accrual_Dollars")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SActivity)
                    .HasMaxLength(500)
                    .HasColumnName("s_Activity");

                entity.Property(e => e.SActualConsumption)
                    .HasColumnName("S_Actual_Consumption")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SActualDollars)
                    .HasColumnName("S_Actual_Dollars")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SBatchMonth)
                    .HasColumnType("date")
                    .HasColumnName("S_Batch_Month");

                entity.Property(e => e.SBudgetConsumption)
                    .HasColumnName("S_Budget_Consumption")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SBudgetDollar)
                    .HasColumnName("S_Budget_Dollar")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SClientCode)
                    .HasMaxLength(50)
                    .HasColumnName("s_Client_Code");

                entity.Property(e => e.SClientName)
                    .HasMaxLength(100)
                    .HasColumnName("s_Client_Name");

                entity.Property(e => e.SClientReferance)
                    .HasMaxLength(500)
                    .HasColumnName("s_Client_Referance");

                entity.Property(e => e.SCo2)
                    .HasColumnName("S_Co2")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SCo2Act).HasColumnName("S_Co2_Act");

                entity.Property(e => e.SCo2Code)
                    .HasMaxLength(200)
                    .HasColumnName("s_CO2_Code");

                entity.Property(e => e.SCo2Env).HasColumnName("S_Co2_Env");

                entity.Property(e => e.SCo2Factor).HasColumnName("s_CO2_Factor");

                entity.Property(e => e.SEnvConsumption)
                    .HasColumnName("S_Env_Consumption")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SEnvDollars)
                    .HasColumnName("S_Env_Dollars")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SFilter1)
                    .HasMaxLength(500)
                    .HasColumnName("sFilter_1");

                entity.Property(e => e.SFilter10)
                    .HasMaxLength(500)
                    .HasColumnName("sFilter_10");

                entity.Property(e => e.SFilter2)
                    .HasMaxLength(500)
                    .HasColumnName("sFilter_2");

                entity.Property(e => e.SFilter3)
                    .HasMaxLength(500)
                    .HasColumnName("sFilter_3");

                entity.Property(e => e.SFilter4)
                    .HasMaxLength(500)
                    .HasColumnName("sFilter_4");

                entity.Property(e => e.SFilter5)
                    .HasMaxLength(500)
                    .HasColumnName("sFilter_5");

                entity.Property(e => e.SFilter6)
                    .HasMaxLength(500)
                    .HasColumnName("sFilter_6");

                entity.Property(e => e.SFilter7)
                    .HasMaxLength(500)
                    .HasColumnName("sFilter_7");

                entity.Property(e => e.SFilter8)
                    .HasMaxLength(500)
                    .HasColumnName("sFilter_8");

                entity.Property(e => e.SFilter9)
                    .HasMaxLength(500)
                    .HasColumnName("sFilter_9");

                entity.Property(e => e.SFinancialYear).HasColumnName("s_Financial_Year");

                entity.Property(e => e.SMonth).HasColumnName("S_Month");

                entity.Property(e => e.SMonthYear)
                    .HasMaxLength(50)
                    .HasColumnName("s_Month_Year");

                entity.Property(e => e.SRetailerCode)
                    .HasMaxLength(100)
                    .HasColumnName("s_RetailerCode");

                entity.Property(e => e.SScope).HasColumnName("s_Scope");

                entity.Property(e => e.SSiteEui12MonthConsumption)
                    .HasColumnName("S_Site_EUI_12_Month_Consumption")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SSiteIcp)
                    .HasMaxLength(500)
                    .HasColumnName("s_Site_ICP");

                entity.Property(e => e.SSiteId).HasColumnName("S_SiteID");

                entity.Property(e => e.SSiteName)
                    .HasMaxLength(500)
                    .HasColumnName("s_Site_Name");

                entity.Property(e => e.SSiteStatus)
                    .HasMaxLength(500)
                    .HasColumnName("s_Site_Status");

                entity.Property(e => e.SSource)
                    .HasMaxLength(500)
                    .HasColumnName("s_Source");

                entity.Property(e => e.SSquOcc)
                    .HasColumnName("s_SQU_OCC")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SSquTotal)
                    .HasColumnName("s_SQU_Total")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.STrendConsumption)
                    .HasColumnName("s_Trend_Consumption")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.STrendDollars)
                    .HasColumnName("s_Trend_Dollars")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SUnitType)
                    .HasMaxLength(50)
                    .HasColumnName("S_Unit_Type");

                entity.Property(e => e.SUtilityType)
                    .HasMaxLength(500)
                    .HasColumnName("s_Utility_Type");

                entity.Property(e => e.SYear).HasColumnName("S_Year");

                entity.Property(e => e.SysSummaryDataTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_Summary_Data_Timestamp");
            });

            modelBuilder.Entity<TSummaryDatumDatum>(entity =>
            {
                entity.HasKey(e => e.SDatumId);

                entity.ToTable("tSummary_Datum_Data");

                entity.Property(e => e.SDatumId).HasColumnName("S_Datum_ID");

                entity.Property(e => e.SBatchMonth)
                    .HasColumnType("date")
                    .HasColumnName("S_Batch_Month");

                entity.Property(e => e.SDatumConsumption).HasColumnName("S_Datum_Consumption");

                entity.Property(e => e.SDatumDollar)
                    .HasColumnType("money")
                    .HasColumnName("S_Datum_Dollar");

                entity.Property(e => e.SMonth).HasColumnName("S_Month");

                entity.Property(e => e.SSiteId).HasColumnName("S_SiteID");

                entity.Property(e => e.SUnitType)
                    .HasMaxLength(10)
                    .HasColumnName("S_Unit_Type")
                    .IsFixedLength(true);

                entity.Property(e => e.SYear).HasColumnName("S_Year");

                entity.Property(e => e.SysTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_Timestamp");
            });

            modelBuilder.Entity<TSummaryEui>(entity =>
            {
                entity.HasKey(e => e.SEuiId);

                entity.ToTable("tSummary_EUI");

                entity.Property(e => e.SEuiId).HasColumnName("s_EUI_ID");

                entity.Property(e => e.SEuiFy).HasColumnName("s_EUI_FY");

                entity.Property(e => e.SEuiValue).HasColumnName("s_EUI_Value");

                entity.Property(e => e.SSiteId).HasColumnName("s_Site_ID");

                entity.Property(e => e.SSquareMeters).HasColumnName("s_Square_Meters");

                entity.Property(e => e.STotalAnnualConsumption).HasColumnName("s_Total_Annual_Consumption");
            });

            modelBuilder.Entity<TSummaryFiltersBySite>(entity =>
            {
                entity.HasKey(e => e.SFiltersId);

                entity.ToTable("tSummary_Filters_By_Site");

                entity.Property(e => e.SFiltersId).HasColumnName("s_Filters_ID");

                entity.Property(e => e.SFilter1)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("s_Filter_1");

                entity.Property(e => e.SFilter10).HasColumnName("s_Filter_10");

                entity.Property(e => e.SFilter2)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("s_Filter_2");

                entity.Property(e => e.SFilter3)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("s_Filter_3");

                entity.Property(e => e.SFilter4)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("s_Filter_4");

                entity.Property(e => e.SFilter5)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("s_Filter_5");

                entity.Property(e => e.SFilter6)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("s_Filter_6");

                entity.Property(e => e.SFilter7)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("s_Filter_7");

                entity.Property(e => e.SFilter8)
                    .HasColumnType("date")
                    .HasColumnName("s_Filter_8");

                entity.Property(e => e.SFilter9).HasColumnName("s_Filter_9");
            });

            modelBuilder.Entity<TSummaryTrend>(entity =>
            {
                entity.HasKey(e => e.STrendId);

                entity.ToTable("tSummary_Trend");

                entity.Property(e => e.STrendId).HasColumnName("S_Trend_ID");

                entity.Property(e => e.SBatchMonth)
                    .HasColumnType("date")
                    .HasColumnName("S_Batch_Month");

                entity.Property(e => e.SMonth).HasColumnName("S_Month");

                entity.Property(e => e.SSiteId).HasColumnName("S_SiteID");

                entity.Property(e => e.STrendConsumption).HasColumnName("S_Trend_Consumption");

                entity.Property(e => e.STrendDollars)
                    .HasColumnType("money")
                    .HasColumnName("S_Trend_Dollars");

                entity.Property(e => e.SYear).HasColumnName("S_Year");

                entity.Property(e => e.SysSummaryTrendTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_Summary_Trend_Timestamp");
            });

            modelBuilder.Entity<TTariff>(entity =>
            {
                entity.HasKey(e => new { e.SiteNo, e.RateId, e.TariffDescription })
                    .HasName("pk_Tariffs");

                entity.ToTable("tTariffs");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.TariffDescription).HasMaxLength(255);

                entity.Property(e => e.Comments).HasMaxLength(255);

                entity.Property(e => e.CurrentTariff).HasDefaultValueSql("((0))");

                entity.Property(e => e.DateCreated)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Gst)
                    .IsRequired()
                    .HasColumnName("GST")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Gstrate).HasColumnName("GSTRate");

                entity.Property(e => e.InvoiceType).HasMaxLength(255);

                entity.Property(e => e.MeterNo).HasMaxLength(50);

                entity.Property(e => e.Multiplier).HasDefaultValueSql("((1))");

                entity.Property(e => e.OrgId).HasColumnName("Org_ID");

                entity.Property(e => e.Ppd)
                    .IsRequired()
                    .HasColumnName("PPD")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RateOverride).HasDefaultValueSql("((0))");

                entity.Property(e => e.Status)
                    .HasMaxLength(25)
                    .HasDefaultValueSql("('Active')");

                entity.Property(e => e.SupplierTariffCode).HasMaxLength(255);

                entity.Property(e => e.SysTariffsTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_Tariffs_Timestamp");

                entity.Property(e => e.TariffId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("TariffID");

                entity.Property(e => e.TariffSort).HasDefaultValueSql("((0))");

                entity.Property(e => e.UnitCost).HasDefaultValueSql("((0))");

                entity.Property(e => e.UnitMultiplierType)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasDefaultValueSql("('None')");
            });

            modelBuilder.Entity<TTariffsLookupCreateRate>(entity =>
            {
                entity.HasKey(e => e.TariffsEdiId);

                entity.ToTable("tTariffs_Lookup_Create_Rates");

                entity.Property(e => e.TariffsEdiId).HasColumnName("Tariffs_EDI_ID");

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.InvoiceLinesUnitMultiplier).HasColumnName("InvoiceLines_UnitMultiplier");

                entity.Property(e => e.InvoiceType).HasMaxLength(255);

                entity.Property(e => e.LinesUnitCost).HasColumnName("Lines_UnitCost");

                entity.Property(e => e.Ppd).HasColumnName("PPD");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.Status)
                    .HasMaxLength(25)
                    .HasDefaultValueSql("(N'Active')");

                entity.Property(e => e.SupplierTariffCode).HasMaxLength(255);

                entity.Property(e => e.TariffsUnitMultiplier).HasColumnName("Tariffs_UnitMultiplier");

                entity.Property(e => e.TariffsUnitMultiplierType)
                    .HasMaxLength(255)
                    .HasColumnName("Tariffs_UnitMultiplierType");

                entity.Property(e => e.UnitCost).HasColumnName("Unit_Cost");

                entity.Property(e => e.UnitType).HasMaxLength(50);
            });

            modelBuilder.Entity<TTempEstimateCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tTemp_Estimate_Counts");

                entity.Property(e => e.ActualCount).HasColumnName("Actual_Count");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.ReadType)
                    .IsRequired()
                    .HasMaxLength(23)
                    .IsUnicode(false);

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<TTempEstimateThreeInARow>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tTemp_Estimate_Three_In_A_Row");

                entity.Property(e => e.CountOfActuals).HasColumnName("Count_Of_Actuals");

                entity.Property(e => e.InvoiceCount).HasColumnName("Invoice_Count");
            });

            modelBuilder.Entity<TTempNoDaysMatchCalculatesDay>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tTemp_No_Days_Match_Calculates_Days");

                entity.Property(e => e.CorrectUnits).HasColumnName("Correct Units");

                entity.Property(e => e.DaysWhenUnitsDevidedByMultiplier).HasColumnName("Days_When_Units_Devided_By_Multiplier");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitType).HasMaxLength(50);
            });

            modelBuilder.Entity<TVBvcDuplicateSupplierInvNumberBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tV_BVC_Duplicate_Supplier_InvNumber_Base");

                entity.Property(e => e.Cnt).HasColumnName("cnt");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<TVBvcExpectedRaw>(entity =>
            {
                entity.HasKey(e => e.BvcId);

                entity.ToTable("tV_BVC_ExpectedRaw");

                entity.Property(e => e.BvcId).HasColumnName("BVC_ID");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.HistInvEnd).HasColumnType("date");

                entity.Property(e => e.HistInvStart).HasColumnType("date");

                entity.Property(e => e.HistInvToPay).HasColumnType("money");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteNoInvoices).HasColumnName("SiteNo_Invoices");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitTotal).HasColumnName("Unit_Total");
            });

            modelBuilder.Entity<TVBvcExpectedRawBase>(entity =>
            {
                entity.HasKey(e => e.BvcId);

                entity.ToTable("tV_BVC_ExpectedRaw_Base");

                entity.Property(e => e.BvcId).HasColumnName("BVC_ID");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitTotal).HasColumnName("Unit_Total");
            });

            modelBuilder.Entity<TempInvoice>(entity =>
            {
                entity.HasKey(e => e.SpinvNumber)
                    .HasName("PK_tTempInvoices");

                entity.ToTable("_tempInvoices");

                entity.Property(e => e.SpinvNumber)
                    .ValueGeneratedNever()
                    .HasColumnName("SPInvNumber");

                entity.Property(e => e.AcadjFactor).HasColumnName("ACAdjFactor");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ArchiveDate).HasColumnType("date");

                entity.Property(e => e.FixedKva).HasColumnName("FixedKVA");

                entity.Property(e => e.InvAmountSoa).HasColumnName("InvAmountSOA");

                entity.Property(e => e.InvArchived).HasColumnName("Inv_Archived");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvEnteredDate).HasColumnType("date");

                entity.Property(e => e.InvGst).HasColumnName("InvGST");

                entity.Property(e => e.InvLinesArchived).HasColumnName("Inv_Lines_Archived");

                entity.Property(e => e.InvNoPayfile).HasColumnName("InvNo_Payfile");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvOpenBalType).HasMaxLength(10);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.Obnotes)
                    .HasMaxLength(255)
                    .HasColumnName("OBNotes");

                entity.Property(e => e.OrgId).HasColumnName("Org_ID");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumberOrig).HasColumnName("SPInvNumberOrig");

                entity.Property(e => e.StatementNumber).HasMaxLength(255);

                entity.Property(e => e.SysInvoicesTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_Invoices_Timestamp");

                entity.Property(e => e.UnitTotal).HasColumnName("Unit_Total");
            });

            modelBuilder.Entity<TempInvoiceLine>(entity =>
            {
                entity.HasKey(e => e.InvLineNo)
                    .HasName("tempInvoiceLines$PrimaryKey");

                entity.ToTable("_TempInvoiceLines");

                entity.Property(e => e.InvLineNo).ValueGeneratedNever();

                entity.Property(e => e.ArchiveDate).HasColumnType("date");

                entity.Property(e => e.CostCentreId).HasColumnName("Cost_Centre_ID");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.Gstrate).HasColumnName("GSTRate");

                entity.Property(e => e.LinesReference).HasMaxLength(255);

                entity.Property(e => e.PriceType).HasMaxLength(1);

                entity.Property(e => e.ProductId)
                    .HasMaxLength(1)
                    .HasColumnName("ProductID");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SpinvNumberOrig).HasColumnName("SPInvNumberOrig");

                entity.Property(e => e.SysInvoiceLinesTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_InvoiceLines_Timestamp");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UtilityCode)
                    .HasMaxLength(255)
                    .HasColumnName("Utility_Code");
            });

            modelBuilder.Entity<VAnnualConsumption1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_AnnualConsumption_1");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.GridExitPoint).HasMaxLength(255);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvoiceKwh).HasColumnName("InvoiceKWH");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.Product).HasMaxLength(50);

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.ReadyForUpload).HasColumnName("Ready_For_Upload");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VAnnualConsumptionFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Annual_Consumption_Final");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ActualKwh).HasColumnName("ActualKWH");

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.GridExitPoint).HasMaxLength(255);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.Product).HasMaxLength(50);

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);
            });

            modelBuilder.Entity<VBatchesCustomerInvNo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Batches_CustomerInvNo");

                entity.Property(e => e.FirstOfCustomerInvNo).HasMaxLength(20);
            });

            modelBuilder.Entity<VBpayCodeCurrentClient>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BPay_Code_Current_Client");

                entity.Property(e => e.BpayCode)
                    .HasMaxLength(250)
                    .HasColumnName("BPayCode");

                entity.Property(e => e.BpayId).HasColumnName("BPay_ID");

                entity.Property(e => e.ClientCode).HasMaxLength(50);

                entity.Property(e => e.RetailerCode).HasMaxLength(20);
            });

            modelBuilder.Entity<VBvCalcInvoiceFunctionLinesSumGst>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Calc_Invoice_Function_Lines_Sum_GST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumInvLineTotalGst).HasColumnName("Sum_InvLineTotal_GST");
            });

            modelBuilder.Entity<VBvCalcInvoiceFunctionLinesSumGstBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Calc_Invoice_Function_Lines_Sum_GST_Base");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumInvLineTotalGst).HasColumnName("Sum_InvLineTotal_GST");
            });

            modelBuilder.Entity<VBvCalcInvoiceFunctionLinesSumPpd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Calc_Invoice_Function_Lines_Sum_PPD");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumInvLineTotalPpd).HasColumnName("Sum_InvLineTotal_PPD");
            });

            modelBuilder.Entity<VBvCalcInvoiceFunctionLinesSumPpdBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Calc_Invoice_Function_Lines_Sum_PPD_Base");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumInvLineTotalPpd).HasColumnName("Sum_InvLineTotal_PPD");
            });

            modelBuilder.Entity<VBvCalcInvoiceFunctionLinesSumPpdGst>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Calc_Invoice_Function_Lines_Sum_PPD_GST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumInvLineTotalPpdGst).HasColumnName("Sum_InvLineTotal_PPD_GST");
            });

            modelBuilder.Entity<VBvCalcInvoiceFunctionLinesSumPpdGstBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Calc_Invoice_Function_Lines_Sum_PPD_GST_Base");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumInvLineTotalPpdGst).HasColumnName("Sum_InvLineTotal_PPD_GST");
            });

            modelBuilder.Entity<VBvCalcInvoiceFunctionSelect>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Calc_Invoice_Function_Select");

                entity.Property(e => e.CalcInvAmount)
                    .HasColumnType("money")
                    .HasColumnName("Calc_InvAmount");

                entity.Property(e => e.CalcInvAmountCalc)
                    .HasColumnType("money")
                    .HasColumnName("Calc_InvAmountCalc");

                entity.Property(e => e.CalcInvAmountExGst)
                    .HasColumnType("money")
                    .HasColumnName("Calc_InvAmountExGST");

                entity.Property(e => e.CalcInvAmountGst)
                    .HasColumnType("money")
                    .HasColumnName("Calc_InvAmountGST");

                entity.Property(e => e.CalcInvAmountToPay)
                    .HasColumnType("money")
                    .HasColumnName("Calc_InvAmountToPay");

                entity.Property(e => e.CalcInvAmountToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("Calc_InvAmountToPayExGST");

                entity.Property(e => e.CalcInvAmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("Calc_InvAmountToPayGST");

                entity.Property(e => e.CalcInvDiscount).HasColumnName("Calc_InvDiscount");

                entity.Property(e => e.CalcInvDiscountExGst)
                    .HasColumnType("money")
                    .HasColumnName("Calc_InvDiscountExGST");

                entity.Property(e => e.CalcInvDiscountGst)
                    .HasColumnType("money")
                    .HasColumnName("Calc_InvDiscountGST");

                entity.Property(e => e.CalcInvGst)
                    .HasColumnType("money")
                    .HasColumnName("Calc_InvGST");

                entity.Property(e => e.CalcInvSubTotal).HasColumnName("Calc_InvSubTotal");

                entity.Property(e => e.CalcInvTotal)
                    .HasColumnType("money")
                    .HasColumnName("Calc_InvTotal");

                entity.Property(e => e.CalcOpeningBalanceExGst)
                    .HasColumnType("money")
                    .HasColumnName("Calc_OpeningBalanceExGST");

                entity.Property(e => e.CalcOpeningBalanceGst)
                    .HasColumnType("money")
                    .HasColumnName("Calc_OpeningBalanceGST");

                entity.Property(e => e.ClientCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvCalcInvoiceFunctionSelectBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Calc_Invoice_Function_Select_Base");

                entity.Property(e => e.BInvDiscountExGst).HasColumnName("B_InvDiscountExGST");

                entity.Property(e => e.BInvDiscountGst).HasColumnName("B_InvDiscountGST");

                entity.Property(e => e.BInvGst).HasColumnName("B_InvGST");

                entity.Property(e => e.BInvTotal).HasColumnName("B_InvTotal");

                entity.Property(e => e.BOpeningBalanceExGst).HasColumnName("B_OpeningBalanceExGST");

                entity.Property(e => e.BOpeningBalanceGst).HasColumnName("B_OpeningBalanceGST");

                entity.Property(e => e.ClientCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.IgnoreSiteDiscountPc).HasColumnName("Ignore_Site_DiscountPC");

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvCalcInvoiceFuntionLinesSum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Calc_Invoice_Funtion_Lines_Sum");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumInvLineTotal).HasColumnName("Sum_InvLineTotal");
            });

            modelBuilder.Entity<VBvCheckCalConsumptionPre1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_Cal_Consumption_pre1");

                entity.Property(e => e.HeaderUnits).HasColumnName("Header_Units");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Comments");

                entity.Property(e => e.LinesUnits).HasColumnName("Lines_Units");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");
            });

            modelBuilder.Entity<VBvCheckCalConsumptionPre2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_Cal_Consumption_pre2");

                entity.Property(e => e.HeaderUnits).HasColumnName("Header_Units");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Comments");

                entity.Property(e => e.LinesUnits).HasColumnName("Lines_Units");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvCheckConsumptionCostBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_Consumption_Cost_Base");

                entity.Property(e => e.AmountExGst).HasColumnName("AmountExGST");

                entity.Property(e => e.CalcUnits).HasColumnName("Calc_Units");

                entity.Property(e => e.ConsumptionUnitsCents).HasColumnName("Consumption_Units_Cents");

                entity.Property(e => e.InvAmountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountExGST");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TaxClass)
                    .HasMaxLength(255)
                    .HasColumnName("Tax_Class");

                entity.Property(e => e.TaxRate).HasColumnName("Tax_Rate");
            });

            modelBuilder.Entity<VBvCheckExpectedRawBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_Check_ExpectedRaw_Base");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.SpinvNumber)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitTotal).HasColumnName("Unit_Total");
            });

            modelBuilder.Entity<VBvCheckGsttickmismatchTTariffstInvoicessub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_GSTtickmismatch_tTariffstInvoicessub");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.GstInInvoiceLines).HasColumnName("GST in InvoiceLines");

                entity.Property(e => e.GstInTTariffs).HasColumnName("GST in tTariffs");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");
            });

            modelBuilder.Entity<VBvCheckHasActualRead>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_Has_Actual_Read");

                entity.Property(e => e.EsSiteId).HasColumnName("ES_SiteID");
            });

            modelBuilder.Entity<VBvCheckHeaderConsumptionIsZero1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_Header_Consumption_Is_Zero1");

                entity.Property(e => e.ConsumptionExpected).HasColumnName("Consumption_Expected");

                entity.Property(e => e.DoLinesHaveRateUnitCodedConsumption).HasColumnName("Do_Lines_Have_Rate/Unit_Coded_Consumption");

                entity.Property(e => e.HeaderUnits).HasColumnName("Header_Units");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Comments");

                entity.Property(e => e.LinesUnits).HasColumnName("Lines_Units");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.ProductSubCatCode)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat_Code");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvCheckInvoiceNoDaysHeaderVsLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_Invoice_No_Days_HeaderVsLines");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CorrectUnits).HasColumnName("Correct Units");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumOfDaysWhenUnitsDevidedByMultiplier).HasColumnName("SumOfDays_When_Units_Devided_By_Multiplier");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VBvCheckInvoiceNoDaysHeaderVsLines1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_Invoice_No_Days_HeaderVsLines1");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CorrectUnits).HasColumnName("Correct Units");

                entity.Property(e => e.CountSpin).HasColumnName("CountSPIN");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VBvCheckInvoiceNoDaysSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_Invoice_No_Days_sub");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CorrectUnits).HasColumnName("Correct Units");

                entity.Property(e => e.DaysWhenUnitsDevidedByMultiplier).HasColumnName("Days_When_Units_Devided_By_Multiplier");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VBvCheckInvoiceNoDaysSumUnitsUsed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_Invoice_No_Days_SumUnitsUsed");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VBvCheckInvoiceTest1Sub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_Invoice_Test_1_Sub");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.RsumLines).HasColumnName("RSumLines");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvCheckInvoicesHistory2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_InvoicesHistory2");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Days).HasColumnName("#Days");

                entity.Property(e => e.DiscountInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Discount (Incl GST)");

                entity.Property(e => e.Entity).HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmountInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Inv Amount (incl GST)");

                entity.Property(e => e.InvArchived).HasColumnName("Inv_Archived");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvSubTotalInclGst)
                    .HasColumnType("money")
                    .HasColumnName("InvSubTotal (Incl GST)");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.InvoiceAmountToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("Invoice Amount To Pay (ex GST)");

                entity.Property(e => e.InvoiceAmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("Invoice Amount To Pay GST");

                entity.Property(e => e.InvoiceAmountToPayInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Invoice Amount To Pay (incl GST)");

                entity.Property(e => e.Notes).HasMaxLength(255);

                entity.Property(e => e.Ob)
                    .HasColumnType("money")
                    .HasColumnName("OB");

                entity.Property(e => e.ObType)
                    .HasMaxLength(10)
                    .HasColumnName("OB Type");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.SupplierInvNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Supplier Inv No");

                entity.Property(e => e.UnitsDay).HasColumnName("Units/Day");

                entity.Property(e => e.ZeroDollars).HasColumnName("Zero Dollars");
            });

            modelBuilder.Entity<VBvCheckKgVsCalculatedKWhPre>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_Kg_Vs_Calculated_kWh_pre");

                entity.Property(e => e.CalculatedKWhPre).HasColumnName("Calculated kWh pre");

                entity.Property(e => e.HeaderKWh).HasColumnName("Header kWh");

                entity.Property(e => e.KWhDifference).HasColumnName("kWh difference");

                entity.Property(e => e.LinesKg).HasColumnName("Lines kg");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UtilityCode)
                    .HasMaxLength(255)
                    .HasColumnName("Utility_Code");
            });

            modelBuilder.Entity<VBvCheckKwhSum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_KWH_Sum");

                entity.Property(e => e.HeaderKWh).HasColumnName("Header_kWh");

                entity.Property(e => e.RateCategory)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VBvCheckLastInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_Last_Invoice");

                entity.Property(e => e.MaxOfInvEndDate).HasColumnType("date");
            });

            modelBuilder.Entity<VBvCheckLastInvoiceWithSpin>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_Last_Invoice_With_SPIN");

                entity.Property(e => e.MaxOfInvEndDate).HasColumnType("date");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvCheckLineTotalNotBalancing>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_LineTotalNotBalancing");

                entity.Property(e => e.CalculatedLineTotal).HasColumnName("Calculated line total");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.LineDescription)
                    .HasMaxLength(250)
                    .HasColumnName("Line Description");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(1)
                    .HasColumnName("ProductID");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.Spil).HasColumnName("SPIL");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.SpinDays).HasColumnName("SPIN Days");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UtilityCode)
                    .HasMaxLength(255)
                    .HasColumnName("Utility_Code");
            });

            modelBuilder.Entity<VBvCheckMjSum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_MJ_Sum");

                entity.Property(e => e.RateCategory)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VBvCheckMultipleInvoiceTestTce>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_Multiple_Invoice_Test_TCE");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvStartDate).HasColumnType("date");
            });

            modelBuilder.Entity<VBvCheckMultipleInvoicesBySiteNo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_Multiple_Invoices_by_SiteNo");
            });

            modelBuilder.Entity<VBvCheckMultiplierNotMatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_Multiplier_Not_Match");

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Comments");

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spil).HasColumnName("SPIL");

                entity.Property(e => e.SpilMultiplier).HasColumnName("SPIL Multiplier");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.TariffDescription)
                    .HasMaxLength(250)
                    .HasColumnName("Tariff Description");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.TariffMultiplier).HasColumnName("Tariff Multiplier");
            });

            modelBuilder.Entity<VBvCheckMultiplierNotMatchPre>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_Multiplier_Not_Match_pre");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");
            });

            modelBuilder.Entity<VBvCheckPpdexGstcheck>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_PPDexGSTcheck");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.CalculatedPpdexGst).HasColumnName("Calculated PPDexGST");

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvoicePpdexGst).HasColumnName("InvoicePPDexGST");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteTypeCode)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvCheckPpdexGstcheckSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_PPDexGSTcheck_sub");

                entity.Property(e => e.InvoicePpdexGst).HasColumnName("InvoicePPDexGST");

                entity.Property(e => e.Ppd).HasColumnName("PPD");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvCheckPpdexGstcheckSub1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_PPDexGSTcheck_sub1");

                entity.Property(e => e.PpdexGst).HasColumnName("PPDexGST");
            });

            modelBuilder.Entity<VBvCheckPpdtickmismatchTTariffstInvoicessub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_PPDtickmismatch_tTariffstInvoicessub");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.PpdInInvoiceLines).HasColumnName("PPD in InvoiceLines");

                entity.Property(e => e.PpdInTTariffs).HasColumnName("PPD in tTariffs");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");
            });

            modelBuilder.Entity<VBvCheckReadingGapsSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_ReadingGaps_sub");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.MeterNo).HasMaxLength(255);

                entity.Property(e => e.ProductId)
                    .HasMaxLength(1)
                    .HasColumnName("ProductID");

                entity.Property(e => e.Rank1).HasColumnName("rank1");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.RowNum).HasColumnName("row_Num");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VBvCheckReadingGapsSubOld>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_ReadingGaps_sub_old");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.MeterNo).HasMaxLength(255);

                entity.Property(e => e.ProductId)
                    .HasMaxLength(1)
                    .HasColumnName("ProductID");

                entity.Property(e => e.Rank1).HasColumnName("rank1");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.RowNum).HasColumnName("row_Num");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VBvCheckSitesCeasedFinalInvoiceSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_SitesCeased_FinalInvoice_sub");

                entity.Property(e => e.MaxOfInvEndDate).HasColumnType("date");
            });

            modelBuilder.Entity<VBvCheckSitesInvByBatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_Sites_Inv_By_Batch");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvCheckSolarRebates1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_Solar_Rebates1");
            });

            modelBuilder.Entity<VBvCheckSolarRebates2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_Solar_Rebates2");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvCheckSolarRebates3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_Solar_Rebates3");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvCheckSumInvTotalsValidation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_SumInvTotalsValidation");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.AmountToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("AmountToPayExGST");

                entity.Property(e => e.AmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("AmountToPayGST");

                entity.Property(e => e.AmountToPayInclGst)
                    .HasColumnType("money")
                    .HasColumnName("AmountToPayInclGST");

                entity.Property(e => e.AmtToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("AmtToPayExGST");

                entity.Property(e => e.AmtToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("AmtToPayGST");

                entity.Property(e => e.AmtToPayInclGst)
                    .HasColumnType("money")
                    .HasColumnName("AmtToPayInclGST");

                entity.Property(e => e.CurrentChargesExGst)
                    .HasColumnType("money")
                    .HasColumnName("CurrentChargesExGST");

                entity.Property(e => e.CurrentChargesGst)
                    .HasColumnType("money")
                    .HasColumnName("CurrentChargesGST");

                entity.Property(e => e.CurrentChargesInclGst)
                    .HasColumnType("money")
                    .HasColumnName("CurrentChargesInclGST");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvDiscountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountExGST");

                entity.Property(e => e.InvDiscountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountGST");

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.LineTotalExGst)
                    .HasColumnType("money")
                    .HasColumnName("LineTotal ExGST");

                entity.Property(e => e.LineTotalGst)
                    .HasColumnType("money")
                    .HasColumnName("LineTotalGST");

                entity.Property(e => e.LineTotalInclGst)
                    .HasColumnType("money")
                    .HasColumnName("LineTotalInclGST");

                entity.Property(e => e.ObExGst)
                    .HasColumnType("money")
                    .HasColumnName("OB ExGST");

                entity.Property(e => e.ObGst)
                    .HasColumnType("money")
                    .HasColumnName("OB GST");

                entity.Property(e => e.ObInclGst)
                    .HasColumnType("money")
                    .HasColumnName("OB InclGST");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TaxRate).HasColumnName("Tax_Rate");
            });

            modelBuilder.Entity<VBvCheckSumInvTotalsValidationTest13>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_SumInvTotalsValidation_Test13");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test13AmtToPayInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Test 13 - AmtToPayInclGST");
            });

            modelBuilder.Entity<VBvCheckSumInvTotalsValidationTest1sub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_SumInvTotalsValidation_Test1sub");

                entity.Property(e => e.ObExGst)
                    .HasColumnType("money")
                    .HasColumnName("OB ExGST");

                entity.Property(e => e.ObGst)
                    .HasColumnType("money")
                    .HasColumnName("OB GST");

                entity.Property(e => e.ObInclGst)
                    .HasColumnType("money")
                    .HasColumnName("OB InclGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Value1)
                    .HasColumnType("numeric(20, 4)")
                    .HasColumnName("Value 1");

                entity.Property(e => e.Value2)
                    .HasColumnType("numeric(20, 4)")
                    .HasColumnName("Value 2");

                entity.Property(e => e.Value3)
                    .HasColumnType("money")
                    .HasColumnName("Value 3");
            });

            modelBuilder.Entity<VBvCheckSumInvTotalsValidationTest2sub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_SumInvTotalsValidation_Test2sub");

                entity.Property(e => e.ObExGst).HasColumnName("OB ExGST");

                entity.Property(e => e.ObGst).HasColumnName("OB GST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TaxRate).HasColumnName("Tax_Rate");

                entity.Property(e => e.Value1).HasColumnName("Value 1");

                entity.Property(e => e.Value2).HasColumnName("Value 2");
            });

            modelBuilder.Entity<VBvCheckSumInvTotalsValidationTest3sub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_SumInvTotalsValidation_Test3sub");

                entity.Property(e => e.LineTotalExGst)
                    .HasColumnType("money")
                    .HasColumnName("LineTotal ExGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvCheckSumInvTotalsValidationTest4>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_SumInvTotalsValidation_Test4");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TaxRate).HasColumnName("Tax_Rate");
            });

            modelBuilder.Entity<VBvCheckSumInvTotalsValidationTest4sub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_SumInvTotalsValidation_Test4sub");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST");

                entity.Property(e => e.LineTotalGst)
                    .HasColumnType("money")
                    .HasColumnName("LineTotalGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TaxRate).HasColumnName("Tax_Rate");
            });

            modelBuilder.Entity<VBvCheckSumInvTotalsValidationTest619112018>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_SumInvTotalsValidation_Test6_19112018");

                entity.Property(e => e.CountSpin).HasColumnName("CountSPIN");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.InvDiscountGst).HasColumnName("InvDiscountGST");

                entity.Property(e => e.Ppd).HasColumnName("PPD");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test6PpdGst).HasColumnName("Test 6 - PPD GST");
            });

            modelBuilder.Entity<VBvCheckSumInvTotalsValidationTest6sub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_SumInvTotalsValidation_Test6sub");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.AmtToPayExGst).HasColumnName("AmtToPayExGST");

                entity.Property(e => e.AmtToPayGst).HasColumnName("AmtToPayGST");

                entity.Property(e => e.AmtToPayInclGst)
                    .HasColumnType("money")
                    .HasColumnName("AmtToPayInclGST");

                entity.Property(e => e.CountSpin).HasColumnName("CountSPIN");

                entity.Property(e => e.CurrentChargesExGst).HasColumnName("CurrentChargesExGST");

                entity.Property(e => e.CurrentChargesGst).HasColumnName("CurrentChargesGST");

                entity.Property(e => e.CurrentChargesInclGst)
                    .HasColumnType("money")
                    .HasColumnName("CurrentChargesInclGST");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvDiscountExGst).HasColumnName("InvDiscountExGST");

                entity.Property(e => e.InvDiscountGst).HasColumnName("InvDiscountGST");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.LineTotalExGst)
                    .HasColumnType("money")
                    .HasColumnName("LineTotal ExGST");

                entity.Property(e => e.LineTotalGst)
                    .HasColumnType("money")
                    .HasColumnName("LineTotalGST");

                entity.Property(e => e.LineTotalInclGst)
                    .HasColumnType("money")
                    .HasColumnName("LineTotalInclGST");

                entity.Property(e => e.ObExGst).HasColumnName("OB ExGST");

                entity.Property(e => e.ObGst).HasColumnName("OB GST");

                entity.Property(e => e.ObInclGst)
                    .HasColumnType("money")
                    .HasColumnName("OB InclGST");

                entity.Property(e => e.Ppd).HasColumnName("PPD");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TaxRate).HasColumnName("Tax_Rate");
            });

            modelBuilder.Entity<VBvCheckSumInvTotalsValidationTest6sub1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_SumInvTotalsValidation_Test6sub1");

                entity.Property(e => e.InvDiscountExGst).HasColumnName("InvDiscountExGST");

                entity.Property(e => e.InvLineTotalPpdgst).HasColumnName("InvLineTotalPPDGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvCheckSumInvTotalsValidationTest6sub2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_SumInvTotalsValidation_Test6sub2");

                entity.Property(e => e.InvDiscountExGst).HasColumnName("InvDiscountExGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumInvLineTotalPpdgst).HasColumnName("SumInvLineTotalPPDGST");
            });

            modelBuilder.Entity<VBvCheckSumInvTotalsValidationTest6sub3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_SumInvTotalsValidation_Test6sub3");

                entity.Property(e => e.Discount).HasColumnName("Discount%");

                entity.Property(e => e.InvDiscountExGst).HasColumnName("InvDiscountExGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumInvLineTotalPpdgst).HasColumnName("SumInvLineTotalPPDGST");
            });

            modelBuilder.Entity<VBvCheckSumInvTotalsValidationTestingsub1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_SumInvTotalsValidation_Testingsub1");

                entity.Property(e => e.ObExGst)
                    .HasColumnType("money")
                    .HasColumnName("OB ExGST");

                entity.Property(e => e.ObGst)
                    .HasColumnType("money")
                    .HasColumnName("OB GST");

                entity.Property(e => e.ObInclGst)
                    .HasColumnType("money")
                    .HasColumnName("OB InclGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Value1)
                    .HasColumnType("numeric(20, 4)")
                    .HasColumnName("Value 1");

                entity.Property(e => e.Value2)
                    .HasColumnType("numeric(20, 4)")
                    .HasColumnName("Value 2");

                entity.Property(e => e.Value3)
                    .HasColumnType("money")
                    .HasColumnName("Value 3");
            });

            modelBuilder.Entity<VBvCheckUnitMultiplierVerificationSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Check_UnitMultiplierVerification_Sub");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitMultiplierType)
                    .IsRequired()
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<VBvChecksPenaltyCharge>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_Checks_Penalty_Charge");

                entity.Property(e => e.BatchMonth)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("Batch Month");

                entity.Property(e => e.ChargeDescription)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("Charge Description");

                entity.Property(e => e.EnvironmentalMonth)
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("Environmental Month");

                entity.Property(e => e.ExGstAfterPpd).HasColumnName("$ - ex GST after PPD");

                entity.Property(e => e.ExGstBeforePpd).HasColumnName("$ - ex GST before PPD");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvoiceEndDate)
                    .HasColumnType("date")
                    .HasColumnName("Invoice End Date");

                entity.Property(e => e.InvoicePpd)
                    .HasColumnType("money")
                    .HasColumnName("Invoice PPD");

                entity.Property(e => e.InvoiceStartDate)
                    .HasColumnType("date")
                    .HasColumnName("Invoice Start Date");

                entity.Property(e => e.Product).HasMaxLength(50);

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spil).HasColumnName("SPIL");

                entity.Property(e => e.Spin).HasColumnName("SPIN");
            });

            modelBuilder.Entity<VBvChecksTouInvoiceGetDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Checks_TOU_Invoice_GetDates");

                entity.Property(e => e.FirstDayCurrentMonth)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InvEndDate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InvStartDate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LastDayCurrentMonth)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SpinvNumber)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvChecksTouInvoiceGetNotMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Checks_TOU_Invoice_GetNotMonth");

                entity.Property(e => e.FirstDayCurrentMonth)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InvEndDate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InvStartDate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LastDayCurrentMonth)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SpinvNumber)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvDataManagementConsumptionCalc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_DataManagement_Consumption_Calc");

                entity.Property(e => e.CalculatedConsumption).HasColumnName("Calculated Consumption");

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Comments");

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.TInvoicesUnitTotal).HasColumnName("tInvoices_UnitTotal");
            });

            modelBuilder.Entity<VBvDataManagementConsumptionCalcByBatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_DataManagement_Consumption_Calc_By_Batch");

                entity.Property(e => e.CalculatedConsumption).HasColumnName("Calculated Consumption");

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Comments");

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.TInvoicesUnitTotal).HasColumnName("tInvoices_UnitTotal");
            });

            modelBuilder.Entity<VBvDataManagementExportId1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_DataManagement_Export_ID_1");

                entity.Property(e => e.InvAmountToPayExGst).HasColumnName("InvAmountToPayExGST");

                entity.Property(e => e.InvAmountToPayGst).HasColumnName("InvAmountToPayGST");

                entity.Property(e => e.OpeningBalanceExGst).HasColumnName("OpeningBalanceExGST");

                entity.Property(e => e.OpeningBalanceGst).HasColumnName("OpeningBalanceGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvDataManagementExportId10>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_DataManagement_Export_ID_10");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.InvAmount).HasColumnType("money");

                entity.Property(e => e.InvAmountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountExGST");

                entity.Property(e => e.InvAmountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountGST");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvAmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPayGST");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvDiscountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountExGST");

                entity.Property(e => e.InvDiscountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountGST");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST");

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.OpeningBalanceExGst)
                    .HasColumnType("money")
                    .HasColumnName("OpeningBalanceExGST");

                entity.Property(e => e.OpeningBalanceGst)
                    .HasColumnType("money")
                    .HasColumnName("OpeningBalanceGST");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvDataManagementExportId11>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_DataManagement_Export_ID_11");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffDescription).HasMaxLength(255);

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.TariffsUnitMultiplier).HasColumnName("Tariffs_UnitMultiplier");
            });

            modelBuilder.Entity<VBvDataManagementExportId12>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_DataManagement_Export_ID_12");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffDescription).HasMaxLength(255);

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.TariffsUnitMultiplier).HasColumnName("Tariffs_UnitMultiplier");
            });

            modelBuilder.Entity<VBvDataManagementExportId13>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_DataManagement_Export_ID_13");

                entity.Property(e => e.BatchNumber).HasColumnName("Batch_Number");

                entity.Property(e => e.Difference).HasColumnType("money");

                entity.Property(e => e.InvAmntToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmntToPayExGST");

                entity.Property(e => e.InvAmntToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmntToPayGST");

                entity.Property(e => e.NewInvAmountToPayExGst).HasColumnName("New InvAmountToPayExGST");

                entity.Property(e => e.NewInvAmountToPayGst).HasColumnName("New InvAmountToPayGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvDataManagementExportId15>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_DataManagement_Export_ID_15");

                entity.Property(e => e.InvoicePpd).HasColumnName("Invoice_PPD");

                entity.Property(e => e.TariffPpd).HasColumnName("Tariff_PPD");
            });

            modelBuilder.Entity<VBvDataManagementExportId16>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_DataManagement_Export_ID_16");

                entity.Property(e => e.InvoiceGst).HasColumnName("Invoice_GST");

                entity.Property(e => e.TariffGst).HasColumnName("Tariff_GST");
            });

            modelBuilder.Entity<VBvDataManagementExportId19>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_DataManagement_Export_ID_19");

                entity.Property(e => e.RateDescription)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.Status).HasMaxLength(25);
            });

            modelBuilder.Entity<VBvDataManagementExportId2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_DataManagement_Export_ID_2");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ClientCc)
                    .HasMaxLength(200)
                    .HasColumnName("ClientCC");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(1)
                    .HasColumnName("ProductID");

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvDataManagementExportId20>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_DataManagement_Export_ID_20");

                entity.Property(e => e.Status).HasMaxLength(25);

                entity.Property(e => e.TariffDescription).HasMaxLength(255);

                entity.Property(e => e.TariffId).HasColumnName("TariffID");
            });

            modelBuilder.Entity<VBvDataManagementExportId21>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_DataManagement_Export_ID_21");

                entity.Property(e => e.CalcLineTotalGst).HasColumnName("Calc_LineTotal_GST");

                entity.Property(e => e.CalcLineTotalIncGst).HasColumnName("Calc_LineTotal_IncGST");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TaxRate).HasColumnName("Tax_Rate");
            });

            modelBuilder.Entity<VBvDataManagementExportId22>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_DataManagement_Export_ID_22");

                entity.Property(e => e.InvAmountToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPayExGST");

                entity.Property(e => e.InvAmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPayGST");

                entity.Property(e => e.InvAmtToPay).HasColumnType("money");

                entity.Property(e => e.OpeningBalanceExGst).HasColumnName("OpeningBalanceExGST");

                entity.Property(e => e.OpeningBalanceGst).HasColumnName("OpeningBalanceGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvDataManagementExportId23>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_DataManagement_Export_ID_23");

                entity.Property(e => e.CalculatedConsumption).HasColumnName("Calculated Consumption");

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Comments");

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.TInvoicesUnitTotal).HasColumnName("tInvoices_UnitTotal");
            });

            modelBuilder.Entity<VBvDataManagementExportId24>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_DataManagement_Export_ID_24");

                entity.Property(e => e.CalculatedConsumption).HasColumnName("Calculated Consumption");

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Comments");

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.TInvoicesUnitTotal).HasColumnName("tInvoices_UnitTotal");
            });

            modelBuilder.Entity<VBvDataManagementExportId25>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_DataManagement_Export_ID_25");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.InvAmount).HasColumnType("money");

                entity.Property(e => e.InvAmountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountExGST");

                entity.Property(e => e.InvAmountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountGST");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvAmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPayGST");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvDiscountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountExGST");

                entity.Property(e => e.InvDiscountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountGST");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST");

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.OpeningBalanceExGst)
                    .HasColumnType("money")
                    .HasColumnName("OpeningBalanceExGST");

                entity.Property(e => e.OpeningBalanceGst)
                    .HasColumnType("money")
                    .HasColumnName("OpeningBalanceGST");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvDataManagementExportId26>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_DataManagement_Export_ID_26");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.InvAmount).HasColumnType("money");

                entity.Property(e => e.InvAmountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountExGST");

                entity.Property(e => e.InvAmountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountGST");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvAmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPayGST");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvDiscountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountExGST");

                entity.Property(e => e.InvDiscountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountGST");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST");

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.OpeningBalanceExGst)
                    .HasColumnType("money")
                    .HasColumnName("OpeningBalanceExGST");

                entity.Property(e => e.OpeningBalanceGst)
                    .HasColumnType("money")
                    .HasColumnName("OpeningBalanceGST");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvDataManagementExportId27>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_DataManagement_Export_ID_27");

                entity.Property(e => e.BatchNumber).HasColumnName("Batch_Number");

                entity.Property(e => e.Difference).HasColumnType("money");

                entity.Property(e => e.InvAmntToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmntToPayExGST");

                entity.Property(e => e.InvAmntToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmntToPayGST");

                entity.Property(e => e.NewInvAmountToPayExGst).HasColumnName("New InvAmountToPayExGST");

                entity.Property(e => e.NewInvAmountToPayGst).HasColumnName("New InvAmountToPayGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvDataManagementExportId28>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_DataManagement_Export_ID_28");

                entity.Property(e => e.InvoicePpd).HasColumnName("Invoice_PPD");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffPpd).HasColumnName("Tariff_PPD");
            });

            modelBuilder.Entity<VBvDataManagementExportId29>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_DataManagement_Export_ID_29");

                entity.Property(e => e.InvoiceGst).HasColumnName("Invoice_GST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffGst).HasColumnName("Tariff_GST");
            });

            modelBuilder.Entity<VBvDataManagementExportId3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_DataManagement_Export_ID_3");

                entity.Property(e => e.CalculatedConsumption).HasColumnName("Calculated Consumption");

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Comments");

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.TInvoicesUnitTotal).HasColumnName("tInvoices_UnitTotal");
            });

            modelBuilder.Entity<VBvDataManagementExportId30>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_DataManagement_Export_ID_30");

                entity.Property(e => e.CalcLineTotalGst).HasColumnName("Calc_LineTotal_GST");

                entity.Property(e => e.CalcLineTotalIncGst).HasColumnName("Calc_LineTotal_IncGST");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TaxRate).HasColumnName("Tax_Rate");
            });

            modelBuilder.Entity<VBvDataManagementExportId4Opt1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_DataManagement_Export_ID_4_OPT_1");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VBvDataManagementExportId4Opt2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_DataManagement_Export_ID_4_OPT_2");

                entity.Property(e => e.NewUnitType)
                    .HasMaxLength(50)
                    .HasColumnName("New_UnitType");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VBvDataManagementExportId5>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_DataManagement_Export_ID_5");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.ProductId)
                    .HasMaxLength(1)
                    .HasColumnName("ProductID");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VBvDataManagementExportId6>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_DataManagement_Export_ID_6");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.InvLineNo).ValueGeneratedOnAdd();

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VBvDataManagementExportId7>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_DataManagement_Export_ID_7");

                entity.Property(e => e.CalculatedConsumption).HasColumnName("Calculated Consumption");

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Comments");

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.TInvoicesUnitTotal).HasColumnName("tInvoices_UnitTotal");
            });

            modelBuilder.Entity<VBvDataManagementExportId8>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_DataManagement_Export_ID_8");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.InvAmount).HasColumnType("money");

                entity.Property(e => e.InvAmountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountExGST");

                entity.Property(e => e.InvAmountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountGST");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvAmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPayGST");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvDiscountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountExGST");

                entity.Property(e => e.InvDiscountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountGST");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST");

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.OpeningBalanceExGst)
                    .HasColumnType("money")
                    .HasColumnName("OpeningBalanceExGST");

                entity.Property(e => e.OpeningBalanceGst)
                    .HasColumnType("money")
                    .HasColumnName("OpeningBalanceGST");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvDataManagementExportId9>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_DataManagement_Export_ID_9");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.InvoiceAccountNo)
                    .HasMaxLength(200)
                    .HasColumnName("Invoice_AccountNo");

                entity.Property(e => e.InvoiceRetailer)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("Invoice_Retailer");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteName).HasMaxLength(200);
            });

            modelBuilder.Entity<VBvDataManagementRunId21>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BV_DataManagement_Run_ID_21");

                entity.Property(e => e.CalcLineTotalGst).HasColumnName("Calc_LineTotal_GST");

                entity.Property(e => e.CalcLineTotalIncGst).HasColumnName("Calc_LineTotal_IncGST");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TaxRate).HasColumnName("Tax_Rate");
            });

            modelBuilder.Entity<VBvFindParentAccountNo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BV_Find_ParentAccountNo");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SplitChildSite).HasColumnName("Split_Child_Site");

                entity.Property(e => e.SplitParentSite).HasColumnName("Split_Parent_Site");

                entity.Property(e => e.Status).HasMaxLength(10);
            });

            modelBuilder.Entity<VBvcAccountNoNotMatching>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_AccountNo_Not_Matching");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false);

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvoiceAccountNo)
                    .HasMaxLength(200)
                    .HasColumnName("Invoice AccountNo");

                entity.Property(e => e.InvoiceRetailerCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("Invoice Retailer Code");

                entity.Property(e => e.SiteAccountNo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Site AccountNo");

                entity.Property(e => e.SiteRetailerCode)
                    .HasMaxLength(20)
                    .HasColumnName("Site Retailer Code");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");
            });

            modelBuilder.Entity<VBvcActiveSitesNoInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Active_Sites_No_Invoice");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.DateAdded).HasColumnType("date");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(29)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvArchived).HasColumnName("Inv_Archived");

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.StartDate).HasColumnType("date");
            });

            modelBuilder.Entity<VBvcActivityManagementOutstanding>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Activity_Management_Outstanding");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.AmFuntionTypeId).HasColumnName("AM_Funtion_Type_ID");

                entity.Property(e => e.AmOverview).HasColumnName("AM_Overview");

                entity.Property(e => e.Category).HasMaxLength(255);

                entity.Property(e => e.DateAdded)
                    .HasColumnType("date")
                    .HasColumnName("Date_Added");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.ManagedBy).HasMaxLength(255);

                entity.Property(e => e.Quclass)
                    .HasMaxLength(255)
                    .HasColumnName("QUClass");

                entity.Property(e => e.Quid).HasColumnName("QUID");

                entity.Property(e => e.ReviewDate).HasColumnType("date");

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.Spib).HasColumnName("SPIB");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.Supplier).HasMaxLength(255);
            });

            modelBuilder.Entity<VBvcAogCheck>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_AOG_Check");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.AogCharges).HasColumnName("AOG charges");

                entity.Property(e => e.CalculatedAogCharges).HasColumnName("Calculated AOG charges");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(55)
                    .IsUnicode(false)
                    .HasColumnName("ERROR_DESCRIPTION");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice comments");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");
            });

            modelBuilder.Entity<VBvcAogCheckFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_AOG_Check_Final");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.AogCharges).HasColumnName("AOG charges");

                entity.Property(e => e.CalculatedAogCharges).HasColumnName("Calculated AOG charges");

                entity.Property(e => e.CalculatedAogChargesInflatedFor10Discount).HasColumnName("Calculated AOG charges inflated for 10% discount");

                entity.Property(e => e.CalculatedAogChargesInflatedForSiteSDiscount).HasColumnName("Calculated AOG charges inflated for site's discount");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(55)
                    .IsUnicode(false)
                    .HasColumnName("ERROR_DESCRIPTION");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice comments");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");
            });

            modelBuilder.Entity<VBvcAogCheckSumLinesSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_AOG_Check_Sum_Lines_Sub");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumAogLines).HasColumnName("Sum_AOG_Lines");
            });

            modelBuilder.Entity<VBvcAogVerification>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_AOG_Verification");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.Difference)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.ExpectedAogCharge)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Expected AOG Charge");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmount).HasColumnType("money");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvOpenBalType).HasMaxLength(10);

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");
            });

            modelBuilder.Entity<VBvcBatchOneOffFeeReview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Batch_OneOffFee_Review");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.LineDescription)
                    .HasMaxLength(250)
                    .HasColumnName("Line Description");

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.RateDescription)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SiteName)
                    .HasMaxLength(200)
                    .HasColumnName("Site Name");

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VBvcBatchTotalCheck>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Batch_Total_Check");

                entity.Property(e => e.CalculatedBatchTotal).HasColumnType("money");

                entity.Property(e => e.InvArchived).HasColumnName("Inv_Archived");
            });

            modelBuilder.Entity<VBvcBatchTotalVrsInvSumCheckAllBatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Batch_Total_Vrs_InvSum_Check_All_Batches");

                entity.Property(e => e.BatchDate).HasColumnType("date");

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.BatchTotalCheck).HasColumnName("Batch_Total_Check");

                entity.Property(e => e.CalculatedBatchTotal).HasColumnType("money");

                entity.Property(e => e.ClientCode).HasMaxLength(10);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(48)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.InputTypeCode).HasMaxLength(50);

                entity.Property(e => e.Test).HasColumnName("test");
            });

            modelBuilder.Entity<VBvcBillPaymentSiteReview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Bill_Payment_Site_Review");

                entity.Property(e => e.AccountCode).HasMaxLength(200);

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.BillPayment).HasColumnName("Bill_Payment");

                entity.Property(e => e.BillVerification).HasColumnName("Bill_Verification");

                entity.Property(e => e.BillingFrequency)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Billing_Frequency");

                entity.Property(e => e.BpayCode)
                    .HasMaxLength(20)
                    .HasColumnName("BPayCode");

                entity.Property(e => e.BpayReference)
                    .HasMaxLength(20)
                    .HasColumnName("BPayReference");

                entity.Property(e => e.BuildingNo).HasMaxLength(200);

                entity.Property(e => e.CalSqMetres).HasColumnName("Cal_SqMetres");

                entity.Property(e => e.CarbonFactorArea)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Carbon_Factor_Area");

                entity.Property(e => e.ClientCc)
                    .HasMaxLength(200)
                    .HasColumnName("ClientCC");

                entity.Property(e => e.ClientCode).HasMaxLength(10);

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.CompanyCode).HasMaxLength(255);

                entity.Property(e => e.ContactAddressCity).HasMaxLength(200);

                entity.Property(e => e.ContactAddressLine1).HasMaxLength(200);

                entity.Property(e => e.ContactAddressLine2).HasMaxLength(200);

                entity.Property(e => e.ContactFloor).HasMaxLength(200);

                entity.Property(e => e.ContactMailAddressLine1).HasMaxLength(200);

                entity.Property(e => e.ContactName).HasMaxLength(200);

                entity.Property(e => e.ContactName2).HasMaxLength(200);

                entity.Property(e => e.ContactPhone).HasMaxLength(200);

                entity.Property(e => e.CustomerNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Customer_Number");

                entity.Property(e => e.DataEntryNotes).HasColumnName("Data_Entry_Notes");

                entity.Property(e => e.DateAdded).HasColumnType("date");

                entity.Property(e => e.DateCeased).HasColumnType("date");

                entity.Property(e => e.DmType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("DM_Type");

                entity.Property(e => e.Dvn)
                    .HasMaxLength(255)
                    .HasColumnName("DVN");

                entity.Property(e => e.EdiCreated)
                    .HasMaxLength(255)
                    .HasColumnName("EDI_Created");

                entity.Property(e => e.EmissionsCode)
                    .HasMaxLength(200)
                    .HasColumnName("Emissions_Code");

                entity.Property(e => e.Entity).HasMaxLength(200);

                entity.Property(e => e.FixedKva).HasColumnName("FixedKVA");

                entity.Property(e => e.FloorUtilityFactor).HasColumnName("Floor_Utility_Factor");

                entity.Property(e => e.GreenEnergyPercentage).HasColumnName("Green_Energy_Percentage");

                entity.Property(e => e.GridExitPoint).HasMaxLength(255);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InputType)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.LeaseExpiry).HasColumnType("date");

                entity.Property(e => e.LeaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MasterList).HasColumnName("Master_List");

                entity.Property(e => e.MasterListSiteType).HasMaxLength(255);

                entity.Property(e => e.MaxAq).HasColumnName("Max_AQ");

                entity.Property(e => e.Mdq).HasColumnName("MDQ");

                entity.Property(e => e.MeterAccessDetails)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Meter_Access_Details");

                entity.Property(e => e.MeterDataAgent)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Meter_Data_Agent");

                entity.Property(e => e.MeterNo).HasMaxLength(255);

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.MinAq).HasColumnName("Min_AQ");

                entity.Property(e => e.NetworkCompany).HasMaxLength(255);

                entity.Property(e => e.NetworkId)
                    .HasMaxLength(200)
                    .HasColumnName("NetworkID");

                entity.Property(e => e.Nmi)
                    .HasMaxLength(255)
                    .HasColumnName("NMI");

                entity.Property(e => e.OrderNumber).HasMaxLength(255);

                entity.Property(e => e.OrgId).HasColumnName("Org_ID");

                entity.Property(e => e.ParentCustomer).HasMaxLength(255);

                entity.Property(e => e.PowerFactor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.Region).HasMaxLength(200);

                entity.Property(e => e.Region2).HasMaxLength(200);

                entity.Property(e => e.RegistryAddress)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Address");

                entity.Property(e => e.RegistryChannelCount).HasColumnName("Registry_Channel_Count");

                entity.Property(e => e.RegistryChargeableCapacity).HasColumnName("Registry_Chargeable_Capacity");

                entity.Property(e => e.RegistryGenerationCapacity).HasColumnName("Registry_Generation_Capacity");

                entity.Property(e => e.RegistryInstallDetails).HasColumnName("Registry_Install_Details");

                entity.Property(e => e.RegistryLossCat1)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Loss_Cat_1");

                entity.Property(e => e.RegistryLossCat2)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Loss_Cat_2");

                entity.Property(e => e.RegistryMep)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_MEP");

                entity.Property(e => e.RegistryMeterCat).HasColumnName("Registry_Meter_Cat");

                entity.Property(e => e.RegistryMeterMultiplier).HasColumnName("Registry_Meter_Multiplier");

                entity.Property(e => e.RegistryMeterType)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_MeterType");

                entity.Property(e => e.RegistryNetwork)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Network");

                entity.Property(e => e.RegistryPoc)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_POC");

                entity.Property(e => e.RegistryPriceCat)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Price_Cat");

                entity.Property(e => e.RegistryStatus)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Status");

                entity.Property(e => e.RegistryUnmeteredLoad)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Unmetered_Load");

                entity.Property(e => e.RetailId)
                    .HasMaxLength(255)
                    .HasColumnName("RetailID");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.RetailerSiteRef).HasMaxLength(200);

                entity.Property(e => e.SiteConsolidationFlag)
                    .HasMaxLength(255)
                    .HasColumnName("Site_Consolidation_Flag");

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteLocation).HasMaxLength(200);

                entity.Property(e => e.SiteLocationDd)
                    .HasMaxLength(255)
                    .HasColumnName("SiteLocationDD");

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeCode)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.Property(e => e.SubClientCode).HasMaxLength(255);

                entity.Property(e => e.TaxClass)
                    .HasMaxLength(255)
                    .HasColumnName("Tax_Class");

                entity.Property(e => e.TerminationFee)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Termination_fee");

                entity.Property(e => e.TimeAdded).HasColumnType("date");

                entity.Property(e => e.Transformer)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Vhaaddress1)
                    .HasMaxLength(255)
                    .HasColumnName("VHAAddress1");

                entity.Property(e => e.Vhaaddress2)
                    .HasMaxLength(255)
                    .HasColumnName("VHAAddress2");

                entity.Property(e => e.Vhaaddress3)
                    .HasMaxLength(255)
                    .HasColumnName("VHAAddress3");
            });

            modelBuilder.Entity<VBvcBillSummaryLinesGstFree>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Bill_Summary_Lines_GST_Free");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumInvLinesTotalGstFree).HasColumnName("Sum_InvLinesTotal_GST_Free");
            });

            modelBuilder.Entity<VBvcBpayCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_BPay_Code");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(48)
                    .IsUnicode(false)
                    .HasColumnName("Error Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.SpidAccountNo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("SPID_AccountNo");

                entity.Property(e => e.SpidBpayCode)
                    .HasMaxLength(20)
                    .HasColumnName("SPID_BPayCode");

                entity.Property(e => e.SpidRetailer)
                    .HasMaxLength(20)
                    .HasColumnName("SPID_Retailer");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.SpinAccountNo)
                    .HasMaxLength(200)
                    .HasColumnName("SPIN_AccountNo");

                entity.Property(e => e.SpinRetailer)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("SPIN_Retailer");
            });

            modelBuilder.Entity<VBvcBpayCodeSubClientExist>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_BPay_Code_Sub_Client_Exists");

                entity.Property(e => e.ClientCode).HasMaxLength(50);

                entity.Property(e => e.RetailerCode).HasMaxLength(20);
            });

            modelBuilder.Entity<VBvcCalConsumptionBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Cal_Consumption_Base");

                entity.Property(e => e.ConsumptionExpected).HasColumnName("Consumption_Expected");

                entity.Property(e => e.DoLinesHaveRateUnitCodedConsumption).HasColumnName("Do_Lines_Have_Rate/Unit_Coded_Consumption");

                entity.Property(e => e.HeaderUnits).HasColumnName("Header_Units");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Comments");

                entity.Property(e => e.LinesUnits).HasColumnName("Lines_Units");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.ProductSubCatId).HasColumnName("Product_Sub_Cat_ID");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcCalConsumptionPre>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Cal_Consumption_Pre");

                entity.Property(e => e.ConsumptionExpected).HasColumnName("Consumption_Expected");

                entity.Property(e => e.DoLinesHaveRateUnitCodedConsumption).HasColumnName("Do_Lines_Have_Rate/Unit_Coded_Consumption");

                entity.Property(e => e.HeaderUnits).HasColumnName("Header_Units");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Comments");

                entity.Property(e => e.LinesUnits).HasColumnName("Lines_Units");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.ProductSubCatId).HasColumnName("Product_Sub_Cat_ID");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcCarbonFactorAreaEau>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Carbon_Factor_Area_EAUS");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CarbonFactorArea)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Carbon_Factor_Area");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);
            });

            modelBuilder.Entity<VBvcCeasedSite>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Ceased_Sites");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.AmountToPay).HasColumnType("money");

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.DateCeased).HasColumnType("date");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerName).HasMaxLength(50);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcChargesNoGst>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Charges_No_GST");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(43)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.GstInInvoiceLines).HasColumnName("GST in Invoice Lines");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");
            });

            modelBuilder.Entity<VBvcChargesNoPpd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Charges_No_PPD");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(43)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.Ppd).HasColumnName("PPD");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");
            });

            modelBuilder.Entity<VBvcCheckDollarsInternalConsistency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Check_Dollars_Internal_Consistency");

                entity.Property(e => e.Amount1)
                    .HasColumnType("money")
                    .HasColumnName("Amount_1");

                entity.Property(e => e.Amount2)
                    .HasColumnType("money")
                    .HasColumnName("Amount_2");

                entity.Property(e => e.AmountToPay1)
                    .HasColumnType("money")
                    .HasColumnName("AmountToPay_1");

                entity.Property(e => e.AmountToPay2)
                    .HasColumnType("money")
                    .HasColumnName("AmountToPay_2");

                entity.Property(e => e.ApplySitePpd).HasColumnName("Apply_Site_PPD");

                entity.Property(e => e.ExGstObLinesPpdToAmountToPay2)
                    .HasColumnType("money")
                    .HasColumnName("ExGST_OB_Lines_PPD_To_AmountToPay_2");

                entity.Property(e => e.InclGstObLinesPpdToAmountToPay1)
                    .HasColumnType("money")
                    .HasColumnName("InclGST_OB_Lines_PPD_To_AmountToPay_1");

                entity.Property(e => e.InvAmount).HasColumnType("money");

                entity.Property(e => e.InvAmountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountExGST");

                entity.Property(e => e.InvAmountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountGST");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvAmountToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPayExGST");

                entity.Property(e => e.InvAmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPayGST");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvDiscountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountExGST");

                entity.Property(e => e.InvDiscountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountGST");

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST");

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.Lines1)
                    .HasColumnType("money")
                    .HasColumnName("Lines_1");

                entity.Property(e => e.Lines2)
                    .HasColumnType("money")
                    .HasColumnName("Lines_2");

                entity.Property(e => e.Ob1)
                    .HasColumnType("money")
                    .HasColumnName("OB_1");

                entity.Property(e => e.Ob2)
                    .HasColumnType("money")
                    .HasColumnName("OB_2");

                entity.Property(e => e.ObGst).HasColumnName("OB_GST");

                entity.Property(e => e.OpeningBalanceExGst)
                    .HasColumnType("money")
                    .HasColumnName("OpeningBalanceExGST");

                entity.Property(e => e.OpeningBalanceGst)
                    .HasColumnType("money")
                    .HasColumnName("OpeningBalanceGST");

                entity.Property(e => e.PdfInvAmountToPay)
                    .HasColumnType("money")
                    .HasColumnName("PDF_InvAmountToPay");

                entity.Property(e => e.Ppd1)
                    .HasColumnType("money")
                    .HasColumnName("PPD_1");

                entity.Property(e => e.Ppd2)
                    .HasColumnType("money")
                    .HasColumnName("PPD_2");

                entity.Property(e => e.PpdGst).HasColumnName("PPD_GST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcCheckFinalledSite>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Check_Finalled_Sites");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.DateCeased).HasColumnType("date");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.RetailerName).HasMaxLength(50);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcCheckSolarRebates1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BVC_Check_Solar_Rebates1");

                entity.Property(e => e.Spid).HasColumnName("SPID");
            });

            modelBuilder.Entity<VBvcCheckSolarRebates1Sub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Check_Solar_Rebates1_Sub");

                entity.Property(e => e.SplitChildSite).HasColumnName("Split_Child_Site");

                entity.Property(e => e.SplitParentSite).HasColumnName("Split_Parent_Site");

                entity.Property(e => e.Status).HasMaxLength(10);
            });

            modelBuilder.Entity<VBvcCheckSolarRebates2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BVC_Check_Solar_Rebates2");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcCheckSolarRebates3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BVC_Check_Solar_Rebates3");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcCheckSolarRebates4>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BVC_Check_Solar_Rebates4");

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.ErrorDesciption)
                    .IsRequired()
                    .HasMaxLength(71)
                    .IsUnicode(false)
                    .HasColumnName("Error_Desciption");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");
            });

            modelBuilder.Entity<VBvcCheckSplitCheck>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BVC_Check_Split_Check");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SplitParentSite).HasColumnName("Split_Parent_Site");

                entity.Property(e => e.SumOfSplitShouldEqual1).HasColumnName("Sum of Split Should equal 1");
            });

            modelBuilder.Entity<VBvcChecksSplitRetailerAccountNoMismatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BVC_Checks_Split_Retailer_AccountNo_Mismatch");

                entity.Property(e => e.ChildAccountNo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Child AccountNo");

                entity.Property(e => e.ChildRetailer)
                    .HasMaxLength(20)
                    .HasColumnName("Child Retailer");

                entity.Property(e => e.ChildSpid).HasColumnName("Child SPID");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(38)
                    .IsUnicode(false)
                    .HasColumnName("Error Description");

                entity.Property(e => e.ParentAccountNo)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Parent AccountNo");

                entity.Property(e => e.ParentRetailer)
                    .HasMaxLength(20)
                    .HasColumnName("Parent Retailer");

                entity.Property(e => e.ParentSiteNo).HasColumnName("Parent SiteNo");

                entity.Property(e => e.SplitChildSite).HasColumnName("Split_Child_Site");

                entity.Property(e => e.SplitParentSite).HasColumnName("Split_Parent_Site");
            });

            modelBuilder.Entity<VBvcChecksSplitSiteStatusMismatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BVC_Checks_Split_Site_Status_Mismatch");

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SplitStatus)
                    .HasMaxLength(10)
                    .HasColumnName("Split Status");
            });

            modelBuilder.Entity<VBvcChecksSplitsAwaitingWork>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BVC_Checks_Splits_Awaiting_Work");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ChildSiteAccount)
                    .HasMaxLength(212)
                    .HasColumnName("Child_Site_Account");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.NewInvoice).HasColumnName("New_Invoice");

                entity.Property(e => e.NewInvoiceNo)
                    .HasMaxLength(62)
                    .HasColumnName("New_Invoice_No");

                entity.Property(e => e.ParentSpin).HasColumnName("Parent_SPIN");

                entity.Property(e => e.ReadyForUpload).HasColumnName("Ready_For_Upload");

                entity.Property(e => e.SiteCreateError)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("Site_Create_Error");

                entity.Property(e => e.SiteExistsError)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("Site_Exists_Error");

                entity.Property(e => e.SiteFixError)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Site Fix Error");

                entity.Property(e => e.SiteSplitError)
                    .HasMaxLength(17)
                    .IsUnicode(false)
                    .HasColumnName("Site Split Error");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SplitAccountPostFix).HasColumnName("Split_Account_PostFix");

                entity.Property(e => e.SplitChildSite).HasColumnName("Split_Child_Site");

                entity.Property(e => e.SplitClientCode)
                    .HasMaxLength(255)
                    .HasColumnName("Split_Client_Code");

                entity.Property(e => e.SplitId).HasColumnName("Split_ID");

                entity.Property(e => e.SplitParentSite).HasColumnName("Split_Parent_Site");

                entity.Property(e => e.SplitSubTotal).HasColumnName("Split_Sub_Total");

                entity.Property(e => e.SplitTotal).HasColumnName("Split_Total");
            });

            modelBuilder.Entity<VBvcChecksSplitsUndeletedCheck>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BVC_Checks_Splits_Undeleted_Check");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ChildSiteAccount)
                    .HasMaxLength(212)
                    .HasColumnName("Child_Site_Account");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.NewInvoice).HasColumnName("New_Invoice");

                entity.Property(e => e.NewInvoiceNo)
                    .HasMaxLength(62)
                    .HasColumnName("New_Invoice_No");

                entity.Property(e => e.ParentSpin).HasColumnName("Parent_SPIN");

                entity.Property(e => e.ReadyForUpload).HasColumnName("Ready_For_Upload");

                entity.Property(e => e.SiteCreateError)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("Site_Create_Error");

                entity.Property(e => e.SiteExistsError)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("Site_Exists_Error");

                entity.Property(e => e.SiteFixError)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Site Fix Error");

                entity.Property(e => e.SiteSplitError)
                    .HasMaxLength(17)
                    .IsUnicode(false)
                    .HasColumnName("Site Split Error");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SplitAccountPostFix).HasColumnName("Split_Account_PostFix");

                entity.Property(e => e.SplitChildSite).HasColumnName("Split_Child_Site");

                entity.Property(e => e.SplitClientCode)
                    .HasMaxLength(255)
                    .HasColumnName("Split_Client_Code");

                entity.Property(e => e.SplitId).HasColumnName("Split_ID");

                entity.Property(e => e.SplitParentSite).HasColumnName("Split_Parent_Site");

                entity.Property(e => e.SplitSubTotal).HasColumnName("Split_Sub_Total");

                entity.Property(e => e.SplitTotal).HasColumnName("Split_Total");
            });

            modelBuilder.Entity<VBvcConsumptionCostsBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Consumption_Costs_Base");

                entity.Property(e => e.AmountExGst).HasColumnName("AmountExGST");

                entity.Property(e => e.CalcUnits).HasColumnName("Calc_Units");

                entity.Property(e => e.ConsumptionUnitsCents).HasColumnName("Consumption_Units_Cents");

                entity.Property(e => e.InvAmountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountExGST");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TaxClass)
                    .HasMaxLength(255)
                    .HasColumnName("Tax_Class");

                entity.Property(e => e.TaxRate).HasColumnName("Tax_Rate");
            });

            modelBuilder.Entity<VBvcConsumptionCostsFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Consumption_Costs_Final");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.AmountExGst).HasColumnName("AmountExGST");

                entity.Property(e => e.Consumption).HasColumnName("$/Consumption");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(29)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InputType)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.InvAmountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountExGST");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcConsumptionVariance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Consumption_Variance");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ClientConsumptionVariance).HasColumnName("Client Consumption Variance");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(69)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.SiteConsumptionVariance).HasColumnName("Site Consumption Variance");

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.Spid).HasColumnName("SPID");
            });

            modelBuilder.Entity<VBvcCredit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Credits");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(29)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvEnteredDate).HasColumnType("date");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcDateGapMain>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Date_Gap_Main");

                entity.Property(e => e.AccountManager)
                    .HasMaxLength(255)
                    .HasColumnName("Account_Manager");

                entity.Property(e => e.DateGapFound)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("Date_Gap_Found");

                entity.Property(e => e.DgDateGap).HasColumnName("DG_Date_Gap");

                entity.Property(e => e.DgLastEnd)
                    .HasColumnType("date")
                    .HasColumnName("DG_LastEnd");

                entity.Property(e => e.DgLastInvoice).HasColumnName("DG_LastInvoice");

                entity.Property(e => e.DgNextBachNo).HasColumnName("DG_NextBachNo");

                entity.Property(e => e.DgSiteType)
                    .HasMaxLength(10)
                    .HasColumnName("DG_SiteType");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.IcpMni)
                    .HasMaxLength(255)
                    .HasColumnName("ICP/MNI");

                entity.Property(e => e.InvArchived).HasColumnName("Inv_Archived");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.NextStartDate)
                    .HasColumnType("date")
                    .HasColumnName("Next Start Date");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RelationshipManager)
                    .HasMaxLength(255)
                    .HasColumnName("Relationship_Manager");

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SpidAccountNumber)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("SPID Account Number");

                entity.Property(e => e.SpidRetailer)
                    .HasMaxLength(20)
                    .HasColumnName("SPID Retailer");

                entity.Property(e => e.SpinAccountNumber)
                    .HasMaxLength(200)
                    .HasColumnName("SPIN Account Number");

                entity.Property(e => e.SpinRetailerCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("SPIN RetailerCode");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcDateGapsEnvironment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Date_Gaps_Environment");

                entity.Property(e => e.AccountManager)
                    .HasMaxLength(255)
                    .HasColumnName("Account_Manager");

                entity.Property(e => e.DateGapFound)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("Date_Gap_Found");

                entity.Property(e => e.DgDateGap).HasColumnName("DG_Date_Gap");

                entity.Property(e => e.DgLastEnd)
                    .HasColumnType("date")
                    .HasColumnName("DG_LastEnd");

                entity.Property(e => e.DgLastInvoice).HasColumnName("DG_LastInvoice");

                entity.Property(e => e.DgNextBachNo).HasColumnName("DG_NextBachNo");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Error_description");

                entity.Property(e => e.IcpNmi)
                    .HasMaxLength(255)
                    .HasColumnName("ICP/NMI");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.NextStartDate)
                    .HasColumnType("date")
                    .HasColumnName("Next Start Date");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RelationshipManager)
                    .HasMaxLength(255)
                    .HasColumnName("Relationship_Manager");

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SpidAccountNumber)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("SPID account number");

                entity.Property(e => e.SpidRetailer)
                    .HasMaxLength(20)
                    .HasColumnName("SPID Retailer");

                entity.Property(e => e.SpinAccountNumber)
                    .HasMaxLength(200)
                    .HasColumnName("SPIN account number");

                entity.Property(e => e.SpinRetailer)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("SPIN Retailer");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcDateGapsResult>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Date_Gaps_Result");

                entity.Property(e => e.DgBatchNo).HasColumnName("DG_BatchNo");

                entity.Property(e => e.DgDateGap).HasColumnName("DG_Date_Gap");

                entity.Property(e => e.DgId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DG_ID");

                entity.Property(e => e.DgInvEndDate)
                    .HasColumnType("date")
                    .HasColumnName("DG_InvEndDate");

                entity.Property(e => e.DgInvStartDate)
                    .HasColumnType("date")
                    .HasColumnName("DG_InvStartDate");

                entity.Property(e => e.DgLastEnd)
                    .HasColumnType("date")
                    .HasColumnName("DG_LastEnd");

                entity.Property(e => e.DgLastInvoice).HasColumnName("DG_LastInvoice");

                entity.Property(e => e.DgLastSiteNo).HasColumnName("DG_LastSiteNo");

                entity.Property(e => e.DgNextBachNo).HasColumnName("DG_NextBachNo");

                entity.Property(e => e.DgNextInvoice).HasColumnName("DG_NextInvoice");

                entity.Property(e => e.DgNextStart)
                    .HasColumnType("date")
                    .HasColumnName("DG_NextStart");

                entity.Property(e => e.DgSiteNo).HasColumnName("DG_SiteNo");

                entity.Property(e => e.DgSiteType)
                    .HasMaxLength(10)
                    .HasColumnName("DG_SiteType");

                entity.Property(e => e.DgSpinvNumber).HasColumnName("DG_SPInvNumber");
            });

            modelBuilder.Entity<VBvcDisabledRateOrTariffUsed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Disabled_RateOrTariff_Used");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(58)
                    .IsUnicode(false)
                    .HasColumnName("Error Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spil).HasColumnName("SPIL");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TRatesStatus)
                    .HasMaxLength(25)
                    .HasColumnName("tRatesStatus");

                entity.Property(e => e.TTariffsStatus)
                    .HasMaxLength(25)
                    .HasColumnName("tTariffsStatus");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");
            });

            modelBuilder.Entity<VBvcDuplicateIcpInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Duplicate_ICP_Invoices");

                entity.Property(e => e.CountOfSpinvNumber).HasColumnName("CountOfSPInvNumber");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(54)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);
            });

            modelBuilder.Entity<VBvcDuplicateSupplierInvNumber>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Duplicate_Supplier_InvNumbers");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(33)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Spib).HasColumnName("SPIB");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");
            });

            modelBuilder.Entity<VBvcDuplicateSupplierInvNumberBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Duplicate_Supplier_InvNumber_Base");

                entity.Property(e => e.Cnt).HasColumnName("cnt");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<VBvcEarliestDueDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Earliest_Due_Date");

                entity.Property(e => e.InvAmountToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPay_ExGST");

                entity.Property(e => e.InvAmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPay_GST");

                entity.Property(e => e.InvAmtToPay).HasColumnType("money");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.Kwh).HasColumnName("KWh");

                entity.Property(e => e.Ppd)
                    .HasColumnType("money")
                    .HasColumnName("PPD");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.RetailerName).HasMaxLength(50);

                entity.Property(e => e.SumInvLinesTotalGstFree).HasColumnName("Sum_InvLinesTotal_GST_Free");
            });

            modelBuilder.Entity<VBvcEarliestDueDatePre2dp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Earliest_Due_Date_Pre2dp");

                entity.Property(e => e.InvAmountToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPay_ExGST");

                entity.Property(e => e.InvAmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPay_GST");

                entity.Property(e => e.InvAmtToPay).HasColumnType("money");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.Kwh).HasColumnName("KWh");

                entity.Property(e => e.Ppd)
                    .HasColumnType("money")
                    .HasColumnName("PPD");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.RetailerName).HasMaxLength(50);

                entity.Property(e => e.SumInvLinesTotalGstFree).HasColumnName("Sum_InvLinesTotal_GST_Free");
            });

            modelBuilder.Entity<VBvcEliminateRv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_EliminateRV");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcEstimate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Estimates");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(28)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.EsEstimateCount).HasColumnName("ES_Estimate_Count");

                entity.Property(e => e.EsLastactualReadDate)
                    .HasColumnType("date")
                    .HasColumnName("ES_LastactualReadDate");

                entity.Property(e => e.HasAnActual).HasColumnName("Has An Actual");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcEstimateInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Estimate_Invoices");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(58)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.EsEstimateCount).HasColumnName("ES_Estimate_Count");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(50);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.Spin).HasColumnName("SPIN");
            });

            modelBuilder.Entity<VBvcEstimatesAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Estimates_All");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(28)
                    .IsUnicode(false)
                    .HasColumnName("Error_description");

                entity.Property(e => e.EsEstimateCount).HasColumnName("ES_Estimate_Count");

                entity.Property(e => e.EsLastactualReadDate)
                    .HasColumnType("date")
                    .HasColumnName("ES_LastactualReadDate");

                entity.Property(e => e.HasAnActual).HasColumnName("Has An Actual");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvArchived).HasColumnName("Inv_Archived");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcEstimatesAllPre>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Estimates_All_Pre");

                entity.Property(e => e.InvEndDate).HasColumnType("datetime");

                entity.Property(e => e.LiEstimate).HasColumnName("LI_Estimate");

                entity.Property(e => e.LiId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("LI_ID");

                entity.Property(e => e.LiReadTypeCode)
                    .HasMaxLength(10)
                    .HasColumnName("LI_ReadTypeCode")
                    .IsFixedLength(true);

                entity.Property(e => e.LiSiteNo).HasColumnName("LI_SiteNo");

                entity.Property(e => e.LiSpInvoiceNo).HasColumnName("LI_SP_InvoiceNo");
            });

            modelBuilder.Entity<VBvcEstimatesAllSite>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Estimates_All_Sites");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.ErrorDescription)
                    .HasMaxLength(255)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.EstimateCount).HasColumnName("Estimate_Count");

                entity.Property(e => e.HasAnActual).HasColumnName("Has_An_Actual");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.LastActualRead)
                    .HasColumnType("date")
                    .HasColumnName("Last_Actual_Read");

                entity.Property(e => e.LatestSpin).HasColumnName("LatestSPIN");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.Retailer).HasMaxLength(20);

                entity.Property(e => e.SiteComments).IsUnicode(false);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);
            });

            modelBuilder.Entity<VBvcExpectedRaw>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_ExpectedRaw");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.HistInvEnd).HasColumnType("date");

                entity.Property(e => e.HistInvStart).HasColumnType("date");

                entity.Property(e => e.HistInvToPay).HasColumnType("money");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteNoInvoices).HasColumnName("SiteNo_Invoices");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitTotal).HasColumnName("Unit_Total");
            });

            modelBuilder.Entity<VBvcExpectedRawBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_ExpectedRaw_Base");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.SpinvNumber)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitTotal).HasColumnName("Unit_Total");
            });

            modelBuilder.Entity<VBvcExpectedSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Expected_Summary");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ActualHistory).HasColumnName("Actual_History");

                entity.Property(e => e.ActualHistoryCalculatedByDays).HasColumnName("Actual_History_Calculated_By_Days");

                entity.Property(e => e.ClientCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.ErrorDescription)
                    .HasMaxLength(76)
                    .IsUnicode(false);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(1)
                    .HasColumnName("ProductID");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerName).HasMaxLength(50);

                entity.Property(e => e.SiteType).HasMaxLength(50);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.StartDate).HasColumnType("date");
            });

            modelBuilder.Entity<VBvcExpectedSummaryFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Expected_Summary_Final");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ActualHistory).HasColumnName("Actual_History");

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.ErrorDescription)
                    .HasMaxLength(76)
                    .IsUnicode(false);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.MaxConsumption).HasColumnName("Max Consumption");

                entity.Property(e => e.MaxConsumptionReadTypeCode)
                    .HasMaxLength(10)
                    .HasColumnName("Max Consumption ReadTypeCode");

                entity.Property(e => e.MaxConsumptionSpin).HasColumnName("Max Consumption SPIN");

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerName).HasMaxLength(50);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(50);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.Property(e => e.Variance).HasColumnName("% variance'");
            });

            modelBuilder.Entity<VBvcExpectedSummaryMaxConsumption>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_ExpectedSummary_Max_Consumption");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcFirstInvoicePerSpid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_First_Invoice_Per_SPID");

                entity.Property(e => e.AmountToPayInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Amount to Pay (incl GST)");

                entity.Property(e => e.EndDate)
                    .HasColumnType("date")
                    .HasColumnName("End Date");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(27)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Comments");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.StartDate)
                    .HasColumnType("date")
                    .HasColumnName("Start Date");

                entity.Property(e => e.StartDate1)
                    .HasColumnType("date")
                    .HasColumnName("StartDate");

                entity.Property(e => e.Utility).HasMaxLength(255);
            });

            modelBuilder.Entity<VBvcFirstInvoicePerSpid1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_First_Invoice_Per_SPID_1");

                entity.Property(e => e.MinOfInvStartDate).HasColumnType("date");
            });

            modelBuilder.Entity<VBvcFloorAreaCheckSqmTotalSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Floor_Area_Check_SQM_Total_Sub");

                entity.Property(e => e.AvgSqmTotal).HasColumnName("Avg_SQM_Total");

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.MinSqmTotal).HasColumnName("Min_SQM_Total");

                entity.Property(e => e.SiteType).HasMaxLength(255);
            });

            modelBuilder.Entity<VBvcFloorAreaCheckSumOccupied>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Floor_Area_Check_Sum_Occupied");

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SumSqmOccupied).HasColumnName("Sum_SQM_Occupied");
            });

            modelBuilder.Entity<VBvcFloorAreaCheckTotalSqmValue>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Floor_Area_Check_Total_SQM_Value");

                entity.Property(e => e.AvgSqmTotal).HasColumnName("AVG_SQM_Total");

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);
            });

            modelBuilder.Entity<VBvcFloorAreaTestOccupiedMatchesTotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Floor_Area_Test_Occupied_Matches_Total");

                entity.Property(e => e.CalcSqMetresTotal).HasColumnName("Calc_SqMetresTotal");

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.Spid).HasColumnName("SPID");
            });

            modelBuilder.Entity<VBvcFloorAreaTestSqmTotalConsistancy>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Floor_Area_Test_SQM_Total_Consistancy");

                entity.Property(e => e.AvgSqmTotal).HasColumnName("Avg_SQM_Total");

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(53)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.SiteComment)
                    .IsUnicode(false)
                    .HasColumnName("Site Comment");

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.SumSqmOccupied).HasColumnName("Sum_SQM_Occupied");
            });

            modelBuilder.Entity<VBvcFloorCheckSqmTotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Floor_Check_SQM_Totals");

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);
            });

            modelBuilder.Entity<VBvcFloorCheckSqmTotalsCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Floor_Check_SQM_Totals_Count");

                entity.Property(e => e.ClientRef).HasMaxLength(200);
            });

            modelBuilder.Entity<VBvcFloorFinalTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Floor_Final_Test");

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Region).HasMaxLength(200);

                entity.Property(e => e.Region2).HasMaxLength(200);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SqmManaged).HasColumnName("SQM_managed");
            });

            modelBuilder.Entity<VBvcFloorOccSumedNotEqualTotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Floor_Occ_Sumed_Not_Equal_Total");

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);
            });

            modelBuilder.Entity<VBvcFloorSqmTotalsFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Floor_SQM_Totals_Final");

                entity.Property(e => e.ClientRef).HasMaxLength(200);
            });

            modelBuilder.Entity<VBvcFloorSumOcc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Floor_Sum_Occ");

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);
            });

            modelBuilder.Entity<VBvcFloorTotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Floor_Total");

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);
            });

            modelBuilder.Entity<VBvcFloorTotalSameAccessCref>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Floor_Total_Same_Access_CREF");

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(23)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Region).HasMaxLength(200);

                entity.Property(e => e.Region2).HasMaxLength(200);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SqmManaged).HasColumnName("SQM_managed");
            });

            modelBuilder.Entity<VBvcFutureInvoiceEnteredDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Future_Invoice_Entered_Date");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(37)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.InvEnteredDate).HasColumnType("date");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TodaySDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Today's Date");
            });

            modelBuilder.Entity<VBvcFutureInvoiceIssueDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Future_Invoice_Issue_Date");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(29)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TodaySDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Today's Date");
            });

            modelBuilder.Entity<VBvcGreenEnergyVerification>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Green_Energy_Verification");

                entity.Property(e => e.CalculatedGreenConsumption).HasColumnName("Calculated Green consumption");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.GreenConsumption).HasColumnName("Green consumption");

                entity.Property(e => e.GreenEnergy).HasColumnName("Green Energy %");

                entity.Property(e => e.InvoiceNotes)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Notes");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.TotalConsumption).HasColumnName("Total Consumption");

                entity.Property(e => e.Utility).HasMaxLength(255);
            });

            modelBuilder.Entity<VBvcGstTickMismatchTTariffsTInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_GST_Tick_Mismatch_tTariffs_tInvoices");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(52)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.GstInInvoiceLines).HasColumnName("GST in InvoiceLines");

                entity.Property(e => e.GstInTTariffs).HasColumnName("GST in tTariffs");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");
            });

            modelBuilder.Entity<VBvcGstTickMismatchTTariffsTInvoicesSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_GST_Tick_Mismatch_tTariffs_tInvoices_Sub");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.GstInInvoiceLines).HasColumnName("GST in InvoiceLines");

                entity.Property(e => e.GstInTTariffs).HasColumnName("GST in tTariffs");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");
            });

            modelBuilder.Entity<VBvcHeaderConsumptionIsNotZero>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Header_Consumption_Is_Not_Zero");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");
            });

            modelBuilder.Entity<VBvcHeaderConsumptionIsZero>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Header_Consumption_Is_Zero");

                entity.Property(e => e.DoLinesHaveRateUnitCodedConsumption).HasColumnName("Do_Lines_Have_Rate/Unit_Coded_Consumption");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(26)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.HeaderUnits).HasColumnName("Header_Units");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.LinesUnits).HasColumnName("Lines_Units");

                entity.Property(e => e.MaxSpinno).HasColumnName("MaxSPINNo");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.NoOfDaysOfZeroConsumption).HasColumnName("No of days of zero consumption");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Utility).HasMaxLength(255);
            });

            modelBuilder.Entity<VBvcHeaderConsumptionIsZero1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Header_Consumption_Is_Zero_1");

                entity.Property(e => e.ConsumptionExpected).HasColumnName("Consumption_Expected");

                entity.Property(e => e.DoLinesHaveRateUnitCodedConsumption).HasColumnName("Do_Lines_Have_Rate/Unit_Coded_Consumption");

                entity.Property(e => e.HeaderUnits).HasColumnName("Header_Units");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Comments");

                entity.Property(e => e.LinesUnits).HasColumnName("Lines_Units");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.ProductSubCatCode)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat_Code");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcHeaderConsumptionNotMatchLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Header_Consumption_Not_Match_Lines");

                entity.Property(e => e.CalculatedUnits).HasColumnName("Calculated Units");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(39)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Comments");

                entity.Property(e => e.InvoicedUnits).HasColumnName("Invoiced Units");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcHeaderNonBlankField>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Header_Non_Blank_Fields");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(29)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvEnteredDate).HasColumnType("date");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitTotal).HasColumnName("Unit_Total");
            });

            modelBuilder.Entity<VBvcIcpDuplicate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_ICP_Duplicates");

                entity.Property(e => e.Icp)
                    .HasMaxLength(100)
                    .HasColumnName("ICP");
            });

            modelBuilder.Entity<VBvcInputtypesMismatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Inputtypes_Mismatch");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(37)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.SpidInputType)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("SPID InputType");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.SpinInputType)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("SPIN InputType");
            });

            modelBuilder.Entity<VBvcInvSiteNotInSite>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Inv_Site_Not_In_Sites");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcInvoiceEndDateExceedsCeasedDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_End_Date_Exceeds_Ceased_Date");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.DateCeased).HasColumnType("date");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerName).HasMaxLength(50);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcInvoiceFieldsNull>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_Fields_Null");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.InvAmount).HasColumnType("money");

                entity.Property(e => e.InvAmountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountExGST");

                entity.Property(e => e.InvAmountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountGST");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvAmountToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPayExGST");

                entity.Property(e => e.InvAmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPayGST");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvDiscountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountExGST");

                entity.Property(e => e.InvDiscountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountGST");

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST");

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.OpeningBalanceExGst)
                    .HasColumnType("money")
                    .HasColumnName("OpeningBalanceExGST");

                entity.Property(e => e.OpeningBalanceGst)
                    .HasColumnType("money")
                    .HasColumnName("OpeningBalanceGST");

                entity.Property(e => e.Spin).HasColumnName("SPIN");
            });

            modelBuilder.Entity<VBvcInvoiceHeaderNoLinesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_Header_No_lines_View");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcInvoiceIssue>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_Issues");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcInvoiceLinesNoHeaderView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_Lines_No_Header_View");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("Error Description");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VBvcInvoiceNoDaysHeaderVsDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_No_Days_HeaderVsDates");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CalculatedNoDays).HasColumnName("Calculated_No_Days");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(48)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.HeaderNoDays).HasColumnName("Header_No_Days");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");
            });

            modelBuilder.Entity<VBvcInvoiceNoDaysHeaderVsLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BVC_Invoice_No_Days_HeaderVsLines");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CorrectUnits).HasColumnName("Correct Units");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumOfDaysWhenUnitsDevidedByMultiplier).HasColumnName("SumOfDays_When_Units_Devided_By_Multiplier");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VBvcInvoiceNoDaysHeaderVsLines1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BVC_Invoice_No_Days_HeaderVsLines1");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CorrectUnits).HasColumnName("Correct Units");

                entity.Property(e => e.CountSpin).HasColumnName("CountSPIN");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VBvcInvoiceNoDaysHeaderVsLines2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BVC_Invoice_No_Days_HeaderVsLines2");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CorrectUnits).HasColumnName("Correct Units");

                entity.Property(e => e.CountSpin).HasColumnName("CountSPIN");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(52)
                    .IsUnicode(false)
                    .HasColumnName("Error Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VBvcInvoiceNoDaysMatchCalculatesDay>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_No_Days_Match_Calculates_Days");

                entity.Property(e => e.CorrectUnits).HasColumnName("Correct Units");

                entity.Property(e => e.DaysWhenUnitsDevidedByMultiplier).HasColumnName("Days_When_Units_Devided_By_Multiplier");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitType).HasMaxLength(50);
            });

            modelBuilder.Entity<VBvcInvoiceNoDaysMatchExpectedTariff>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_No_Days_Match_Expected_Tariffs");

                entity.Property(e => e.ChildSpid).HasColumnName("Child_SPID");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvoiceSpid).HasColumnName("Invoice_SPID");

                entity.Property(e => e.ParentSpid).HasColumnName("Parent_SPID");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.RatesUnitType)
                    .HasMaxLength(50)
                    .HasColumnName("Rates_UnitType");

                entity.Property(e => e.SiteNoForTariff).HasColumnName("Site_No_For_Tariff");

                entity.Property(e => e.SpidToTariff).HasColumnName("SPID_To_Tariff");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SplitType)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("Split_Type");

                entity.Property(e => e.SplitValue).HasColumnName("Split_Value");

                entity.Property(e => e.Status).HasMaxLength(25);

                entity.Property(e => e.TariffDescription).HasMaxLength(255);

                entity.Property(e => e.TariffId).HasColumnName("TariffID");
            });

            modelBuilder.Entity<VBvcInvoiceNoDaysMatchFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_No_Days_Match_Final");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.CheckSumDaysWhenUnitsDividedByMultiplierFromTariff).HasColumnName("CheckSum - Days_When_Units_Divided_By_Multiplier (from Tariff)");

                entity.Property(e => e.DataEntryNotes).HasColumnName("Data_Entry_Notes");

                entity.Property(e => e.DaysUsedInLines).HasColumnName("Days_Used_InLines");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(51)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.HeaderCorrectUnits).HasColumnName("Header Correct Units");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.LinesCorrectUnits).HasColumnName("Lines Correct Units");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.SplitValue).HasColumnName("Split_Value");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitType).HasMaxLength(50);
            });

            modelBuilder.Entity<VBvcInvoiceNoDaysMatchFinalOutput>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_No_Days_Match_Final_Output");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.CalculatedLinesNumberOfDays).HasColumnName("Calculated Lines number of days");

                entity.Property(e => e.DataEntryNotes).HasColumnName("Data_Entry_Notes");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(51)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.HeaderNumberOfDays).HasColumnName("Header number of days");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.LinesNumberOfDays).HasColumnName("Lines number of days");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.SplitValue).HasColumnName("Split_Value");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");
            });

            modelBuilder.Entity<VBvcInvoiceNoDaysMatchSplitLookup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_No_Days_Match_SPLIT_lookup");

                entity.Property(e => e.ChildSpid).HasColumnName("Child_SPID");

                entity.Property(e => e.InvoiceSpid).HasColumnName("Invoice_SPID");

                entity.Property(e => e.ParentSpid).HasColumnName("Parent_SPID");

                entity.Property(e => e.SpidToTariff).HasColumnName("SPID_To_Tariff");

                entity.Property(e => e.SplitType)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("Split_Type");

                entity.Property(e => e.SplitValue).HasColumnName("Split_Value");
            });

            modelBuilder.Entity<VBvcInvoiceNoDaysMatchSumStep1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_No_Days_Match_Sum_Step_1");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.SiteNoForTariff).HasColumnName("Site_No_For_Tariff");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffDescription).HasMaxLength(255);

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitType).HasMaxLength(50);
            });

            modelBuilder.Entity<VBvcInvoiceNoDaysMatchSumUnitsUsed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_No_Days_Match_SumUnitsUsed");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.SiteNoForTariff).HasColumnName("Site_No_For_Tariff");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffDescription).HasMaxLength(255);

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitType).HasMaxLength(50);
            });

            modelBuilder.Entity<VBvcInvoiceNoDaysSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_No_Days_Sub");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CorrectUnits).HasColumnName("Correct Units");

                entity.Property(e => e.DaysWhenUnitsDevidedByMultiplier).HasColumnName("Days_When_Units_Devided_By_Multiplier");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VBvcInvoiceNoDaysSumUnitsUsed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_No_Days_SumUnitsUsed");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VBvcInvoiceNoOfDaysMain>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_No_Of_Days_Main");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CorrectUnits).HasColumnName("Correct Units");

                entity.Property(e => e.DataEntryNotes).HasColumnName("Data_Entry_Notes");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(51)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VBvcInvoiceOpeningBalanceTypeInvalid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_Opening_Balance_Type_Invalid");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(41)
                    .IsUnicode(false)
                    .HasColumnName("Error Description");

                entity.Property(e => e.InvOpenBalType).HasMaxLength(10);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcInvoiceReadTypeNotListView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_ReadType_Not_List_View");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcInvoiceReadTypeNotListViewSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_ReadType_Not_List_View_Sub");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcInvoiceTotalsValidation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BVC_InvoiceTotalsValidation");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmount).HasColumnType("money");

                entity.Property(e => e.InvAmountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountExGST");

                entity.Property(e => e.InvAmountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountGST");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvAmountToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPayExGST");

                entity.Property(e => e.InvAmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPayGST");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvDiscountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountExGST");

                entity.Property(e => e.InvDiscountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountGST");

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.OpeningBalanceExGst)
                    .HasColumnType("money")
                    .HasColumnName("OpeningBalanceExGST");

                entity.Property(e => e.OpeningBalanceGst)
                    .HasColumnType("money")
                    .HasColumnName("OpeningBalanceGST");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcInvoiceTotalsValidationSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_InvoiceTotalsValidation_Summary");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(81)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test10InvTotalGst)
                    .HasColumnType("money")
                    .HasColumnName("Test10 – InvTotal GST");

                entity.Property(e => e.Test11InvTotalInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Test11 – InvTotal InclGST");

                entity.Property(e => e.Test12AmountToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("Test12 – AmountToPay ExGST");

                entity.Property(e => e.Test13AmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("Test13 – AmountToPay GST");

                entity.Property(e => e.Test14AmountToPayInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Test14 – AmountToPay InclGST");

                entity.Property(e => e.Test1ObExGst)
                    .HasColumnType("money")
                    .HasColumnName("Test1 – OB ExGST");

                entity.Property(e => e.Test2ObGst)
                    .HasColumnType("money")
                    .HasColumnName("Test2 – OB GST");

                entity.Property(e => e.Test3LineTotalExGst)
                    .HasColumnType("money")
                    .HasColumnName("Test3 – LineTotal ExGST");

                entity.Property(e => e.Test4LineTotalGst)
                    .HasColumnType("money")
                    .HasColumnName("Test4 – LineTotal GST");

                entity.Property(e => e.Test5LineTotalInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Test5 – LineTotal InclGST");

                entity.Property(e => e.Test6PpdExGst)
                    .HasColumnType("money")
                    .HasColumnName("Test6 – PPD ExGST");

                entity.Property(e => e.Test7PpdGst)
                    .HasColumnType("money")
                    .HasColumnName("Test7 – PPD GST");

                entity.Property(e => e.Test8PpdInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Test8 – PPD InclGST");

                entity.Property(e => e.Test9InvTotalExGst)
                    .HasColumnType("money")
                    .HasColumnName("Test9 – InvTotal ExGST");
            });

            modelBuilder.Entity<VBvcInvoiceTotalsValidationTest1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_Totals_Validation_Test1");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test1ObExGst)
                    .HasColumnType("money")
                    .HasColumnName("Test1 – OB ExGST");
            });

            modelBuilder.Entity<VBvcInvoiceTotalsValidationTest10>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_Totals_Validation_Test10");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test10InvTotalGst)
                    .HasColumnType("money")
                    .HasColumnName("Test10 – InvTotal GST");
            });

            modelBuilder.Entity<VBvcInvoiceTotalsValidationTest11>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_Totals_Validation_Test11");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test11InvTotalInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Test11 – InvTotal InclGST");
            });

            modelBuilder.Entity<VBvcInvoiceTotalsValidationTest12>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_Totals_Validation_Test12");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test12AmountToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("Test12 – AmountToPay ExGST");
            });

            modelBuilder.Entity<VBvcInvoiceTotalsValidationTest13>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_Totals_Validation_Test13");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test13AmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("Test13 – AmountToPay GST");
            });

            modelBuilder.Entity<VBvcInvoiceTotalsValidationTest14>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_Totals_Validation_Test14");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test14AmountToPayInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Test14 – AmountToPay InclGST");
            });

            modelBuilder.Entity<VBvcInvoiceTotalsValidationTest2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_Totals_Validation_Test2");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test2ObGst)
                    .HasColumnType("money")
                    .HasColumnName("Test2 – OB GST");
            });

            modelBuilder.Entity<VBvcInvoiceTotalsValidationTest3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_Totals_Validation_Test3");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test3LineTotalExGst)
                    .HasColumnType("money")
                    .HasColumnName("Test3 – LineTotal ExGST");
            });

            modelBuilder.Entity<VBvcInvoiceTotalsValidationTest4>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_Totals_Validation_Test4");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test4LineTotalGst)
                    .HasColumnType("money")
                    .HasColumnName("Test4 – LineTotal GST");
            });

            modelBuilder.Entity<VBvcInvoiceTotalsValidationTest5>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_Totals_Validation_Test5");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test5LineTotalInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Test5 – LineTotal InclGST");
            });

            modelBuilder.Entity<VBvcInvoiceTotalsValidationTest6>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_Totals_Validation_Test6");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test6PpdExGst)
                    .HasColumnType("money")
                    .HasColumnName("Test6 – PPD ExGST");
            });

            modelBuilder.Entity<VBvcInvoiceTotalsValidationTest7>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_Totals_Validation_Test7");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test7PpdGst)
                    .HasColumnType("money")
                    .HasColumnName("Test7 – PPD GST");
            });

            modelBuilder.Entity<VBvcInvoiceTotalsValidationTest8>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_Totals_Validation_Test8");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test8PpdInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Test8 – PPD InclGST");
            });

            modelBuilder.Entity<VBvcInvoiceTotalsValidationTest9>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_Totals_Validation_Test9");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test9InvTotalExGst)
                    .HasColumnType("money")
                    .HasColumnName("Test9 – InvTotal ExGST");
            });

            modelBuilder.Entity<VBvcInvoiceUndeletedCheck>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_Undeleted_Check");

                entity.Property(e => e.ChildSiteAccount)
                    .HasMaxLength(461)
                    .HasColumnName("Child_Site_Account");

                entity.Property(e => e.NewInvoice).HasColumnName("New_Invoice");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SplitClientCode)
                    .HasMaxLength(255)
                    .HasColumnName("Split_Client_Code");

                entity.Property(e => e.SplitId).HasColumnName("Split_ID");

                entity.Property(e => e.SplitParentSite).HasColumnName("Split_Parent_Site");
            });

            modelBuilder.Entity<VBvcInvoiceUnitTypeDiffRatesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoice_UnitType_Diff_Rates_View");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(27)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.RatesUnitType)
                    .HasMaxLength(50)
                    .HasColumnName("Rates_UnitType");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Spil).HasColumnName("SPIL");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffDescription)
                    .HasMaxLength(250)
                    .HasColumnName("Tariff_Description");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VBvcInvoicesTaggedZero>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Invoices_Tagged_Zero");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(28)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Comments");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcKeyFieldsBlankStep2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Key_Fields_Blank_Step2");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CalSqMetres).HasColumnName("Cal_SqMetres");

                entity.Property(e => e.ClientCode).HasMaxLength(10);

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Error1)
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("Error 1");

                entity.Property(e => e.Error2)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("Error 2");

                entity.Property(e => e.Error3)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("Error 3");

                entity.Property(e => e.Error4)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("Error 4");

                entity.Property(e => e.Error5)
                    .HasMaxLength(23)
                    .IsUnicode(false)
                    .HasColumnName("Error 5");

                entity.Property(e => e.Error6)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Error 6");

                entity.Property(e => e.Error7)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Error 7");

                entity.Property(e => e.Error8)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("Error 8");

                entity.Property(e => e.Error9)
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("Error 9");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.MaxInvEndDate).HasColumnType("date");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.Region).HasMaxLength(200);

                entity.Property(e => e.Region2).HasMaxLength(200);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");
            });

            modelBuilder.Entity<VBvcKeySitesFieldBlankPre>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Key_Sites_Field_Blank_Pre");

                entity.Property(e => e.MaxInvEndDate).HasColumnType("date");

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);
            });

            modelBuilder.Entity<VBvcKeySitesFieldsBlank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Key_Sites_Fields_Blank");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CalSqMetres).HasColumnName("Cal_SqMetres");

                entity.Property(e => e.ClientCode).HasMaxLength(10);

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Error1)
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("Error 1");

                entity.Property(e => e.Error2)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("Error 2");

                entity.Property(e => e.Error3)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("Error 3");

                entity.Property(e => e.Error4)
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("Error 4");

                entity.Property(e => e.Error5)
                    .HasMaxLength(23)
                    .IsUnicode(false)
                    .HasColumnName("Error 5");

                entity.Property(e => e.Error6)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Error 6");

                entity.Property(e => e.Error7)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Error 7");

                entity.Property(e => e.Error8)
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("Error 8");

                entity.Property(e => e.Error9)
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("Error 9");

                entity.Property(e => e.ErrorDescription)
                    .HasMaxLength(235)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.MaxInvEndDate).HasColumnType("date");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.Region).HasMaxLength(200);

                entity.Property(e => e.Region2).HasMaxLength(200);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");
            });

            modelBuilder.Entity<VBvcKgVsCalculatedKWh>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Kg_Vs_Calculated_kWh");

                entity.Property(e => e.CalculatedKWh).HasColumnName("Calculated kWh");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(53)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.HeaderKWh).HasColumnName("Header kWh");

                entity.Property(e => e.KWhDifference).HasColumnName("kWh difference");

                entity.Property(e => e.LinesKg).HasColumnName("Lines_Kg");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UtilityCode)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("Utility_Code");
            });

            modelBuilder.Entity<VBvcKgVsCalculatedKWhPre>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BVC_Kg_Vs_Calculated_kWh_pre");

                entity.Property(e => e.CalculatedKWhPre).HasColumnName("Calculated kWh pre");

                entity.Property(e => e.HeaderKWh).HasColumnName("Header kWh");

                entity.Property(e => e.KWhDifference).HasColumnName("kWh difference");

                entity.Property(e => e.LinesKg).HasColumnName("Lines kg");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UtilityCode)
                    .HasMaxLength(255)
                    .HasColumnName("Utility_Code");
            });

            modelBuilder.Entity<VBvcKwhSum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_KWH_Sum");

                entity.Property(e => e.HeaderKWh).HasColumnName("Header_kWh");

                entity.Property(e => e.RateCategory)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VBvcLastInvReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_LastInvReport");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.BillingFrequency)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Billing_Frequency");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.Lastinvoicedate).HasColumnType("date");

                entity.Property(e => e.Lastinvoicedto).HasColumnType("date");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.ProductId)
                    .HasMaxLength(255)
                    .HasColumnName("ProductID");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitTotal).HasColumnName("Unit_Total");
            });

            modelBuilder.Entity<VBvcLastInvReportFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_LastInvReport_Final");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.BillingFrequency)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Billing_Frequency");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.Lastinvoicedate).HasColumnType("date");

                entity.Property(e => e.Lastinvoicedto).HasColumnType("date");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitTotal).HasColumnName("Unit_Total");
            });

            modelBuilder.Entity<VBvcLastInvToDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_LastInvToDate");

                entity.Property(e => e.MaxInvEndDate).HasColumnType("date");

                entity.Property(e => e.MaxInvStartDate).HasColumnType("date");

                entity.Property(e => e.MaxSpinvNumber).HasColumnName("MaxSPInvNumber");
            });

            modelBuilder.Entity<VBvcLastInvToDateSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_LastInvToDate_Sub");

                entity.Property(e => e.MaxInvEndDate).HasColumnType("date");

                entity.Property(e => e.MaxInvStartDate).HasColumnType("date");
            });

            modelBuilder.Entity<VBvcLineTotalFromTariff>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Line_Total_From_Tariffs");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(68)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.LineTotal).HasColumnName("Line Total");

                entity.Property(e => e.LineValue).HasColumnName("Line_Value");

                entity.Property(e => e.LtBatchNo).HasColumnName("LT_BatchNo");

                entity.Property(e => e.LtInvLineNo).HasColumnName("LT_InvLineNo");

                entity.Property(e => e.LtRateId).HasColumnName("LT_RateID");

                entity.Property(e => e.LtSiteNo).HasColumnName("LT_SiteNo");

                entity.Property(e => e.LtSpinvNumber).HasColumnName("LT_SPInvNumber");

                entity.Property(e => e.LtTariffDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LT_TariffDescription");

                entity.Property(e => e.LtTariffId).HasColumnName("LT_TariffID");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RegistryNetwork)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Network");

                entity.Property(e => e.RegistryPriceCat)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Price_Cat");

                entity.Property(e => e.RetailerName).HasMaxLength(20);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site_Comments");

                entity.Property(e => e.TariffValue).HasColumnName("Tariff_Value");
            });

            modelBuilder.Entity<VBvcLineTotalNotBalancing>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Line_Total_Not_Balancing");

                entity.Property(e => e.CalculatedLineTotal).HasColumnName("Calculated line total");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.LineDescription)
                    .HasMaxLength(250)
                    .HasColumnName("Line Description");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(1)
                    .HasColumnName("ProductID");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.Spil).HasColumnName("SPIL");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.SpinDays).HasColumnName("SPIN Days");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UtilityCode)
                    .HasMaxLength(255)
                    .HasColumnName("Utility_Code");
            });

            modelBuilder.Entity<VBvcLineTotalNotBalancing1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Line_Total_Not_Balancing_1");

                entity.Property(e => e.CalculatedLineTotal).HasColumnName("Calculated line total");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.LineDescription)
                    .HasMaxLength(250)
                    .HasColumnName("Line Description");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(1)
                    .HasColumnName("ProductID");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.Spil).HasColumnName("SPIL");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.SpinDays).HasColumnName("SPIN Days");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VBvcLineTotalNotBalancingMain>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Line_Total_Not_Balancing_Main");

                entity.Property(e => e.CalculatedLineTotal).HasColumnName("Calculated line total");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.LineDescription)
                    .HasMaxLength(250)
                    .HasColumnName("Line Description");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(1)
                    .HasColumnName("ProductID");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.Spil).HasColumnName("SPIL");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.SpinDays).HasColumnName("SPIN Days");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VBvcLineTotalsValidation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Line_Totals_Validation");

                entity.Property(e => e.CalculatedLineTotalInclGst).HasColumnName("Calculated Line Total Incl GST");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(66)
                    .IsUnicode(false)
                    .HasColumnName("Error Description");

                entity.Property(e => e.LineTotalExGst).HasColumnName("Line Total Ex GST");

                entity.Property(e => e.LineTotalGst).HasColumnName("Line Total GST");

                entity.Property(e => e.LineTotalInclGst).HasColumnName("Line Total Incl GST");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spil).HasColumnName("SPIL");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VBvcMaxConsumptionExceeded>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Max_Consumption_Exceeded");

                entity.Property(e => e.ConsumptionDay).HasColumnName("Consumption/Day");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Comments");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.RateMaxConsumption).HasColumnName("Rate Max Consumption");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spil).HasColumnName("SPIL");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.Utility)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<VBvcMaxDailyConsumptionExceeded>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Max_Daily_Consumption_Exceeded");

                entity.Property(e => e.ConsumptionDay).HasColumnName("Consumption/Day");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Comments");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spil).HasColumnName("SPIL");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.TariffMaxDailyConsumption).HasColumnName("Tariff Max Daily Consumption");

                entity.Property(e => e.Utility)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<VBvcMeterReadFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Meter_Read_Final");

                entity.Property(e => e.CalculatedUnits).HasColumnName("Calculated Units");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(49)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Comments");

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffDescription)
                    .HasMaxLength(250)
                    .HasColumnName("Tariff Description");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VBvcMjSum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_MJ_Sum");

                entity.Property(e => e.RateCategory)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VBvcMjToKwhTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_MJ_To_KWH_Test");

                entity.Property(e => e.CalculatedGj).HasColumnName("Calculated_GJ");

                entity.Property(e => e.CalculatedKwh).HasColumnName("Calculated_KWh");

                entity.Property(e => e.CalculatedMj).HasColumnName("Calculated_MJ");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(53)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.GjDifference).HasColumnName("GJ_Difference");

                entity.Property(e => e.HeaderKWh).HasColumnName("Header_kWh");

                entity.Property(e => e.LinesMj).HasColumnName("Lines_MJ");

                entity.Property(e => e.MjDifference).HasColumnName("MJ_Difference");

                entity.Property(e => e.RatioGj)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Ratio_GJ");

                entity.Property(e => e.RatioMj)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Ratio_MJ");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Utility).HasMaxLength(255);
            });

            modelBuilder.Entity<VBvcMultipleInvBatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Multiple_Inv_Batch");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(17)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Comments");

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");
            });

            modelBuilder.Entity<VBvcMultipleInvoiceTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Multiple_Invoice_Test");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(41)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.RetailerInvNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Retailer Inv Number");

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcMultipleInvoiceTestTce>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Multiple_Invoice_Test_TCE");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvStartDate).HasColumnType("date");
            });

            modelBuilder.Entity<VBvcMultipleInvoicesByBatchFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Multiple_Invoices_By_Batch_Final");

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.Date).HasColumnType("datetime");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(39)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcMultipleInvoicesBySite>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Multiple_Invoices_By_Site");
            });

            modelBuilder.Entity<VBvcMultiplierNotMatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Multiplier_Not_Match");

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Comments");

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spil).HasColumnName("SPIL");

                entity.Property(e => e.SpilMultiplier).HasColumnName("SPIL Multiplier");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.TariffDescription)
                    .HasMaxLength(250)
                    .HasColumnName("Tariff Description");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.TariffMultiplier).HasColumnName("Tariff Multiplier");
            });

            modelBuilder.Entity<VBvcMultiplierNotMatchFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Multiplier_Not_Match_Final");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(48)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Comments");

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spil).HasColumnName("SPIL");

                entity.Property(e => e.SpilMultiplier).HasColumnName("SPIL Multiplier");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.TariffDescription)
                    .HasMaxLength(250)
                    .HasColumnName("Tariff Description");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.TariffMultiplier).HasColumnName("Tariff Multiplier");
            });

            modelBuilder.Entity<VBvcMultiplierNotMatchPre>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Multiplier_Not_Match_Pre");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");
            });

            modelBuilder.Entity<VBvcNegNoOfDaysNonReversal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Neg_NoOfDays_Non_Reversal");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(52)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitTotal).HasColumnName("Unit_Total");
            });

            modelBuilder.Entity<VBvcNoObType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_No_OB_Type");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvOpenBalType).HasMaxLength(10);

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.RetailerName).HasMaxLength(50);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcNoOfInvoicesNetAmt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_NoOfInvoicesNetAmt");

                entity.Property(e => e.EarliestDueDate)
                    .HasColumnType("date")
                    .HasColumnName("Earliest Due Date");

                entity.Property(e => e.Kwh).HasColumnName("KWh");

                entity.Property(e => e.Ppdvalue)
                    .HasColumnType("money")
                    .HasColumnName("PPDValue");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.RetailerName).HasMaxLength(50);

                entity.Property(e => e.SumOfInvAmountToPay).HasColumnType("money");
            });

            modelBuilder.Entity<VBvcNoOfInvoicesNetAmtInvDue>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_No_Of_Invoices_Net_Amt_InvDue");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvNumber).HasMaxLength(50);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.RetailerName).HasMaxLength(50);

                entity.Property(e => e.SumOfInvAmtToPay).HasColumnType("money");

                entity.Property(e => e.SumOfKwh).HasColumnName("SumOfKWH");

                entity.Property(e => e.SumOfPpdValue)
                    .HasColumnType("money")
                    .HasColumnName("SumOfPPD Value");
            });

            modelBuilder.Entity<VBvcNoOfInvoicesNetAmtInvDueDateSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_No_Of_Invoices_Net_Amt_InvDueDate_Sub");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.InvAmountToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPay_ExGST");

                entity.Property(e => e.InvAmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPay_GST");

                entity.Property(e => e.InvAmtToPay).HasColumnType("money");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Kwh).HasColumnName("KWH");

                entity.Property(e => e.PpdValue)
                    .HasColumnType("money")
                    .HasColumnName("PPD Value");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.RetailerName).HasMaxLength(50);

                entity.Property(e => e.SumInvLinesTotalGstFree).HasColumnName("Sum_InvLinesTotal_GST_Free");
            });

            modelBuilder.Entity<VBvcNoOfInvoicesNetAmtInvDueDateSubPre2dp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_No_Of_Invoices_Net_Amt_InvDueDate_Sub_Pre2dp");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.InvAmountToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPay_ExGST");

                entity.Property(e => e.InvAmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPay_GST");

                entity.Property(e => e.InvAmtToPay).HasColumnType("money");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Kwh).HasColumnName("KWH");

                entity.Property(e => e.PpdValue)
                    .HasColumnType("money")
                    .HasColumnName("PPD Value");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.RetailerName).HasMaxLength(50);

                entity.Property(e => e.SumInvLinesTotalGstFree).HasColumnName("Sum_InvLinesTotal_GST_Free");
            });

            modelBuilder.Entity<VBvcNullSiteStartDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Null_Site_StartDate");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.DateAdded).HasColumnType("date");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(28)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.FirstInvoiceStartDate).HasColumnType("date");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.ManagedSite).HasColumnName("Managed Site");

                entity.Property(e => e.RetailerName).HasMaxLength(50);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.StartDate).HasColumnType("date");
            });

            modelBuilder.Entity<VBvcNullValueInvoiceLinesMeterReadingFiled>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Null_Value_Invoice_Lines_Meter_Reading_Fileds");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(54)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcNullValuesInvoiceLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Null_Values_Invoice_Lines");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(63)
                    .IsUnicode(false)
                    .HasColumnName("Error_description");

                entity.Property(e => e.InvLineTotalGst).HasColumnName("InvLineTotal_GST");

                entity.Property(e => e.InvLineTotalInclGst).HasColumnName("InvLineTotal_Incl_GST");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VBvcOcAndWuMeterRead>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_OC_And_WU_Meter_Read");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.QuId).HasColumnName("Qu_ID");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcOpeningBalNoGst>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Opening_Bal_No_GST");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(42)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.OpeningBalanceExGst)
                    .HasColumnType("money")
                    .HasColumnName("OpeningBalanceExGST");

                entity.Property(e => e.OpeningBalanceGst)
                    .HasColumnType("money")
                    .HasColumnName("OpeningBalanceGST");

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.ProductSubCatCode)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat_Code");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcOpeningBalance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_OpeningBalances");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvOpenBalType).HasMaxLength(10);

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.PreviousSpin).HasColumnName("PreviousSPIN");

                entity.Property(e => e.PreviousSpinPpd)
                    .HasColumnType("money")
                    .HasColumnName("PreviousSPIN PPD");

                entity.Property(e => e.PreviousSpinamounttoPay)
                    .HasColumnType("money")
                    .HasColumnName("PreviousSPINAmounttoPay");

                entity.Property(e => e.PreviousSpinamounttoPayPpd)
                    .HasColumnType("money")
                    .HasColumnName("PreviousSPINAmounttoPayPPD");

                entity.Property(e => e.PreviousSpindueDate)
                    .HasColumnType("date")
                    .HasColumnName("PreviousSPINDueDate");

                entity.Property(e => e.RegistryNetwork)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Network");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpininvoiceDate)
                    .HasColumnType("date")
                    .HasColumnName("SPINInvoiceDate");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcPayee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Payee");

                entity.Property(e => e.AnalysisCode)
                    .HasMaxLength(200)
                    .HasColumnName("Analysis Code");

                entity.Property(e => e.BankAccount).HasMaxLength(50);

                entity.Property(e => e.ContactEmail).HasMaxLength(50);

                entity.Property(e => e.EarliestDueDate)
                    .HasColumnType("date")
                    .HasColumnName("Earliest_Due_Date");

                entity.Property(e => e.ExGstAmountGstApplicableCharges)
                    .HasColumnType("money")
                    .HasColumnName("ex-GST amount (GST-applicable charges)");

                entity.Property(e => e.GstAmount)
                    .HasColumnType("money")
                    .HasColumnName("GST amount");

                entity.Property(e => e.GstFreeCharges)
                    .HasColumnType("money")
                    .HasColumnName("GST-free charges");

                entity.Property(e => e.InclGstAmount)
                    .HasColumnType("money")
                    .HasColumnName("Incl-GST amount");

                entity.Property(e => e.InvoiceCount).HasColumnName("Invoice_Count");

                entity.Property(e => e.Kwh).HasColumnName("KWh");

                entity.Property(e => e.Particulars).HasMaxLength(50);

                entity.Property(e => e.Payee).HasMaxLength(50);

                entity.Property(e => e.Ppd)
                    .HasColumnType("money")
                    .HasColumnName("PPD");

                entity.Property(e => e.Reference)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RetailerRef)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VBvcPayeeDueDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Payee_DueDate");

                entity.Property(e => e.AnalysisCode)
                    .HasMaxLength(200)
                    .HasColumnName("Analysis Code");

                entity.Property(e => e.BankAccount).HasMaxLength(50);

                entity.Property(e => e.Contactemail).HasMaxLength(50);

                entity.Property(e => e.ExGstAmountGstApplicableCharges)
                    .HasColumnType("money")
                    .HasColumnName("ex-GST amount (GST-applicable charges)");

                entity.Property(e => e.GstAmount)
                    .HasColumnType("money")
                    .HasColumnName("GST amount");

                entity.Property(e => e.GstFreeCharges)
                    .HasColumnType("money")
                    .HasColumnName("GST-free charges");

                entity.Property(e => e.InclGstAmount)
                    .HasColumnType("money")
                    .HasColumnName("Incl-GST amount");

                entity.Property(e => e.InvoiceCount).HasColumnName("Invoice Count");

                entity.Property(e => e.InvoiceDueDate).HasColumnType("date");

                entity.Property(e => e.KWh).HasColumnName("kWh");

                entity.Property(e => e.Particulars).HasMaxLength(50);

                entity.Property(e => e.Payee).HasMaxLength(50);

                entity.Property(e => e.Ppdvalue)
                    .HasColumnType("money")
                    .HasColumnName("PPDValue");

                entity.Property(e => e.Reference).HasMaxLength(50);

                entity.Property(e => e.RetailerRef)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VBvcPayeeDueDatePre2dp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Payee_DueDate_Pre2dp");

                entity.Property(e => e.AnalysisCode)
                    .HasMaxLength(200)
                    .HasColumnName("Analysis Code");

                entity.Property(e => e.BankAccount).HasMaxLength(50);

                entity.Property(e => e.Contactemail).HasMaxLength(50);

                entity.Property(e => e.ExGstAmountGstApplicableCharges)
                    .HasColumnType("money")
                    .HasColumnName("ex-GST amount (GST-applicable charges)");

                entity.Property(e => e.GstAmount)
                    .HasColumnType("money")
                    .HasColumnName("GST amount");

                entity.Property(e => e.GstFreeCharges)
                    .HasColumnType("money")
                    .HasColumnName("GST-free charges");

                entity.Property(e => e.InclGstAmount)
                    .HasColumnType("money")
                    .HasColumnName("Incl-GST amount");

                entity.Property(e => e.InvoiceCount).HasColumnName("Invoice Count");

                entity.Property(e => e.InvoiceDueDate).HasColumnType("date");

                entity.Property(e => e.KWh).HasColumnName("kWh");

                entity.Property(e => e.Particulars).HasMaxLength(50);

                entity.Property(e => e.Payee).HasMaxLength(50);

                entity.Property(e => e.Ppdvalue)
                    .HasColumnType("money")
                    .HasColumnName("PPDValue");

                entity.Property(e => e.Reference).HasMaxLength(50);

                entity.Property(e => e.RetailerRef)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VBvcPenaltyCharge>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Penalty_Charge");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(28)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice_Comments");

                entity.Property(e => e.PenaltyCharge).HasColumnName("Penalty Charge");

                entity.Property(e => e.PenaltyRate).HasColumnName("Penalty_Rate");

                entity.Property(e => e.PowerFactor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site_Comments");

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spil).HasColumnName("SPIL");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.TariffDescription).HasMaxLength(255);
            });

            modelBuilder.Entity<VBvcPpdExGstCheck>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_PPD_ExGST_Check");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.CalculatedDiscount).HasColumnName("Calculated discount");

                entity.Property(e => e.CalculatedPpdexGst).HasColumnName("Calculated PPDexGST");

                entity.Property(e => e.ClientCode).HasMaxLength(10);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvoicePpdexGst)
                    .HasColumnType("money")
                    .HasColumnName("InvoicePPDexGST");

                entity.Property(e => e.Ppd).HasColumnName("PPD");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeCode)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcPpdExGstCheckFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_PPD_ExGST_Check_Final");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.CalculatedDiscount).HasColumnName("Calculated discount");

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(27)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvoicePpdexGst)
                    .HasColumnType("money")
                    .HasColumnName("InvoicePPDexGST");

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteTypeCode)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcPpdInclGstCheck>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_PPD_Incl_GST_Check");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.CalculatedDiscount).HasColumnName("Calculated discount");

                entity.Property(e => e.CalculatedPpdInclGst).HasColumnName("Calculated PPD_Incl_GST");

                entity.Property(e => e.ClientCode).HasMaxLength(10);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvoicePpdInclGst)
                    .HasColumnType("money")
                    .HasColumnName("InvoicePPD_Incl_GST");

                entity.Property(e => e.Ppd).HasColumnName("PPD");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeCode)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumLineTotalInclGst).HasColumnName("SumLineTotal_Incl_GST");
            });

            modelBuilder.Entity<VBvcPpdInclGstCheckFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_PPD_Incl_GST_Check_Final");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ApplySitePpd).HasColumnName("Apply_Site_PPD");

                entity.Property(e => e.CalculatedDiscount).HasColumnName("Calculated discount");

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(27)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvoicePpdInclGst)
                    .HasColumnType("money")
                    .HasColumnName("InvoicePPD_Incl_GST");

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteTypeCode)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcPpdTickMismatchTTariffsTInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_PPD_Tick_Mismatch_tTariffs_tInvoices");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(52)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.PpdInInvoiceLines).HasColumnName("PPD in InvoiceLines");

                entity.Property(e => e.PpdInTTariffs).HasColumnName("PPD in tTariffs");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");
            });

            modelBuilder.Entity<VBvcPpdTickMismatchTTariffsTInvoicesSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_PPD_Tick_Mismatch_tTariffs_tInvoices_Sub");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.PpdInInvoiceLines).HasColumnName("PPD in InvoiceLines");

                entity.Property(e => e.PpdInTTariffs).HasColumnName("PPD in tTariffs");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");
            });

            modelBuilder.Entity<VBvcPreInvCreditPre>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Pre_Inv_Credit_Pre");

                entity.Property(e => e.CurrentEndDate)
                    .HasColumnType("date")
                    .HasColumnName("Current_End_Date");

                entity.Property(e => e.CurrentInv).HasColumnName("Current_Inv");

                entity.Property(e => e.CurrentStartDate)
                    .HasColumnType("date")
                    .HasColumnName("Current_Start_Date");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(39)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.InvNotes).HasMaxLength(250);

                entity.Property(e => e.PrevCreditInv).HasColumnName("Prev_CreditInv");

                entity.Property(e => e.PrevEndDate)
                    .HasColumnType("date")
                    .HasColumnName("Prev_End_Date");

                entity.Property(e => e.PrevInv).HasColumnName("Prev_Inv");

                entity.Property(e => e.PrevInvAmtToPay).HasColumnName("Prev_Inv_Amt_To_Pay");

                entity.Property(e => e.PrevStartDate)
                    .HasColumnType("date")
                    .HasColumnName("Prev_Start_Date");

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site_Comments");

                entity.Property(e => e.SiteType).HasMaxLength(255);
            });

            modelBuilder.Entity<VBvcPrevInvCredit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Prev_Inv_Credit");

                entity.Property(e => e.CurrentEndDate)
                    .HasColumnType("date")
                    .HasColumnName("Current_End_Date");

                entity.Property(e => e.CurrentInv).HasColumnName("Current_Inv");

                entity.Property(e => e.CurrentInvOb).HasColumnName("Current Inv OB");

                entity.Property(e => e.CurrentStartDate)
                    .HasColumnType("date")
                    .HasColumnName("Current_Start_Date");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(39)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.InvNotes).HasMaxLength(250);

                entity.Property(e => e.PrevEndDate)
                    .HasColumnType("date")
                    .HasColumnName("Prev_End_Date");

                entity.Property(e => e.PrevInv).HasColumnName("Prev_Inv");

                entity.Property(e => e.PrevInvAmtToPay).HasColumnName("Prev_Inv_Amt_To_Pay");

                entity.Property(e => e.PrevStartDate)
                    .HasColumnType("date")
                    .HasColumnName("Prev_Start_Date");

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site_Comments");

                entity.Property(e => e.SiteType).HasMaxLength(255);
            });

            modelBuilder.Entity<VBvcQuerySavingsOutstanding>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Query_Savings_Outstanding");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.Category).HasMaxLength(255);

                entity.Property(e => e.DateAdded)
                    .HasColumnType("date")
                    .HasColumnName("Date_Added");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.ManagedBy).HasMaxLength(255);

                entity.Property(e => e.QuOverview).HasColumnName("Qu_Overview");

                entity.Property(e => e.Quclass)
                    .HasMaxLength(255)
                    .HasColumnName("QUClass");

                entity.Property(e => e.Quid).HasColumnName("QUID");

                entity.Property(e => e.ReviewDate).HasColumnType("date");

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.Spib).HasColumnName("SPIB");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.Supplier).HasMaxLength(255);
            });

            modelBuilder.Entity<VBvcRateId0>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_RateID_0");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(9)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VBvcRateIdNotInRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_RateID_Not_In_Rates");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(31)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcRateTariffMismatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Rate_Tariff_Mismatch");

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.InvoiceLinesRateId).HasColumnName("Invoice_Lines_RateID");

                entity.Property(e => e.InvoiceSpid).HasColumnName("Invoice_SPID");

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.SiteType)
                    .HasMaxLength(50)
                    .HasColumnName("Site_Type");

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.Spil).HasColumnName("SPIL");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffSpid).HasColumnName("Tariff_SPID");

                entity.Property(e => e.TariffsRateId).HasColumnName("Tariffs_RateID");
            });

            modelBuilder.Entity<VBvcReadingGap>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Reading_Gaps");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.MeterNo).HasMaxLength(255);

                entity.Property(e => e.PrevCurrReading).HasColumnName("Prev_CurrReading");

                entity.Property(e => e.PrevInvNotes)
                    .HasMaxLength(255)
                    .HasColumnName("Prev_InvNotes");

                entity.Property(e => e.PrevInvStartDate)
                    .HasColumnType("date")
                    .HasColumnName("Prev_InvStartDate");

                entity.Property(e => e.PrevTariffId).HasColumnName("Prev_TariffID");

                entity.Property(e => e.PreviousSpil).HasColumnName("Previous SPIL");

                entity.Property(e => e.PreviousSpin).HasColumnName("Previous_SPIN");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(1)
                    .HasColumnName("ProductID");

                entity.Property(e => e.Rank1).HasColumnName("rank1");

                entity.Property(e => e.RetailerName).HasMaxLength(50);

                entity.Property(e => e.SiteNotes).IsUnicode(false);

                entity.Property(e => e.Spil).HasColumnName("SPIL");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VBvcReadingGapsSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_BVC_Reading_Gaps_sub");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.MeterNo).HasMaxLength(255);

                entity.Property(e => e.ProductId)
                    .HasMaxLength(1)
                    .HasColumnName("ProductID");

                entity.Property(e => e.Rank1).HasColumnName("rank1");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VBvcRedFlag>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_RedFlag");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ClientCc)
                    .HasMaxLength(200)
                    .HasColumnName("ClientCC");

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.DateCeased).HasColumnType("date");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(59)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.Region).HasMaxLength(200);

                entity.Property(e => e.Region2).HasMaxLength(200);

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.Spib).HasColumnName("SPIB");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.StartDate).HasColumnType("date");
            });

            modelBuilder.Entity<VBvcRedFlagAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_RedFlag_All");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.DateCeased).HasColumnType("date");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.StartDate).HasColumnType("date");
            });

            modelBuilder.Entity<VBvcRedflagAllSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Redflag_All_Sub");

                entity.Property(e => e.MaxOfSpinvNumber).HasColumnName("MaxOfSPInvNumber");
            });

            modelBuilder.Entity<VBvcRepBatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_RepBatch");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.BpayCode)
                    .HasMaxLength(20)
                    .HasColumnName("BPayCode");

                entity.Property(e => e.BpayReference)
                    .HasMaxLength(20)
                    .HasColumnName("BPayReference");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Kwh).HasColumnName("KWh");

                entity.Property(e => e.NetInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Net Incl GST");

                entity.Property(e => e.Site).HasMaxLength(255);

                entity.Property(e => e.Spno).HasColumnName("SPNo");

                entity.Property(e => e.Supplier).HasMaxLength(50);
            });

            modelBuilder.Entity<VBvcRepBatchPre2dp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_RepBatch_Pre2dp");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.BpayCode)
                    .HasMaxLength(20)
                    .HasColumnName("BPayCode");

                entity.Property(e => e.BpayReference)
                    .HasMaxLength(20)
                    .HasColumnName("BPayReference");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Kwh).HasColumnName("KWh");

                entity.Property(e => e.NetInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Net Incl GST");

                entity.Property(e => e.Site).HasMaxLength(255);

                entity.Property(e => e.Spno).HasColumnName("SPNo");

                entity.Property(e => e.Supplier).HasMaxLength(50);
            });

            modelBuilder.Entity<VBvcRepBatchSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_RepBatch_Sub");

                entity.Property(e => e.AccNo).HasMaxLength(200);

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.BankAccount).HasMaxLength(50);

                entity.Property(e => e.ContactEmail).HasMaxLength(50);

                entity.Property(e => e.Discount).HasColumnType("money");

                entity.Property(e => e.EarliestDueDate)
                    .HasColumnType("date")
                    .HasColumnName("Earliest_Due_Date");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.OpeningBal).HasColumnType("money");

                entity.Property(e => e.Particulars).HasMaxLength(50);

                entity.Property(e => e.Ppdvalue)
                    .HasColumnType("money")
                    .HasColumnName("PPDValue");

                entity.Property(e => e.ReadType).HasMaxLength(10);

                entity.Property(e => e.Region2).HasMaxLength(200);

                entity.Property(e => e.RetailerName).HasMaxLength(50);

                entity.Property(e => e.RetailerRef)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumInvAmountToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("Sum_InvAmountToPay_ExGST");

                entity.Property(e => e.SumInvAmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("Sum_InvAmountToPay_GST");

                entity.Property(e => e.SumInvLinesTotalGstFree)
                    .HasColumnType("money")
                    .HasColumnName("Sum_InvLinesTotal_GST_Free");

                entity.Property(e => e.SumOfInvAmountToPay).HasColumnType("money");
            });

            modelBuilder.Entity<VBvcRepBatchSubPre2dp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_RepBatch_Sub_Pre2dp");

                entity.Property(e => e.AccNo).HasMaxLength(200);

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.BankAccount).HasMaxLength(50);

                entity.Property(e => e.ContactEmail).HasMaxLength(50);

                entity.Property(e => e.Discount).HasColumnType("money");

                entity.Property(e => e.EarliestDueDate)
                    .HasColumnType("date")
                    .HasColumnName("Earliest_Due_Date");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.OpeningBal).HasColumnType("money");

                entity.Property(e => e.Particulars).HasMaxLength(50);

                entity.Property(e => e.Ppdvalue)
                    .HasColumnType("money")
                    .HasColumnName("PPDValue");

                entity.Property(e => e.ReadType).HasMaxLength(10);

                entity.Property(e => e.Region2).HasMaxLength(200);

                entity.Property(e => e.RetailerName).HasMaxLength(50);

                entity.Property(e => e.RetailerRef)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumInvAmountToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("Sum_InvAmountToPay_ExGST");

                entity.Property(e => e.SumInvAmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("Sum_InvAmountToPay_GST");

                entity.Property(e => e.SumInvLinesTotalGstFree)
                    .HasColumnType("money")
                    .HasColumnName("Sum_InvLinesTotal_GST_Free");

                entity.Property(e => e.SumOfInvAmountToPay).HasColumnType("money");
            });

            modelBuilder.Entity<VBvcSiteCeasedDatesBlank>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Site_Ceased_Dates_Blank");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.DateCeased).HasColumnType("date");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerName).HasMaxLength(50);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");
            });

            modelBuilder.Entity<VBvcSiteInvByBatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Site_Inv_By_Batch");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcSiteInvLastEndDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Site_Inv_Last_End_Date");

                entity.Property(e => e.LastInvDate).HasColumnType("date");

                entity.Property(e => e.LastInvEndDate).HasColumnType("date");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcSiteRetailerDiffToInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Site_Retailer_Diff_To_Invoice");

                entity.Property(e => e.InvoiceRetailerCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("Invoice retailer Code");

                entity.Property(e => e.SiteRetailerCode)
                    .HasMaxLength(20)
                    .HasColumnName("Site retailer Code");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcSitesCeasedFinalInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Sites_Ceased_Final_Invoice");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.DateCeased).HasColumnType("date");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.MaxOfInvEndDate).HasColumnType("date");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.Rdtypcd)
                    .HasMaxLength(10)
                    .HasColumnName("rdtypcd");

                entity.Property(e => e.RetailerName).HasMaxLength(50);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcSitesCeasedFinalInvoiceSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Sites_Ceased_Final_Invoice_Sub");

                entity.Property(e => e.MaxOfInvEndDate).HasColumnType("date");
            });

            modelBuilder.Entity<VBvcSitesNoInvoiceCurrentBatchMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Sites_No_Invoice_Current_Batch_Month");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(49)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.LastInvDate).HasColumnType("date");

                entity.Property(e => e.LastInvTo).HasColumnType("date");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.ReadType)
                    .HasMaxLength(10)
                    .HasColumnName("Read Type");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.Spin).HasColumnName("SPIN");
            });

            modelBuilder.Entity<VBvcSitesSplit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Sites_Split");

                entity.Property(e => e.ChildSiteAccount)
                    .HasMaxLength(461)
                    .HasColumnName("Child_Site_Account");

                entity.Property(e => e.SplitAccountPostFix)
                    .HasMaxLength(255)
                    .HasColumnName("Split_Account_PostFix");

                entity.Property(e => e.SplitClientCode)
                    .HasMaxLength(255)
                    .HasColumnName("Split_Client_Code");

                entity.Property(e => e.SplitId).HasColumnName("Split_ID");

                entity.Property(e => e.SplitParentSite).HasColumnName("Split_Parent_Site");

                entity.Property(e => e.SplitValue).HasColumnName("Split_Value");
            });

            modelBuilder.Entity<VBvcSpidNotFound>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SPID_Not_Found");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcSplitCheck>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Split_Check");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(82)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SplitClientCode)
                    .HasMaxLength(255)
                    .HasColumnName("Split_Client_Code");

                entity.Property(e => e.SplitParentSite).HasColumnName("Split_Parent_Site");

                entity.Property(e => e.SumOfSplitShouldEqual1).HasColumnName("Sum of Split Should equal 1");
            });

            modelBuilder.Entity<VBvcSplitInvoicesByBatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Split_invoices_By_Batch");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ChildSiteAccount)
                    .HasMaxLength(461)
                    .HasColumnName("Child_Site_Account");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.NewInvoice).HasColumnName("New_Invoice");

                entity.Property(e => e.ReadyForUpload).HasColumnName("Ready_For_Upload");

                entity.Property(e => e.SiteCreateError)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("Site_Create_Error");

                entity.Property(e => e.SiteExitsError)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("Site_Exits_Error");

                entity.Property(e => e.SiteFixError)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Site Fix Error");

                entity.Property(e => e.SiteSplitError)
                    .IsRequired()
                    .HasMaxLength(17)
                    .IsUnicode(false)
                    .HasColumnName("Site Split Error");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SplitAccountPostFix)
                    .HasMaxLength(255)
                    .HasColumnName("Split_Account_PostFix");

                entity.Property(e => e.SplitClientCode)
                    .HasMaxLength(255)
                    .HasColumnName("Split_Client_Code");

                entity.Property(e => e.SplitId).HasColumnName("Split_ID");

                entity.Property(e => e.SplitParentSite).HasColumnName("Split_Parent_Site");

                entity.Property(e => e.SplitSubTotal).HasColumnName("Split_Sub_Total");

                entity.Property(e => e.SumOfSplitValue).HasColumnName("SumOfSplit_Value");
            });

            modelBuilder.Entity<VBvcSplitInvoicesResult>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Split_Invoices_Results");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.NewInvoice).HasColumnName("New_Invoice");
            });

            modelBuilder.Entity<VBvcSplitSitesByBatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Split_Sites_By_Batch");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SiteNo).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<VBvcSplitSitesExist>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Split_Sites_Exist");

                entity.Property(e => e.ChildSiteAccount)
                    .HasMaxLength(461)
                    .HasColumnName("Child_Site_Account");

                entity.Property(e => e.SplitId).HasColumnName("Split_ID");

                entity.Property(e => e.SplitParentSite).HasColumnName("Split_Parent_Site");
            });

            modelBuilder.Entity<VBvcSplitSumSplitByParent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Split_Sum_Split_By_Parent");

                entity.Property(e => e.SplitClientCode)
                    .HasMaxLength(255)
                    .HasColumnName("Split_Client_Code");

                entity.Property(e => e.SplitParentSite).HasColumnName("Split_Parent_Site");

                entity.Property(e => e.SumOfSplitValue).HasColumnName("SumOfSplit_Value");
            });

            modelBuilder.Entity<VBvcSplitsAwaitingWork>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Splits_Awaiting_Work");

                entity.Property(e => e.BatchNumber).HasColumnName("Batch_Number");

                entity.Property(e => e.ChildSite).HasColumnName("Child Site");

                entity.Property(e => e.NewInvoice).HasColumnName("New_Invoice");

                entity.Property(e => e.ParentSite).HasColumnName("Parent Site");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SplitId).HasColumnName("Split_ID");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.AmountToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("AmountToPayExGST");

                entity.Property(e => e.AmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("AmountToPayGST");

                entity.Property(e => e.AmountToPayInclGst)
                    .HasColumnType("money")
                    .HasColumnName("AmountToPayInclGST");

                entity.Property(e => e.AmtToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("AmtToPayExGST");

                entity.Property(e => e.AmtToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("AmtToPayGST");

                entity.Property(e => e.AmtToPayInclGst)
                    .HasColumnType("money")
                    .HasColumnName("AmtToPayInclGST");

                entity.Property(e => e.CurrentChargesExGst)
                    .HasColumnType("money")
                    .HasColumnName("CurrentChargesExGST");

                entity.Property(e => e.CurrentChargesGst)
                    .HasColumnType("money")
                    .HasColumnName("CurrentChargesGST");

                entity.Property(e => e.CurrentChargesInclGst)
                    .HasColumnType("money")
                    .HasColumnName("CurrentChargesInclGST");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvDiscountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountExGST");

                entity.Property(e => e.InvDiscountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountGST");

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.LineTotalExGst)
                    .HasColumnType("money")
                    .HasColumnName("LineTotal ExGST");

                entity.Property(e => e.LineTotalGst)
                    .HasColumnType("money")
                    .HasColumnName("LineTotalGST");

                entity.Property(e => e.LineTotalInclGst)
                    .HasColumnType("money")
                    .HasColumnName("LineTotalInclGST");

                entity.Property(e => e.ObExGst)
                    .HasColumnType("money")
                    .HasColumnName("OB ExGST");

                entity.Property(e => e.ObGst)
                    .HasColumnType("money")
                    .HasColumnName("OB GST");

                entity.Property(e => e.ObInclGst)
                    .HasColumnType("money")
                    .HasColumnName("OB InclGST");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TaxRate).HasColumnName("Tax_Rate");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationChk>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Chk");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.AmountToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("AmountToPayExGST");

                entity.Property(e => e.AmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("AmountToPayGST");

                entity.Property(e => e.AmountToPayInclGst)
                    .HasColumnType("money")
                    .HasColumnName("AmountToPayInclGST");

                entity.Property(e => e.AmtToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("AmtToPayExGST");

                entity.Property(e => e.AmtToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("AmtToPayGST");

                entity.Property(e => e.AmtToPayInclGst)
                    .HasColumnType("money")
                    .HasColumnName("AmtToPayInclGST");

                entity.Property(e => e.ApplySitePpd).HasColumnName("Apply_Site_PPD");

                entity.Property(e => e.CurrentChargesExGst)
                    .HasColumnType("money")
                    .HasColumnName("CurrentChargesExGST");

                entity.Property(e => e.CurrentChargesGst)
                    .HasColumnType("money")
                    .HasColumnName("CurrentChargesGST");

                entity.Property(e => e.CurrentChargesInclGst)
                    .HasColumnType("money")
                    .HasColumnName("CurrentChargesInclGST");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvDiscountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountExGST");

                entity.Property(e => e.InvDiscountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountGST");

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.LineTotalExGst)
                    .HasColumnType("money")
                    .HasColumnName("LineTotal ExGST");

                entity.Property(e => e.LineTotalGst)
                    .HasColumnType("money")
                    .HasColumnName("LineTotalGST");

                entity.Property(e => e.LineTotalInclGst)
                    .HasColumnType("money")
                    .HasColumnName("LineTotalInclGST");

                entity.Property(e => e.ObExGst)
                    .HasColumnType("money")
                    .HasColumnName("OB ExGST");

                entity.Property(e => e.ObGst)
                    .HasColumnType("money")
                    .HasColumnName("OB GST");

                entity.Property(e => e.ObGst1).HasColumnName("OB_GST");

                entity.Property(e => e.ObInclGst)
                    .HasColumnType("money")
                    .HasColumnName("OB InclGST");

                entity.Property(e => e.PpdGst).HasColumnName("PPD_GST");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TaxRate).HasColumnName("Tax_Rate");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationChkSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Chk_Summary");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(89)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test10CurrentChargesInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Test 10 - CurrentChargesInclGST");

                entity.Property(e => e.Test11AmtToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("Test 11- AmtToPayExGST");

                entity.Property(e => e.Test12AmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("Test 12 - AmountToPayGST");

                entity.Property(e => e.Test13AmtToPayInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Test 13 - AmtToPayInclGST");

                entity.Property(e => e.Test1ObExgst)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Test 1 - OB EXGST");

                entity.Property(e => e.Test2Obgst).HasColumnName("Test 2 - OBGST");

                entity.Property(e => e.Test3LineTotalExGst).HasColumnName("Test3 - Line Total ExGST");

                entity.Property(e => e.Test4LineTotalGst).HasColumnName("Test 4 - LineTotalGST");

                entity.Property(e => e.Test5SubTotal)
                    .HasColumnType("money")
                    .HasColumnName("Test 5 - Sub Total");

                entity.Property(e => e.Test6).HasColumnName("Test 6");

                entity.Property(e => e.Test7)
                    .HasColumnType("money")
                    .HasColumnName("Test 7");

                entity.Property(e => e.Test8CurrentChargesExGst)
                    .HasColumnType("money")
                    .HasColumnName("Test 8 - CurrentChargesExGST");

                entity.Property(e => e.Test9CurrentChargesGst)
                    .HasColumnType("money")
                    .HasColumnName("Test 9 - CurrentChargesGST");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationChkTest10>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Chk_Test10");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test10CurrentChargesInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Test 10 - CurrentChargesInclGST");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationChkTest11>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Chk_Test11");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test11AmtToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("Test 11- AmtToPayExGST");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationChkTest12>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Chk_Test12");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test12AmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("Test 12 - AmountToPayGST");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationChkTest13>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Chk_Test13");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test13AmtToPayInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Test 13 - AmtToPayInclGST");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationChkTest1Results1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Chk_Test1_Results1");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test1ObExgst)
                    .HasColumnType("money")
                    .HasColumnName("Test 1 - OB EXGST");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationChkTest2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Chk_Test2");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test2Obgst).HasColumnName("Test 2 - OBGST");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationChkTest2Sub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Chk_Test2_Sub");

                entity.Property(e => e.ObExGst)
                    .HasColumnType("money")
                    .HasColumnName("OB ExGST");

                entity.Property(e => e.ObGst)
                    .HasColumnType("money")
                    .HasColumnName("OB GST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TaxRate).HasColumnName("Tax_Rate");

                entity.Property(e => e.Value1).HasColumnName("Value 1");

                entity.Property(e => e.Value2).HasColumnName("Value 2");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationChkTest3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Chk_Test3");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test3LineTotalExGst).HasColumnName("Test3 - Line Total ExGST");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationChkTest3Sub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Chk_Test3_Sub");

                entity.Property(e => e.LineTotalExGst)
                    .HasColumnType("money")
                    .HasColumnName("LineTotal ExGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationChkTest4>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Chk_Test4");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test4LineTotalGst).HasColumnName("Test 4 - LineTotalGST");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationChkTest4Sub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Chk_Test4_Sub");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST");

                entity.Property(e => e.LineTotalGst)
                    .HasColumnType("money")
                    .HasColumnName("LineTotalGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumInvLineTotalGst).HasColumnName("Sum_invLineTotal_GST");

                entity.Property(e => e.TaxRate).HasColumnName("Tax_Rate");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationChkTest4Sub1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Chk_Test4_Sub1");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumInvLineTotalGst).HasColumnName("Sum_invLineTotal_GST");

                entity.Property(e => e.TaxRate).HasColumnName("Tax_Rate");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationChkTest5>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Chk_Test5");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test5SubTotal)
                    .HasColumnType("money")
                    .HasColumnName("Test 5 - Sub Total");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationChkTest6>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Chk_Test6");

                entity.Property(e => e.Discount).HasColumnName("Discount%");

                entity.Property(e => e.InvDiscountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountExGST");

                entity.Property(e => e.InvDiscountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountGST");

                entity.Property(e => e.LinePpdgst).HasColumnName("Line PPDGST");

                entity.Property(e => e.PpdGst).HasColumnName("PPD_GST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumInvLineTotalPpdgst).HasColumnName("SumInvLineTotalPPDGST");

                entity.Property(e => e.Test6).HasColumnName("Test 6");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationChkTest6Sub1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Chk_Test6_Sub1");

                entity.Property(e => e.InvDiscountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountExGST");

                entity.Property(e => e.InvLineTotalPpdgst).HasColumnName("InvLineTotalPPDGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationChkTest6Sub2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Chk_Test6_Sub2");

                entity.Property(e => e.InvDiscountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountExGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumInvLineTotalPpdgst).HasColumnName("SumInvLineTotalPPDGST");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationChkTest6Sub3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Chk_Test6_Sub3");

                entity.Property(e => e.Discount).HasColumnName("Discount%");

                entity.Property(e => e.InvDiscountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountExGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumInvLineTotalPpdgst).HasColumnName("SumInvLineTotalPPDGST");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationChkTest6Sub4>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Chk_Test6_Sub4");

                entity.Property(e => e.Discount).HasColumnName("Discount%");

                entity.Property(e => e.InvDiscountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountExGST");

                entity.Property(e => e.InvDiscountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountGST");

                entity.Property(e => e.LinePpdgst).HasColumnName("Line PPDGST");

                entity.Property(e => e.PpdGst).HasColumnName("PPD_GST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumInvLineTotalPpdgst).HasColumnName("SumInvLineTotalPPDGST");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationChkTest7>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Chk_Test7");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test7)
                    .HasColumnType("money")
                    .HasColumnName("Test 7");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationChkTest8>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Chk_Test8");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test8CurrentChargesExGst)
                    .HasColumnType("money")
                    .HasColumnName("Test 8 - CurrentChargesExGST");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationChkTest9>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Chk_Test9");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test9CurrentChargesGst)
                    .HasColumnType("money")
                    .HasColumnName("Test 9 - CurrentChargesGST");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Summary");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(89)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test10CurrentChargesInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Test 10 - CurrentChargesInclGST");

                entity.Property(e => e.Test11AmtToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("Test 11- AmtToPayExGST");

                entity.Property(e => e.Test12AmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("Test 12 - AmountToPayGST");

                entity.Property(e => e.Test13AmtToPayInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Test 13 - AmtToPayInclGST");

                entity.Property(e => e.Test1ObExgst)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Test 1 - OB EXGST");

                entity.Property(e => e.Test2Obgst).HasColumnName("Test 2 - OBGST");

                entity.Property(e => e.Test3LineTotalExGst).HasColumnName("Test3 - Line Total ExGST");

                entity.Property(e => e.Test4LineTotalGst).HasColumnName("Test 4 - LineTotalGST");

                entity.Property(e => e.Test5SubTotal)
                    .HasColumnType("money")
                    .HasColumnName("Test 5 - Sub Total");

                entity.Property(e => e.Test6).HasColumnName("Test 6");

                entity.Property(e => e.Test7)
                    .HasColumnType("money")
                    .HasColumnName("Test 7");

                entity.Property(e => e.Test8CurrentChargesExGst)
                    .HasColumnType("money")
                    .HasColumnName("Test 8 - CurrentChargesExGST");

                entity.Property(e => e.Test9CurrentChargesGst)
                    .HasColumnType("money")
                    .HasColumnName("Test 9 - CurrentChargesGST");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationTest10>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Test10");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test10CurrentChargesInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Test 10 - CurrentChargesInclGST");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationTest11>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Test11");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test11AmtToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("Test 11- AmtToPayExGST");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationTest12>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Test12");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test12AmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("Test 12 - AmountToPayGST");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationTest13>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Test13");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test13AmtToPayInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Test 13 - AmtToPayInclGST");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationTest1Results1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Test1_Results1");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test1ObExgst)
                    .HasColumnType("numeric(21, 4)")
                    .HasColumnName("Test 1 - OB EXGST");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationTest1Sub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Test1_Sub");

                entity.Property(e => e.ObExGst)
                    .HasColumnType("money")
                    .HasColumnName("OB ExGST");

                entity.Property(e => e.ObGst)
                    .HasColumnType("money")
                    .HasColumnName("OB GST");

                entity.Property(e => e.ObInclGst)
                    .HasColumnType("money")
                    .HasColumnName("OB InclGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Value1)
                    .HasColumnType("numeric(20, 4)")
                    .HasColumnName("Value 1");

                entity.Property(e => e.Value2)
                    .HasColumnType("numeric(20, 4)")
                    .HasColumnName("Value 2");

                entity.Property(e => e.Value3)
                    .HasColumnType("money")
                    .HasColumnName("Value 3");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationTest2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Test2");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test2Obgst).HasColumnName("Test 2 - OBGST");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationTest2Sub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Test2_Sub");

                entity.Property(e => e.ObExGst)
                    .HasColumnType("money")
                    .HasColumnName("OB ExGST");

                entity.Property(e => e.ObGst)
                    .HasColumnType("money")
                    .HasColumnName("OB GST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TaxRate).HasColumnName("Tax_Rate");

                entity.Property(e => e.Value1).HasColumnName("Value 1");

                entity.Property(e => e.Value2).HasColumnName("Value 2");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationTest3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Test3");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test3LineTotalExGst).HasColumnName("Test3 - Line Total ExGST");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationTest3Sub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Test3_Sub");

                entity.Property(e => e.LineTotalExGst)
                    .HasColumnType("money")
                    .HasColumnName("LineTotal ExGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationTest4>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Test4");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test4LineTotalGst).HasColumnName("Test 4 - LineTotalGST");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationTest4Sub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Test4_Sub");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST");

                entity.Property(e => e.LineTotalGst)
                    .HasColumnType("money")
                    .HasColumnName("LineTotalGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TaxRate).HasColumnName("Tax_Rate");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationTest4Sub1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Test4_Sub1");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TaxRate).HasColumnName("Tax_Rate");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationTest5>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Test5");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test5SubTotal)
                    .HasColumnType("money")
                    .HasColumnName("Test 5 - Sub Total");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationTest6>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Test6");

                entity.Property(e => e.Discount).HasColumnName("Discount%");

                entity.Property(e => e.InvDiscountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountExGST");

                entity.Property(e => e.InvDiscountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountGST");

                entity.Property(e => e.LinePpdgst).HasColumnName("Line PPDGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumInvLineTotalPpdgst).HasColumnName("SumInvLineTotalPPDGST");

                entity.Property(e => e.Test6).HasColumnName("Test 6");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationTest6Sub1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Test6_Sub1");

                entity.Property(e => e.InvDiscountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountExGST");

                entity.Property(e => e.InvLineTotalPpdgst).HasColumnName("InvLineTotalPPDGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationTest6Sub2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Test6_Sub2");

                entity.Property(e => e.InvDiscountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountExGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumInvLineTotalPpdgst).HasColumnName("SumInvLineTotalPPDGST");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationTest6Sub3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Test6_Sub3");

                entity.Property(e => e.Discount).HasColumnName("Discount%");

                entity.Property(e => e.InvDiscountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountExGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumInvLineTotalPpdgst).HasColumnName("SumInvLineTotalPPDGST");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationTest6Sub4>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Test6_Sub4");

                entity.Property(e => e.Discount).HasColumnName("Discount%");

                entity.Property(e => e.InvDiscountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountExGST");

                entity.Property(e => e.InvDiscountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountGST");

                entity.Property(e => e.LinePpdgst).HasColumnName("Line PPDGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumInvLineTotalPpdgst).HasColumnName("SumInvLineTotalPPDGST");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationTest7>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Test7");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test7)
                    .HasColumnType("money")
                    .HasColumnName("Test 7");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationTest8>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Test8");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test8CurrentChargesExGst)
                    .HasColumnType("money")
                    .HasColumnName("Test 8 - CurrentChargesExGST");
            });

            modelBuilder.Entity<VBvcSumInvTotalsValidationTest9>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SumInvTotalsValidation_Test9");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test9CurrentChargesGst)
                    .HasColumnType("money")
                    .HasColumnName("Test 9 - CurrentChargesGST");
            });

            modelBuilder.Entity<VBvcSumSplitByParent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Sum_Split_By_Parent");

                entity.Property(e => e.SplitClientCode)
                    .HasMaxLength(255)
                    .HasColumnName("Split_Client_Code");

                entity.Property(e => e.SplitParentSite).HasColumnName("Split_Parent_Site");

                entity.Property(e => e.SumOfSelectSplitIdFromMasterDbSharedStagingDboTSplitInvoicesConfig).HasColumnName("SumOfSELECT        Split_ID\r\n FROM            Master_DB_Shared_Staging.dbo.tSplit_Invoices_Config");
            });

            modelBuilder.Entity<VBvcSuminvTotalsValidationChkTest1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SuminvTotalsValidation_Chk_Test1");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test1ObExgst)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Test 1 - OB EXGST");
            });

            modelBuilder.Entity<VBvcSuminvTotalsValidationChkTest1Sub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SuminvTotalsValidation_Chk_Test1_Sub");

                entity.Property(e => e.ObExGst)
                    .HasColumnType("money")
                    .HasColumnName("OB ExGST");

                entity.Property(e => e.ObGst)
                    .HasColumnType("money")
                    .HasColumnName("OB GST");

                entity.Property(e => e.ObInclGst)
                    .HasColumnType("money")
                    .HasColumnName("OB InclGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Value1)
                    .HasColumnType("money")
                    .HasColumnName("Value 1");

                entity.Property(e => e.Value2)
                    .HasColumnType("money")
                    .HasColumnName("Value 2");

                entity.Property(e => e.Value3)
                    .HasColumnType("money")
                    .HasColumnName("Value 3");
            });

            modelBuilder.Entity<VBvcSuminvtotalsValidatioTest1Result>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SuminvtotalsValidatio_Test1_Results");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test1ObExgst)
                    .HasColumnType("numeric(21, 4)")
                    .HasColumnName("Test 1 - OB EXGST");
            });

            modelBuilder.Entity<VBvcSuminvtotalsValidationTest1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_SuminvtotalsValidation_Test1");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.Test1ObExgst)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Test 1 - OB EXGST");
            });

            modelBuilder.Entity<VBvcTariffId0>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_TariffID_0");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.LineDescription)
                    .HasMaxLength(250)
                    .HasColumnName("Line Description");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.Spil).HasColumnName("SPIL");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");
            });

            modelBuilder.Entity<VBvcTariffIdNotInTariff>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_TariffID_Not_In_Tariffs");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");
            });

            modelBuilder.Entity<VBvcTariffSiteNoMismatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Tariff_SiteNo_Mismatch");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.InvoiceSpid).HasColumnName("Invoice_SPID");

                entity.Property(e => e.IsASplitInvoice)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("Is_A_Split_Invoice");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(10)
                    .HasColumnName("ProductID");

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.SiteType)
                    .HasMaxLength(50)
                    .HasColumnName("Site_Type");

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.Spil).HasColumnName("SPIL");

                entity.Property(e => e.SpilRateId).HasColumnName("SPIL_RateID");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SplitParentSpid).HasColumnName("SPLIT_Parent_SPID");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.TariffSpid).HasColumnName("Tariff_SPID");

                entity.Property(e => e.TariffsRateId).HasColumnName("Tariffs_RateID");
            });

            modelBuilder.Entity<VBvcTariffUnitCostCheck>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Tariff_UnitCost_Check");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ActualInvLineTotal)
                    .HasColumnType("money")
                    .HasColumnName("Actual InvLineTotal");

                entity.Property(e => e.CalculatedInvLineTotal)
                    .HasColumnType("money")
                    .HasColumnName("Calculated InvLineTotal");

                entity.Property(e => e.Difference).HasColumnType("money");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(39)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.LinesUnitCost).HasColumnName("Lines_UnitCost");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RegistryNetwork)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Network");

                entity.Property(e => e.RegistryPriceCat)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Price_Cat");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.Spib).HasColumnName("SPIB");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spil).HasColumnName("SPIL");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.TariffDescription).HasMaxLength(255);

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.TariffUnitCost).HasColumnName("Tariff_UnitCost");
            });

            modelBuilder.Entity<VBvcTariffsNotUsedSelectedBatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Tariffs_Not_Used_Selected_Batch");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("Error description");

                entity.Property(e => e.PenaltyRate).HasColumnName("Penalty Rate");

                entity.Property(e => e.RateId).HasColumnName("Rate ID");

                entity.Property(e => e.RateRetailerCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("Rate Retailer Code");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.SpidRetailerCode)
                    .HasMaxLength(20)
                    .HasColumnName("SPID Retailer Code");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.SpinRetailerCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("SPIN Retailer Code");

                entity.Property(e => e.Status).HasMaxLength(25);

                entity.Property(e => e.TariffDescription)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("Tariff Description");

                entity.Property(e => e.TariffId).HasColumnName("Tariff ID");

                entity.Property(e => e.UnitCost).HasColumnName("Unit Cost");
            });

            modelBuilder.Entity<VBvcTouInvoiceGetDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_TOU_Invoice_GetDates");

                entity.Property(e => e.FirstDayCurrentMonth)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InvEndDate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InvStartDate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LastDayCurrentMonth)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SpinvNumber)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcTouInvoiceGetNotMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_TOU_Invoice_GetNotMonth");

                entity.Property(e => e.FirstDayCurrentMonth)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InvEndDate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.InvStartDate)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LastDayCurrentMonth)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.SpinvNumber)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcTouInvoiceMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_TOU_Invoice_Month");

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcTouInvoiceMonthFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_TOU_Invoice_Month_Final");

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.DateCeased).HasColumnType("date");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VBvcUnitMultiplierIntegrity>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_UnitMultiplier_Integrity");

                entity.Property(e => e.DataEntryNotes).HasColumnName("Data_Entry_Notes");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(27)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Comments");

                entity.Property(e => e.LinesUnitMultiplier).HasColumnName("Lines Unit Multiplier");

                entity.Property(e => e.LinesUnitType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Lines Unit Type");

                entity.Property(e => e.Spib).HasColumnName("SPIB");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spil).HasColumnName("SPIL");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.TariffDescription)
                    .HasMaxLength(250)
                    .HasColumnName("Tariff Description");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.TariffUnitMultiplier).HasColumnName("Tariff Unit Multiplier");

                entity.Property(e => e.UnitMultiplierType)
                    .IsRequired()
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<VBvcUnitMultiplierVerification>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_UnitMultiplier_Verification");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(28)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.LinesUnitMultiplierTotalPerTariffId).HasColumnName("LinesUnitMultiplierTotal per TariffID");

                entity.Property(e => e.Spib).HasColumnName("SPIB");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.TariffDescription).HasMaxLength(255);

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.TariffUnitMultiplierType)
                    .IsRequired()
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<VBvcUnitMultiplierVerificationLossFactor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_UnitMultiplier_Verification_Loss_Factor");

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(28)
                    .IsUnicode(false)
                    .HasColumnName("Error_description");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.LinesUnitMultiplier).HasColumnName("Lines Unit Multiplier");

                entity.Property(e => e.Spib).HasColumnName("SPIB");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spil).HasColumnName("SPIL");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.TariffDescription).HasMaxLength(255);

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.TariffUnitMultiplier).HasColumnName("Tariff Unit Multiplier");

                entity.Property(e => e.TariffUnitMultiplierType)
                    .IsRequired()
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<VBvcUnitMultiplierVerificationSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_UnitMultiplier_Verification_Sub");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitMultiplierType)
                    .IsRequired()
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<VBvcUnitMultiplierVerificationTotalMultiplierByInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_UnitMultiplier_Verification_Total_Multiplier_by_Invoice");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitMultiplierType)
                    .IsRequired()
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<VBvcUnitTypeView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Unit_Type_View");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvoiceUnitType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Invoice Unit Type");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.RatesUnitType)
                    .HasMaxLength(50)
                    .HasColumnName("Rates Unit Type");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffDescription)
                    .HasMaxLength(250)
                    .HasColumnName("Tariff_Description");
            });

            modelBuilder.Entity<VBvcUnknownIcpActiveSite>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Unknown_ICP_Active_Sites");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteNo).ValueGeneratedOnAdd();

                entity.Property(e => e.SiteStatus).HasMaxLength(200);
            });

            modelBuilder.Entity<VBvcUnknownMeterRead>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Unknown_Meter_Read");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.ErrorDescription)
                    .IsRequired()
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("Error_Description");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UtilityType)
                    .HasMaxLength(50)
                    .HasColumnName("Utility Type");
            });

            modelBuilder.Entity<VBvcUnlockedBatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Unlocked_Batches");

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.ClientCodeSp)
                    .HasMaxLength(255)
                    .HasColumnName("ClientCodeSP");

                entity.Property(e => e.InputTypeCode).HasMaxLength(50);

                entity.Property(e => e.NoOfInv).HasColumnName("No_Of_Inv");

                entity.Property(e => e.Spib).HasColumnName("SPIB");
            });

            modelBuilder.Entity<VBvcVariableIndeicesDateAnomaly>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_BVC_Variable_Indeices_Date_Anomalies");

                entity.Property(e => e.ClientCode).HasMaxLength(10);

                entity.Property(e => e.EndDate).HasColumnType("date");

                entity.Property(e => e.EndDate2).HasColumnType("date");

                entity.Property(e => e.Id)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ID");

                entity.Property(e => e.IndexType).HasMaxLength(20);

                entity.Property(e => e.IndexType2).HasMaxLength(20);

                entity.Property(e => e.Rank1).HasColumnName("rank1");

                entity.Property(e => e.Rank2).HasColumnName("rank2");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.Property(e => e.StartDate2).HasColumnType("date");
            });

            modelBuilder.Entity<VCalcConsumption>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Calc_Consumption");

                entity.Property(e => e.CalcTotalUnits).HasColumnName("Calc_Total_Units");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VCalcConsumptionBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Calc_Consumption_Base");

                entity.Property(e => e.CalcUnits).HasColumnName("Calc_Units");

                entity.Property(e => e.RateCategory)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("Unit_Type");

                entity.Property(e => e.UnitType1)
                    .HasMaxLength(50)
                    .HasColumnName("UnitType");
            });

            modelBuilder.Entity<VCalcConsumptionOrg>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Calc_Consumption_org");

                entity.Property(e => e.CalcTotalUnits).HasColumnName("Calc_Total_Units");

                entity.Property(e => e.RateCategory)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VCalcInvoiceFunctionLineTotalGst>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Calc_Invoice_Function_LineTotal_GST");

                entity.Property(e => e.CalcLineTotalGst).HasColumnName("Calc_LineTotal_GST");

                entity.Property(e => e.CalcLineTotalIncGst).HasColumnName("Calc_LineTotal_IncGST");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TaxRate).HasColumnName("Tax_Rate");
            });

            modelBuilder.Entity<VCalcInvoiceFunctionLineTotalGstByBatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Calc_Invoice_Function_LineTotal_GST_by_batch");

                entity.Property(e => e.CalcLineTotalGst).HasColumnName("Calc_LineTotal_GST");

                entity.Property(e => e.CalcLineTotalIncGst).HasColumnName("Calc_LineTotal_IncGST");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TaxRate).HasColumnName("Tax_Rate");
            });

            modelBuilder.Entity<VCalcInvoiceFunctionLinesSum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Calc_Invoice_Function_Lines_Sum");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumInvLineTotal).HasColumnName("Sum_InvLineTotal");
            });

            modelBuilder.Entity<VCalcInvoiceFunctionLinesSumGst>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Calc_Invoice_Function_Lines_Sum_GST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumInvLineTotalGst).HasColumnName("Sum_InvLineTotal_GST");
            });

            modelBuilder.Entity<VCalcInvoiceFunctionLinesSumGstBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Calc_Invoice_Function_Lines_Sum_GST_Base");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumInvLineTotalGst).HasColumnName("Sum_InvLineTotal_GST");
            });

            modelBuilder.Entity<VCalcInvoiceFunctionLinesSumPpd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Calc_Invoice_Function_Lines_Sum_PPD");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumInvLineTotalPpd).HasColumnName("Sum_InvLineTotal_PPD");
            });

            modelBuilder.Entity<VCalcInvoiceFunctionLinesSumPpdBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Calc_Invoice_Function_Lines_Sum_PPD_Base");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumInvLineTotalPpd).HasColumnName("Sum_InvLineTotal_PPD");
            });

            modelBuilder.Entity<VCalcInvoiceFunctionLinesSumPpdGst>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Calc_Invoice_Function_Lines_Sum_PPD_GST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumInvLineTotalPpdGst).HasColumnName("Sum_InvLineTotal_PPD_GST");
            });

            modelBuilder.Entity<VCalcInvoiceFunctionLinesSumPpdGstBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Calc_Invoice_Function_Lines_Sum_PPD_GST_Base");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SumInvLineTotalPpdGst).HasColumnName("Sum_InvLineTotal_PPD_GST");
            });

            modelBuilder.Entity<VCalcInvoiceFunctionSelect>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Calc_Invoice_Function_Select");

                entity.Property(e => e.CalcInvAmount)
                    .HasColumnType("money")
                    .HasColumnName("Calc_InvAmount");

                entity.Property(e => e.CalcInvAmountCalc)
                    .HasColumnType("money")
                    .HasColumnName("Calc_InvAmountCalc");

                entity.Property(e => e.CalcInvAmountExGst)
                    .HasColumnType("money")
                    .HasColumnName("Calc_InvAmountExGST");

                entity.Property(e => e.CalcInvAmountGst)
                    .HasColumnType("money")
                    .HasColumnName("Calc_InvAmountGST");

                entity.Property(e => e.CalcInvAmountToPay)
                    .HasColumnType("money")
                    .HasColumnName("Calc_InvAmountToPay");

                entity.Property(e => e.CalcInvAmountToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("Calc_InvAmountToPayExGST");

                entity.Property(e => e.CalcInvAmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("Calc_InvAmountToPayGST");

                entity.Property(e => e.CalcInvDiscountExGst)
                    .HasColumnType("money")
                    .HasColumnName("Calc_InvDiscountExGST");

                entity.Property(e => e.CalcInvDiscountGst)
                    .HasColumnType("money")
                    .HasColumnName("Calc_InvDiscountGST");

                entity.Property(e => e.CalcInvDiscountInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Calc_InvDiscount_InclGST");

                entity.Property(e => e.CalcInvGst)
                    .HasColumnType("money")
                    .HasColumnName("Calc_InvGST");

                entity.Property(e => e.CalcInvSubTotal)
                    .HasColumnType("money")
                    .HasColumnName("Calc_InvSubTotal");

                entity.Property(e => e.CalcInvTotal)
                    .HasColumnType("money")
                    .HasColumnName("Calc_InvTotal");

                entity.Property(e => e.CalcOpeningBalanceExGst)
                    .HasColumnType("money")
                    .HasColumnName("Calc_OpeningBalanceExGST");

                entity.Property(e => e.CalcOpeningBalanceGst)
                    .HasColumnType("money")
                    .HasColumnName("Calc_OpeningBalanceGST");

                entity.Property(e => e.CalcOpeningBalanceInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Calc_OpeningBalance_InclGST");

                entity.Property(e => e.ClientCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VCalcInvoiceFunctionSelectBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Calc_Invoice_Function_Select_Base");

                entity.Property(e => e.ApplySitePpd).HasColumnName("Apply_Site_PPD");

                entity.Property(e => e.BInvDiscountExGst).HasColumnName("B_InvDiscountExGST");

                entity.Property(e => e.BInvDiscountGst).HasColumnName("B_InvDiscountGST");

                entity.Property(e => e.BInvGst).HasColumnName("B_InvGST");

                entity.Property(e => e.BInvTotal).HasColumnName("B_InvTotal");

                entity.Property(e => e.BOpeningBalanceExGst).HasColumnName("B_OpeningBalanceExGST");

                entity.Property(e => e.BOpeningBalanceGst).HasColumnName("B_OpeningBalanceGST");

                entity.Property(e => e.ClientCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VCalcInvoiceGstValue>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Calc_Invoice_GST_Values");

                entity.Property(e => e.InvAmntLExclGst).HasColumnName("InvAmnt_lExclGST");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvAmtToCalcGstValue).HasColumnName("InvAmtTo_Calc_GST_Value");

                entity.Property(e => e.InvAmtToPayCalcGstValue).HasColumnName("InvAmtToPay_Calc_GST_Value");

                entity.Property(e => e.InvAmtToPayExGst).HasColumnName("InvAmtToPay_ExGST");

                entity.Property(e => e.InvAmtToPayExGstZeroCredits).HasColumnName("InvAmtToPay_ExGST_ZeroCredits");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST");

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.LineTotal).HasColumnType("money");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TaxClass)
                    .HasMaxLength(255)
                    .HasColumnName("Tax_Class");

                entity.Property(e => e.TaxPeriodEnd)
                    .HasColumnType("date")
                    .HasColumnName("Tax_Period_End");

                entity.Property(e => e.TaxPeriodStart)
                    .HasColumnType("date")
                    .HasColumnName("Tax_Period_Start");

                entity.Property(e => e.TaxRate).HasColumnName("Tax_Rate");
            });

            modelBuilder.Entity<VCalcTaxRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Calc_Tax_Rate");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TaxClass)
                    .HasMaxLength(255)
                    .HasColumnName("Tax_Class");

                entity.Property(e => e.TaxRate).HasColumnName("Tax_Rate");
            });

            modelBuilder.Entity<VConsumptionByRateClass>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Consumption_By_Rate_Class");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.HeaderConsmption).HasColumnName("Header_Consmption");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.RateCategory)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RateClass).HasMaxLength(255);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VDashboardCostExGstZeroCredit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Dashboard_CostExGST_ZeroCredits");

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.CheckHeader).HasColumnName("Check_Header");

                entity.Property(e => e.CorrectAmountPaidExGst)
                    .HasColumnType("money")
                    .HasColumnName("Correct_Amount_Paid_exGST");

                entity.Property(e => e.CreditInv1)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.EnergyType).HasMaxLength(255);

                entity.Property(e => e.HeaderKwh).HasColumnName("Header KWH");

                entity.Property(e => e.InvoiceRetailer)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("Invoice Retailer");

                entity.Property(e => e.OpeningBalanceIncGst)
                    .HasColumnType("money")
                    .HasColumnName("Opening_Balance_incGST");

                entity.Property(e => e.Region).HasMaxLength(200);

                entity.Property(e => e.Region2).HasMaxLength(200);

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");
            });

            modelBuilder.Entity<VDashboardCostExGstZeroCreditsIrd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Dashboard_CostExGST_ZeroCredits_IRD");

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.CheckHeader).HasColumnName("Check_Header");

                entity.Property(e => e.CorrectAmountPaidExGst)
                    .HasColumnType("money")
                    .HasColumnName("Correct_Amount_Paid_exGST");

                entity.Property(e => e.CreditInv1)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentRetailer)
                    .HasMaxLength(20)
                    .HasColumnName("Current Retailer");

                entity.Property(e => e.EnergyType).HasMaxLength(255);

                entity.Property(e => e.HeaderKwh).HasColumnName("Header KWH");

                entity.Property(e => e.InvoiceRetailer)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("Invoice Retailer");

                entity.Property(e => e.OpeningBalanceIncGst)
                    .HasColumnType("money")
                    .HasColumnName("Opening_Balance_incGST");

                entity.Property(e => e.Region).HasMaxLength(200);

                entity.Property(e => e.Region2).HasMaxLength(200);

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");
            });

            modelBuilder.Entity<VDefaultConsumptionType1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Default_Consumption_Type1");

                entity.Property(e => e.DefaultConsumptionUnitType)
                    .HasMaxLength(10)
                    .HasColumnName("Default_Consumption_UnitType");
            });

            modelBuilder.Entity<VDefaultConsumptionType2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Default_Consumption_Type2");
            });

            modelBuilder.Entity<VDefaultConsumptionType3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Default_Consumption_Type3");

                entity.Property(e => e.CheckUniqueConsumption).HasMaxLength(17);
            });

            modelBuilder.Entity<VDetailedInvoiceLineInformation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Detailed_InvoiceLine_information");

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.EnvironmentalMonth)
                    .HasColumnType("date")
                    .HasColumnName("Environmental Month");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.Product).HasMaxLength(50);

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.RateDescription)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VDollarsConsumptionReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Dollars_Consumption_Report");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ClientCc)
                    .HasMaxLength(200)
                    .HasColumnName("ClientCC");

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Dvn)
                    .HasMaxLength(255)
                    .HasColumnName("DVN");

                entity.Property(e => e.EnergyType).HasMaxLength(50);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.MonthSorting)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.Region).HasMaxLength(200);

                entity.Property(e => e.Region2).HasMaxLength(200);

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteLocationDd)
                    .HasMaxLength(255)
                    .HasColumnName("SiteLocationDD");

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(50);

                entity.Property(e => e.SumConsumption).HasColumnName("Sum_Consumption");

                entity.Property(e => e.SumNoOfDays).HasColumnName("Sum_No_Of_Days");

                entity.Property(e => e.SumTotalExclGst)
                    .HasColumnType("money")
                    .HasColumnName("Sum_Total_Excl_GST");
            });

            modelBuilder.Entity<VDollarsConsumptionReportNoOfday>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Dollars_Consumption_Report_NoOFDays");

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.SumNoOfDays).HasColumnName("Sum_No_Of_Days");
            });

            modelBuilder.Entity<VDollarsConsumptionReportSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Dollars_Consumption_Report_sub");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.ClientCc)
                    .HasMaxLength(200)
                    .HasColumnName("ClientCC");

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Dvn)
                    .HasMaxLength(255)
                    .HasColumnName("DVN");

                entity.Property(e => e.EnergyType).HasMaxLength(50);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.MonthSorting)
                    .HasMaxLength(7)
                    .IsUnicode(false);

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.ReadyForUpload).HasColumnName("Ready_For_Upload");

                entity.Property(e => e.Region).HasMaxLength(200);

                entity.Property(e => e.Region2).HasMaxLength(200);

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteLocationDd)
                    .HasMaxLength(255)
                    .HasColumnName("SiteLocationDD");

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(50);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TotalExclGst)
                    .HasColumnType("money")
                    .HasColumnName("TotalExclGST");

                entity.Property(e => e.UnitTotal).HasColumnName("Unit_Total");
            });

            modelBuilder.Entity<VDrOnchargeReportHowick>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_DR_Oncharge_Report_Howick");

                entity.Property(e => e.AccountCode).HasMaxLength(200);

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(200)
                    .HasColumnName("Account Number");

                entity.Property(e => e.ChargesExGst)
                    .HasMaxLength(51)
                    .IsUnicode(false)
                    .HasColumnName("Charges ex GST");

                entity.Property(e => e.ChargesGstFree)
                    .HasMaxLength(51)
                    .IsUnicode(false)
                    .HasColumnName("Charges (GST Free)");

                entity.Property(e => e.InvGst)
                    .HasMaxLength(51)
                    .IsUnicode(false)
                    .HasColumnName("Inv GST");

                entity.Property(e => e.InvoiceEndDate)
                    .HasColumnType("date")
                    .HasColumnName("Invoice End Date");

                entity.Property(e => e.InvoiceStartDate)
                    .HasColumnType("date")
                    .HasColumnName("Invoice Start Date");

                entity.Property(e => e.NmiMirn)
                    .HasMaxLength(255)
                    .HasColumnName("NMI / MIRN");

                entity.Property(e => e.NoOfDays).HasColumnName("No of Days");

                entity.Property(e => e.ReadType)
                    .HasMaxLength(10)
                    .HasColumnName("Read Type");

                entity.Property(e => e.Retailer).HasMaxLength(50);

                entity.Property(e => e.SiteDescription)
                    .HasMaxLength(255)
                    .HasColumnName("Site Description");

                entity.Property(e => e.SiteName)
                    .HasMaxLength(200)
                    .HasColumnName("Site Name");

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.Spib).HasColumnName("SPIB");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.ToPayInclGst)
                    .HasMaxLength(51)
                    .IsUnicode(false)
                    .HasColumnName("$ to Pay (incl GST)");
            });

            modelBuilder.Entity<VDropdownBatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Dropdown_Batches");

                entity.Property(e => e.BatchComments)
                    .HasMaxLength(255)
                    .HasColumnName("Batch Comments");

                entity.Property(e => e.BatchDate).HasColumnType("date");

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.NoOfInv).HasColumnName("No_Of_Inv");
            });

            modelBuilder.Entity<VDropdownReadType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Dropdown_ReadTypes");

                entity.Property(e => e.ReadTypeCalc).HasMaxLength(268);

                entity.Property(e => e.ReadTypeCode)
                    .IsRequired()
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<VEdiHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_EDI_Header");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.InvAmount).HasColumnType("money");

                entity.Property(e => e.InvAmountCalc).HasColumnType("money");

                entity.Property(e => e.InvAmountSoa)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountSOA");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvDateSql)
                    .HasPrecision(0)
                    .HasColumnName("InvDate_SQL");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvDueDateSql)
                    .HasPrecision(0)
                    .HasColumnName("InvDueDate_SQL");

                entity.Property(e => e.InvEndDateSql)
                    .HasPrecision(0)
                    .HasColumnName("InvEndDate_SQL");

                entity.Property(e => e.InvEnteredDateSql)
                    .HasPrecision(0)
                    .HasColumnName("InvEnteredDate_SQL");

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvNumber).HasMaxLength(255);

                entity.Property(e => e.InvOpenBalType).HasMaxLength(10);

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.InvStartDateSql)
                    .HasPrecision(0)
                    .HasColumnName("InvStartDate_SQL");

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode).HasMaxLength(10);

                entity.Property(e => e.SpinvNumberOrig)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SPInvNumberOrig");
            });

            modelBuilder.Entity<VEdiHeaderSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_EDI_Header_Summary");

                entity.Property(e => e.CurrentChargesExGst)
                    .HasColumnType("money")
                    .HasColumnName("Current_Charges_exGST");

                entity.Property(e => e.CurrentChargesGst)
                    .HasColumnType("money")
                    .HasColumnName("Current_Charges_GST");

                entity.Property(e => e.DiscountedAmountDueExGst)
                    .HasColumnType("money")
                    .HasColumnName("Discounted_Amount_Due_exGST");

                entity.Property(e => e.DiscountedAmountDueGst)
                    .HasColumnType("money")
                    .HasColumnName("Discounted_Amount_Due_GST");

                entity.Property(e => e.HeaderId).HasColumnName("Header_ID");

                entity.Property(e => e.OpeningBalExGst)
                    .HasColumnType("money")
                    .HasColumnName("Opening_Bal_exGST");

                entity.Property(e => e.OpeningBalGst)
                    .HasColumnType("money")
                    .HasColumnName("Opening_Bal_GST");

                entity.Property(e => e.OtherTransactionsExGst)
                    .HasColumnType("money")
                    .HasColumnName("Other_Transactions_exGST");

                entity.Property(e => e.OtherTransactionsGst)
                    .HasColumnType("money")
                    .HasColumnName("Other_Transactions_GST");

                entity.Property(e => e.PromptPatmentDiscountExGst)
                    .HasColumnType("money")
                    .HasColumnName("Prompt_Patment_Discount_exGST");

                entity.Property(e => e.PromptPatmentDiscountGst)
                    .HasColumnType("money")
                    .HasColumnName("Prompt_Patment_Discount_GST");

                entity.Property(e => e.ReversalsExGst)
                    .HasColumnType("money")
                    .HasColumnName("Reversals_exGST");

                entity.Property(e => e.ReversalsGst)
                    .HasColumnType("money")
                    .HasColumnName("Reversals_GST");

                entity.Property(e => e.TotalAmountDueExGst)
                    .HasColumnType("money")
                    .HasColumnName("Total_Amount_Due_exGST");

                entity.Property(e => e.TotalAmountDueGst)
                    .HasColumnType("money")
                    .HasColumnName("Total_Amount_Due_GST");

                entity.Property(e => e.TotalConsumption).HasColumnName("Total_Consumption");
            });

            modelBuilder.Entity<VEdiHeaderSummaryMeri>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_EDI_Header_Summary_MERI");

                entity.Property(e => e.CurrentChargesExGst)
                    .HasColumnType("money")
                    .HasColumnName("Current_Charges_exGST");

                entity.Property(e => e.CurrentChargesGst)
                    .HasColumnType("money")
                    .HasColumnName("Current_Charges_GST");

                entity.Property(e => e.DiscountedAmountDueExGst)
                    .HasColumnType("money")
                    .HasColumnName("Discounted_Amount_Due_exGST");

                entity.Property(e => e.DiscountedAmountDueGst)
                    .HasColumnType("money")
                    .HasColumnName("Discounted_Amount_Due_GST");

                entity.Property(e => e.HeaderId).HasColumnName("Header_ID");

                entity.Property(e => e.OpeningBalExGst)
                    .HasColumnType("money")
                    .HasColumnName("Opening_Bal_exGST");

                entity.Property(e => e.OpeningBalGst)
                    .HasColumnType("money")
                    .HasColumnName("Opening_Bal_GST");

                entity.Property(e => e.OtherTransactionsExGst)
                    .HasColumnType("money")
                    .HasColumnName("Other_Transactions_exGST");

                entity.Property(e => e.OtherTransactionsGst)
                    .HasColumnType("money")
                    .HasColumnName("Other_Transactions_GST");

                entity.Property(e => e.PromptPatmentDiscountExGst)
                    .HasColumnType("money")
                    .HasColumnName("Prompt_Patment_Discount_exGST");

                entity.Property(e => e.PromptPatmentDiscountGst)
                    .HasColumnType("money")
                    .HasColumnName("Prompt_Patment_Discount_GST");

                entity.Property(e => e.ReversalsExGst)
                    .HasColumnType("money")
                    .HasColumnName("Reversals_exGST");

                entity.Property(e => e.ReversalsGst)
                    .HasColumnType("money")
                    .HasColumnName("Reversals_GST");

                entity.Property(e => e.TotalAmountDueExGst)
                    .HasColumnType("money")
                    .HasColumnName("Total_Amount_Due_exGST");

                entity.Property(e => e.TotalAmountDueGst)
                    .HasColumnType("money")
                    .HasColumnName("Total_Amount_Due_GST");

                entity.Property(e => e.TotalConsumption).HasColumnName("Total_Consumption");
            });

            modelBuilder.Entity<VEdiIndexLookup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_EDI_Index_Lookup");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.EdiAccountNo)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Account_No");

                entity.Property(e => e.EdiIcp)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_ICP");

                entity.Property(e => e.EdiId).HasColumnName("EDI_ID");

                entity.Property(e => e.EdiInvNumber)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Inv_Number");

                entity.Property(e => e.EdiNetwrokId)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_NetwrokID");

                entity.Property(e => e.EdiRetailerCode)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Retailer_Code");

                entity.Property(e => e.EdiSiteDesciption)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Site_Desciption");

                entity.Property(e => e.EdiSiteId).HasColumnName("EDI_Site_ID");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VEdiSiteDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_EDI_Site_Details");

                entity.Property(e => e.EdSiteSubType)
                    .HasMaxLength(10)
                    .HasColumnName("ED_Site_Sub_Type");

                entity.Property(e => e.EdSiteType)
                    .HasMaxLength(10)
                    .HasColumnName("ED_Site_Type");

                entity.Property(e => e.EdiAccountNo)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Account_No");

                entity.Property(e => e.EdiIcp)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_ICP");

                entity.Property(e => e.EdiId).HasColumnName("EDI_ID");

                entity.Property(e => e.EdiInvNumber)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Inv_Number");

                entity.Property(e => e.EdiNetwrokId)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_NetwrokID");

                entity.Property(e => e.EdiRetailerCode)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Retailer_Code");

                entity.Property(e => e.EdiSiteDesciption)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Site_Desciption");

                entity.Property(e => e.EdiSiteId).HasColumnName("EDI_Site_ID");
            });

            modelBuilder.Entity<VEnvActualsBySiteByDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_ENV_Actuals_By_Site_By_Date");

                entity.Property(e => e.DataDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Data_Date");

                entity.Property(e => e.EsSiteId).HasColumnName("ES_SiteID");

                entity.Property(e => e.EsSourceType)
                    .HasMaxLength(255)
                    .HasColumnName("ES_Source_Type");
            });

            modelBuilder.Entity<VEnvCountSourceTypeToRemove>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Env_Count_Source_Type_To_Remove");

                entity.Property(e => e.CountByDays).HasColumnName("Count_By_Days");

                entity.Property(e => e.EsDay).HasColumnName("ES_Day");

                entity.Property(e => e.EsMonth).HasColumnName("ES_Month");

                entity.Property(e => e.EsSiteId).HasColumnName("ES_SiteID");

                entity.Property(e => e.EsYear).HasColumnName("ES_Year");
            });

            modelBuilder.Entity<VEnvDailySummaryMtreport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Env_Daily_Summary_MTReport");

                entity.Property(e => e.EsConsumptionDailyAvg).HasColumnName("ES_Consumption_Daily_Avg");

                entity.Property(e => e.EsCreditBalance)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("ES_Credit_Balance");

                entity.Property(e => e.EsCreditInvoice).HasColumnName("ES_Credit_Invoice");

                entity.Property(e => e.EsDay)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ES_Day");

                entity.Property(e => e.EsDollarsDailyAvg)
                    .HasColumnType("money")
                    .HasColumnName("ES_Dollars_Daily_Avg");

                entity.Property(e => e.EsInvNum)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ES_InvNum");

                entity.Property(e => e.EsMonth)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ES_Month");

                entity.Property(e => e.EsPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("ES_Period");

                entity.Property(e => e.EsReadType)
                    .HasMaxLength(10)
                    .HasColumnName("ES_ReadType");

                entity.Property(e => e.EsSiteId).HasColumnName("ES_SiteID");

                entity.Property(e => e.EsSourceType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ES_Source_Type");

                entity.Property(e => e.EsSpinvNum).HasColumnName("ES_SPInvNum");

                entity.Property(e => e.EsYear)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ES_Year");
            });

            modelBuilder.Entity<VEnvDailySummaryMtreportBySite>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Env_Daily_Summary_MTReport_By_Site");

                entity.Property(e => e.EsConsumptionDailyAvg).HasColumnName("ES_Consumption_Daily_Avg");

                entity.Property(e => e.EsCreditBalance)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("ES_Credit_Balance");

                entity.Property(e => e.EsCreditInvoice).HasColumnName("ES_Credit_Invoice");

                entity.Property(e => e.EsDay)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ES_Day");

                entity.Property(e => e.EsDollarsDailyAvg)
                    .HasColumnType("money")
                    .HasColumnName("ES_Dollars_Daily_Avg");

                entity.Property(e => e.EsInvNum)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ES_InvNum");

                entity.Property(e => e.EsMonth)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ES_Month");

                entity.Property(e => e.EsPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("ES_Period");

                entity.Property(e => e.EsReadType)
                    .HasMaxLength(10)
                    .HasColumnName("ES_ReadType");

                entity.Property(e => e.EsSiteId).HasColumnName("ES_SiteID");

                entity.Property(e => e.EsSourceType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ES_Source_Type");

                entity.Property(e => e.EsSpinvNum).HasColumnName("ES_SPInvNum");

                entity.Property(e => e.EsYear)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ES_Year");
            });

            modelBuilder.Entity<VEnvEsitmatesSourceTypeCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ENV_Esitmates_Source_Type_Count");

                entity.Property(e => e.CountOfSource).HasColumnName("Count_Of_Source");

                entity.Property(e => e.EsDay).HasColumnName("ES_Day");

                entity.Property(e => e.EsMonth).HasColumnName("ES_Month");

                entity.Property(e => e.EsSiteId).HasColumnName("ES_SiteID");

                entity.Property(e => e.EsYear).HasColumnName("ES_Year");
            });

            modelBuilder.Entity<VEnvEstimatesBaseAvgByMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_ENV_Estimates_Base_Avg_By_Month");

                entity.Property(e => e.EsConsumptionDailyAvg).HasColumnName("ES_Consumption_Daily_Avg");

                entity.Property(e => e.EsCreditBalance)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("ES_Credit_Balance");

                entity.Property(e => e.EsCreditInvoice).HasColumnName("ES_Credit_Invoice");

                entity.Property(e => e.EsDay)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ES_Day");

                entity.Property(e => e.EsDollarsDailyAvg)
                    .HasColumnType("money")
                    .HasColumnName("ES_Dollars_Daily_Avg");

                entity.Property(e => e.EsInvNum)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ES_InvNum");

                entity.Property(e => e.EsMonth)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ES_Month");

                entity.Property(e => e.EsReadType)
                    .HasMaxLength(10)
                    .HasColumnName("ES_ReadType");

                entity.Property(e => e.EsSiteId).HasColumnName("ES_SiteID");

                entity.Property(e => e.EsSourceType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ES_Source_Type");

                entity.Property(e => e.EsSpinvNum).HasColumnName("ES_SPInvNum");

                entity.Property(e => e.EsYear)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ES_Year");

                entity.Property(e => e.ReadyForUpload).HasColumnName("Ready_For_Upload");
            });

            modelBuilder.Entity<VEnvEstimatesBaseAvgByMonthBySite>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_ENV_Estimates_Base_Avg_By_Month_By_Site");

                entity.Property(e => e.EsConsumptionDailyAvg).HasColumnName("ES_Consumption_Daily_Avg");

                entity.Property(e => e.EsCreditBalance)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("ES_Credit_Balance");

                entity.Property(e => e.EsCreditInvoice).HasColumnName("ES_Credit_Invoice");

                entity.Property(e => e.EsDay)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ES_Day");

                entity.Property(e => e.EsDollarsDailyAvg)
                    .HasColumnType("money")
                    .HasColumnName("ES_Dollars_Daily_Avg");

                entity.Property(e => e.EsInvNum)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ES_InvNum");

                entity.Property(e => e.EsMonth)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ES_Month");

                entity.Property(e => e.EsReadType)
                    .HasMaxLength(10)
                    .HasColumnName("ES_ReadType");

                entity.Property(e => e.EsSiteId).HasColumnName("ES_SiteID");

                entity.Property(e => e.EsSourceType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ES_Source_Type");

                entity.Property(e => e.EsSpinvNum).HasColumnName("ES_SPInvNum");

                entity.Property(e => e.EsYear)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ES_Year");

                entity.Property(e => e.ReadyForUpload).HasColumnName("Ready_For_Upload");
            });

            modelBuilder.Entity<VEnvEstimatesBySiteByDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_ENV_Estimates_By_Site_By_Date");

                entity.Property(e => e.DataDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Data_Date");

                entity.Property(e => e.EsSiteId).HasColumnName("ES_SiteID");

                entity.Property(e => e.EsSourceType)
                    .HasMaxLength(255)
                    .HasColumnName("ES_Source_Type");
            });

            modelBuilder.Entity<VEnvEstimatesSumBySite>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Env_Estimates_Sum_By_Site");

                entity.Property(e => e.CountOfEsSiteId).HasColumnName("CountOfES_SiteID");

                entity.Property(e => e.EsSiteId).HasColumnName("ES_SiteID");

                entity.Property(e => e.SumOfEsConsumptionDailyAvg).HasColumnName("SumOfES_Consumption_Daily_Avg");

                entity.Property(e => e.SumOfEsDollarsDailyAvg).HasColumnName("SumOfES_Dollars_Daily_Avg");
            });

            modelBuilder.Entity<VEnvInvoicesMtreport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_ENV_Invoices_MTReport");

                entity.Property(e => e.AmountExclGst)
                    .HasColumnType("money")
                    .HasColumnName("AmountExclGST");

                entity.Property(e => e.AmountInclGst)
                    .HasColumnType("money")
                    .HasColumnName("AmountInclGST");

                entity.Property(e => e.CreditBalance)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DailyAvgConsumption).HasColumnName("Daily_Avg_Consumption");

                entity.Property(e => e.DailyAvgDollars)
                    .HasColumnType("money")
                    .HasColumnName("Daily_Avg_Dollars");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvEndDateRange)
                    .HasColumnType("date")
                    .HasColumnName("InvEndDate_Range");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvStartDateRange)
                    .HasColumnType("date")
                    .HasColumnName("InvStartDate_Range");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.ReadyForUpload).HasColumnName("Ready_For_Upload");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VEnvInvoicesMtreportBySite>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_ENV_Invoices_MTReport_By_Site");

                entity.Property(e => e.AmountExclGst)
                    .HasColumnType("money")
                    .HasColumnName("AmountExclGST");

                entity.Property(e => e.AmountInclGst)
                    .HasColumnType("money")
                    .HasColumnName("AmountInclGST");

                entity.Property(e => e.CreditBalance)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.DailyAvgConsumption).HasColumnName("Daily_Avg_Consumption");

                entity.Property(e => e.DailyAvgDollars)
                    .HasColumnType("money")
                    .HasColumnName("Daily_Avg_Dollars");

                entity.Property(e => e.ErStartDate)
                    .HasColumnType("date")
                    .HasColumnName("ER_StartDate");

                entity.Property(e => e.EsDay)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ES_Day");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvEndDateRange)
                    .HasColumnType("date")
                    .HasColumnName("InvEndDate_Range");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvStartDateRange)
                    .HasColumnType("date")
                    .HasColumnName("InvStartDate_Range");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.ReadyForUpload).HasColumnName("Ready_For_Upload");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VEnvMinStartDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ENV_Min_StartDate");

                entity.Property(e => e.MinStartDate)
                    .HasColumnType("date")
                    .HasColumnName("min_StartDate");
            });

            modelBuilder.Entity<VEnvMonthlyPivotMtreport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_ENV_Monthly_Pivot_MTReport");

                entity.Property(e => e.CountOfEsDay).HasColumnName("CountOfES_Day");

                entity.Property(e => e.EsMonth).HasColumnName("ES_Month");

                entity.Property(e => e.EsSiteId).HasColumnName("ES_SiteID");

                entity.Property(e => e.EsSourceType)
                    .HasMaxLength(255)
                    .HasColumnName("ES_Source_Type");

                entity.Property(e => e.EsYear).HasColumnName("ES_Year");

                entity.Property(e => e.SumOfEsConsumptionDailyAvg).HasColumnName("SumOfES_Consumption_Daily_Avg");

                entity.Property(e => e.SumOfEsDollarsDailyAvg).HasColumnName("SumOfES_Dollars_Daily_Avg");
            });

            modelBuilder.Entity<VEnvMonthlySummaryMtreport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ENV_Monthly_Summary_MTReport");

                entity.Property(e => e.CountOfEsDay).HasColumnName("CountOfES_Day");

                entity.Property(e => e.EsMonth).HasColumnName("ES_Month");

                entity.Property(e => e.EsPeriod)
                    .HasColumnType("date")
                    .HasColumnName("ES_Period");

                entity.Property(e => e.EsSiteId).HasColumnName("ES_SiteID");

                entity.Property(e => e.EsYear).HasColumnName("ES_Year");

                entity.Property(e => e.SumOfEsConsumptionDailyAvg).HasColumnName("SumOfES_Consumption_Daily_Avg");

                entity.Property(e => e.SumOfEsDollarsDailyAvg).HasColumnName("SumOfES_Dollars_Daily_Avg");
            });

            modelBuilder.Entity<VEnvRemoveEstimate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ENV_Remove_Estimates");

                entity.Property(e => e.DataDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Data_Date");

                entity.Property(e => e.EsSiteId).HasColumnName("ES_SiteID");
            });

            modelBuilder.Entity<VEnvRemoveEstimatesId>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ENV_Remove_Estimates_ID");

                entity.Property(e => e.DataDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Data_Date");

                entity.Property(e => e.EsId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ES_ID");

                entity.Property(e => e.EsSiteId).HasColumnName("ES_SiteID");
            });

            modelBuilder.Entity<VEnvResultsMtreportPivot>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Env_Results_MTReport_Pivot");

                entity.Property(e => e.SiteId).HasColumnName("SiteID");

                entity.Property(e => e.SiteName).HasMaxLength(200);
            });

            modelBuilder.Entity<VEnvSitesCeasedDateRestriction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_ENV_Sites_Ceased_Date_Restriction");

                entity.Property(e => e.AccountCode).HasMaxLength(200);

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.BuildingNo).HasMaxLength(200);

                entity.Property(e => e.CalSqMetres).HasColumnName("Cal_SqMetres");

                entity.Property(e => e.ClientCc)
                    .HasMaxLength(200)
                    .HasColumnName("ClientCC");

                entity.Property(e => e.ClientCode).HasMaxLength(10);

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.CompanyCode).HasMaxLength(255);

                entity.Property(e => e.ContactAddressCity).HasMaxLength(200);

                entity.Property(e => e.ContactAddressLine1).HasMaxLength(200);

                entity.Property(e => e.ContactAddressLine2).HasMaxLength(200);

                entity.Property(e => e.ContactFloor).HasMaxLength(200);

                entity.Property(e => e.ContactMailAddressLine1).HasMaxLength(200);

                entity.Property(e => e.ContactName).HasMaxLength(200);

                entity.Property(e => e.ContactName2).HasMaxLength(200);

                entity.Property(e => e.ContactPhone).HasMaxLength(200);

                entity.Property(e => e.DateAdded).HasColumnType("date");

                entity.Property(e => e.DateCeasedRestriction)
                    .HasColumnType("date")
                    .HasColumnName("Date_Ceased_Restriction");

                entity.Property(e => e.Dvn)
                    .HasMaxLength(255)
                    .HasColumnName("DVN");

                entity.Property(e => e.EdiCreated)
                    .HasMaxLength(255)
                    .HasColumnName("EDI_Created");

                entity.Property(e => e.Entity).HasMaxLength(200);

                entity.Property(e => e.FixedKva).HasColumnName("FixedKVA");

                entity.Property(e => e.FloorUtilityFactor).HasColumnName("Floor_Utility_Factor");

                entity.Property(e => e.GridExitPoint).HasMaxLength(255);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InputType)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.LeaseExpiry).HasColumnType("date");

                entity.Property(e => e.MasterList).HasColumnName("Master_List");

                entity.Property(e => e.MasterListSiteType).HasMaxLength(255);

                entity.Property(e => e.MeterNo).HasMaxLength(255);

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.NetworkCompany).HasMaxLength(255);

                entity.Property(e => e.NetworkId)
                    .HasMaxLength(200)
                    .HasColumnName("NetworkID");

                entity.Property(e => e.Nmi)
                    .HasMaxLength(255)
                    .HasColumnName("NMI");

                entity.Property(e => e.OrderNumber).HasMaxLength(255);

                entity.Property(e => e.OrgId).HasColumnName("Org_ID");

                entity.Property(e => e.ParentCustomer).HasMaxLength(255);

                entity.Property(e => e.Region).HasMaxLength(200);

                entity.Property(e => e.Region2).HasMaxLength(200);

                entity.Property(e => e.RetailId)
                    .HasMaxLength(255)
                    .HasColumnName("RetailID");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.RetailerSiteRef).HasMaxLength(200);

                entity.Property(e => e.SiteConsolidationFlag)
                    .HasMaxLength(255)
                    .HasColumnName("Site_Consolidation_Flag");

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteLocation).HasMaxLength(200);

                entity.Property(e => e.SiteLocationDd)
                    .HasMaxLength(255)
                    .HasColumnName("SiteLocationDD");

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeCode)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SubClientCode).HasMaxLength(255);

                entity.Property(e => e.TaxClass)
                    .HasMaxLength(255)
                    .HasColumnName("Tax_Class");

                entity.Property(e => e.TimeAdded).HasColumnType("date");

                entity.Property(e => e.Vhaaddress1)
                    .HasMaxLength(255)
                    .HasColumnName("VHAAddress1");

                entity.Property(e => e.Vhaaddress2)
                    .HasMaxLength(255)
                    .HasColumnName("VHAAddress2");

                entity.Property(e => e.Vhaaddress3)
                    .HasMaxLength(255)
                    .HasColumnName("VHAAddress3");
            });

            modelBuilder.Entity<VEnvSitesListMtreport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_ENV_Sites_List_MTReport");

                entity.Property(e => e.DateAdded).HasColumnType("date");

                entity.Property(e => e.DateCeasedRestriction)
                    .HasColumnType("date")
                    .HasColumnName("Date_Ceased_Restriction");

                entity.Property(e => e.SiteStatus).HasMaxLength(200);
            });

            modelBuilder.Entity<VEnvSitesListMtreportBySite>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_ENV_Sites_List_MTReport_By_Site");

                entity.Property(e => e.DateAdded).HasColumnType("date");

                entity.Property(e => e.DateCeasedRestriction)
                    .HasColumnType("date")
                    .HasColumnName("Date_Ceased_Restriction");

                entity.Property(e => e.SiteStatus).HasMaxLength(200);
            });

            modelBuilder.Entity<VEnvSummaryConsumptionMtreport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Env_Summary_Consumption_MTReport");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.CompanyCode).HasMaxLength(255);

                entity.Property(e => e.EnergyType).HasMaxLength(255);

                entity.Property(e => e.Entity).HasMaxLength(200);

                entity.Property(e => e.EsPeriod)
                    .HasColumnType("date")
                    .HasColumnName("ES_Period");

                entity.Property(e => e.EsSiteId).HasColumnName("ES_SiteID");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.Region2).HasMaxLength(200);

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteLocation).HasMaxLength(200);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SumOfCountOfEsDay).HasColumnName("SumOfCountOfES_Day");

                entity.Property(e => e.SumOfSumOfEsConsumptionDailyAvg).HasColumnName("SumOfSumOfES_Consumption_Daily_Avg");
            });

            modelBuilder.Entity<VEnvSummaryDailyMtreport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ENV_Summary_Daily_MTReport");

                entity.Property(e => e.EsConsumptionDailyAvg).HasColumnName("ES_Consumption_Daily_Avg");

                entity.Property(e => e.EsCreditBalance)
                    .HasMaxLength(255)
                    .HasColumnName("ES_Credit_Balance");

                entity.Property(e => e.EsDay).HasColumnName("ES_Day");

                entity.Property(e => e.EsDollarsDailyAvg).HasColumnName("ES_Dollars_Daily_Avg");

                entity.Property(e => e.EsEstimateInvCount).HasColumnName("ES_Estimate_Inv_Count");

                entity.Property(e => e.EsId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ES_ID");

                entity.Property(e => e.EsInvNum)
                    .HasMaxLength(255)
                    .HasColumnName("ES_InvNum");

                entity.Property(e => e.EsMonth).HasColumnName("ES_Month");

                entity.Property(e => e.EsPeriod)
                    .HasColumnType("date")
                    .HasColumnName("ES_Period");

                entity.Property(e => e.EsReadType)
                    .HasMaxLength(255)
                    .HasColumnName("ES_ReadType");

                entity.Property(e => e.EsSiteId).HasColumnName("ES_SiteID");

                entity.Property(e => e.EsSourceType)
                    .HasMaxLength(255)
                    .HasColumnName("ES_Source_Type");

                entity.Property(e => e.EsSpinvNum).HasColumnName("ES_SPInvNum");

                entity.Property(e => e.EsYear).HasColumnName("ES_Year");
            });

            modelBuilder.Entity<VEnvSummaryDollarsMtreport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Env_Summary_Dollars_MTReport");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.CompanyCode).HasMaxLength(255);

                entity.Property(e => e.EnergyType).HasMaxLength(255);

                entity.Property(e => e.Entity).HasMaxLength(200);

                entity.Property(e => e.EsPeriod)
                    .HasColumnType("date")
                    .HasColumnName("ES_Period");

                entity.Property(e => e.EsSiteId).HasColumnName("ES_SiteID");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.Region2).HasMaxLength(200);

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteLocation).HasMaxLength(200);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SumOfCountOfEsDay).HasColumnName("SumOfCountOfES_Day");

                entity.Property(e => e.SumOfSumOfEsDollarsDailyAvg).HasColumnName("SumOfSumOfES_Dollars_Daily_Avg");
            });

            modelBuilder.Entity<VEnvSummaryMonthlyPivotMtreport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ENV_Summary_Monthly_Pivot_MTReport");

                entity.Property(e => e.EstimateActual)
                    .HasMaxLength(255)
                    .HasColumnName("Estimate/Actual");

                entity.Property(e => e.Period).HasColumnType("date");

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.Spid).HasColumnName("SPID");
            });

            modelBuilder.Entity<VEnvSummarySubSumDay>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_ENV_Summary_Sub_Sum_Days");

                entity.Property(e => e.EsSiteId).HasColumnName("ES_SiteID");

                entity.Property(e => e.SumOfDaysBySite).HasColumnName("Sum_Of_Days_By_Site");
            });

            modelBuilder.Entity<VEsmartActualCompare>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Esmart_Actual_Compare");

                entity.Property(e => e.BMonth).HasColumnName("B_Month");

                entity.Property(e => e.BYear).HasColumnName("B_Year");

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.Dollars).HasColumnType("money");
            });

            modelBuilder.Entity<VGepGroupedReconciliationInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_GEP_Grouped_reconciliation_info");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<VGepGroupedReconciliationInfoFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_GEP_Grouped_reconciliation_info_Final");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);
            });

            modelBuilder.Entity<VGepRawReconciliationInfo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_GEP_Raw_reconciliation_info");

                entity.Property(e => e.DateCeased).HasColumnType("date");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VGepRawReconciliationInformation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_GEP_Raw_reconciliation_information");

                entity.Property(e => e.DateCeased).HasColumnType("date");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.Utility).HasMaxLength(250);
            });

            modelBuilder.Entity<VGetDefaultValue>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_GetDefault_Value");
            });

            modelBuilder.Entity<VGetFiledsPropertiesClient>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_GetFiledsProperties_Client");

                entity.Property(e => e.CharacterMaximumLength).HasColumnName("CHARACTER_MAXIMUM_LENGTH");

                entity.Property(e => e.ColumnName)
                    .HasMaxLength(128)
                    .HasColumnName("COLUMN_NAME");

                entity.Property(e => e.DataType)
                    .HasMaxLength(128)
                    .HasColumnName("DATA_TYPE");

                entity.Property(e => e.IsNullable)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("IS_NULLABLE");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnName("TABLE_NAME");
            });

            modelBuilder.Entity<VHedgecalcInvoicesConfig>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Hedgecalc_Invoices_Config");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitTotal).HasColumnName("Unit_Total");
            });

            modelBuilder.Entity<VImwAccrualsbaselineMaxInvEndDateBySite>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IMW_Accrualsbaseline_Max_Inv_End_Date_By_Site");

                entity.Property(e => e.MaxEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Max_EndDate");
            });

            modelBuilder.Entity<VImwAccrualsbaselineNoOfInvBySite>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_IMW_Accrualsbaseline_No_Of_Inv_By_Site");

                entity.Property(e => e.CountSiteNo).HasColumnName("Count_SiteNo");
            });

            modelBuilder.Entity<VImwcDatamanagementDeleteOrphanLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_imwc_datamanagement_delete_orphan_lines");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.ProductId)
                    .HasMaxLength(1)
                    .HasColumnName("ProductID");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VImwcDatamanagementDeleteRatesWhereNotUsed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_imwc_datamanagement_delete_rates_where_not_used");

                entity.Property(e => e.RateDescription)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.Status).HasMaxLength(25);
            });

            modelBuilder.Entity<VImwcDatamanagementDeleteTariffsWhereNotUsed>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_imwc_datamanagement_delete_tariffs_where_not_used");

                entity.Property(e => e.Status).HasMaxLength(25);

                entity.Property(e => e.TariffDescription).HasMaxLength(255);

                entity.Property(e => e.TariffId).HasColumnName("TariffID");
            });

            modelBuilder.Entity<VImwcDatamanagementDeleteZeroDollarAndConsumptionLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_imwc_datamanagement_delete_zero_dollar_and_consumption_lines");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.InvLineNo).ValueGeneratedOnAdd();

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VImwcDatamanagementRecalculateDpOfHeaderConsumption>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_imwc_datamanagement_recalculate_dp_of_header_consumption");

                entity.Property(e => e.CalculatedConsumption).HasColumnName("Calculated Consumption");

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Comments");

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.TInvoicesUnitTotal).HasColumnName("tInvoices_UnitTotal");
            });

            modelBuilder.Entity<VImwcDatamanagementUpdateGst>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_imwc_datamanagement_update_gst");

                entity.Property(e => e.InvoiceGst).HasColumnName("Invoice_GST");

                entity.Property(e => e.TariffGst).HasColumnName("Tariff_GST");
            });

            modelBuilder.Entity<VImwcDatamanagementUpdateHeaderTotalConsumption>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_imwc_datamanagement_update_header_total_consumption");

                entity.Property(e => e.CalculatedConsumption).HasColumnName("Calculated Consumption");

                entity.Property(e => e.InvoiceComments)
                    .HasMaxLength(255)
                    .HasColumnName("Invoice Comments");

                entity.Property(e => e.SiteComments)
                    .IsUnicode(false)
                    .HasColumnName("Site Comments");

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.TInvoicesUnitTotal).HasColumnName("tInvoices_UnitTotal");
            });

            modelBuilder.Entity<VImwcDatamanagementUpdateHeaderTotalDollar>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_imwc_datamanagement_update_header_total_dollars");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.InvAmount).HasColumnType("money");

                entity.Property(e => e.InvAmountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountExGST");

                entity.Property(e => e.InvAmountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountGST");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvAmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPayGST");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvDiscountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountExGST");

                entity.Property(e => e.InvDiscountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountGST");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST");

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.OpeningBalanceExGst)
                    .HasColumnType("money")
                    .HasColumnName("OpeningBalanceExGST");

                entity.Property(e => e.OpeningBalanceGst)
                    .HasColumnType("money")
                    .HasColumnName("OpeningBalanceGST");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VImwcDatamanagementUpdateHeaderTotalDollarsWhereNull>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_imwc_datamanagement_update_header_total_dollars_where_null");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.InvAmount).HasColumnType("money");

                entity.Property(e => e.InvAmountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountExGST");

                entity.Property(e => e.InvAmountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountGST");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvAmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPayGST");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvDiscountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountExGST");

                entity.Property(e => e.InvDiscountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountGST");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST");

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.OpeningBalanceExGst)
                    .HasColumnType("money")
                    .HasColumnName("OpeningBalanceExGST");

                entity.Property(e => e.OpeningBalanceGst)
                    .HasColumnType("money")
                    .HasColumnName("OpeningBalanceGST");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VImwcDatamanagementUpdateLineUnitMultiplierDay>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_imwc_datamanagement_update_line_unit_multiplier_days");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffDescription).HasMaxLength(255);

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.TariffsUnitMultiplier).HasColumnName("Tariffs_UnitMultiplier");
            });

            modelBuilder.Entity<VImwcDatamanagementUpdateLineUnitMultiplierLossFactor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_imwc_datamanagement_update_line_unit_multiplier_loss_factor");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffDescription).HasMaxLength(255);

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.TariffsUnitMultiplier).HasColumnName("Tariffs_UnitMultiplier");
            });

            modelBuilder.Entity<VImwcDatamanagementUpdatePpd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_imwc_datamanagement_update_ppd");

                entity.Property(e => e.InvoicePpd).HasColumnName("Invoice_PPD");

                entity.Property(e => e.TariffPpd).HasColumnName("Tariff_PPD");
            });

            modelBuilder.Entity<VImwcDatamanagementUpdateProductidInvoiceLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_imwc_datamanagement_update_productid_invoice_lines");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ClientCc)
                    .HasMaxLength(200)
                    .HasColumnName("ClientCC");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(1)
                    .HasColumnName("ProductID");

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VImwcDatamanagementUpdateTotalsForAdjustedAmounttopay>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_imwc_datamanagement_update_totals_for_adjusted_amounttopay");

                entity.Property(e => e.BatchNumber).HasColumnName("Batch_Number");

                entity.Property(e => e.Difference).HasColumnType("money");

                entity.Property(e => e.InvAmntToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmntToPayExGST");

                entity.Property(e => e.InvAmntToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmntToPayGST");

                entity.Property(e => e.NewInvAmountToPayExGst).HasColumnName("New InvAmountToPayExGST");

                entity.Property(e => e.NewInvAmountToPayGst).HasColumnName("New InvAmountToPayGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VImwcDatamanagementUpdateTsitesAccountnoAndRetailercode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_imwc_datamanagement_update_tsites_accountno_and_retailercode");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.InvoiceAccountNo)
                    .HasMaxLength(200)
                    .HasColumnName("Invoice_AccountNo");

                entity.Property(e => e.InvoiceRetailer)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("Invoice_Retailer");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteName).HasMaxLength(200);
            });

            modelBuilder.Entity<VImwcDatamanagementUpdateUnitMultiplierRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_imwc_datamanagement_update_unit_multiplier_rate");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.EdiUnitCost).HasColumnName("EDI UnitCost");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitMultiplierType)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VImwcDatamanagementUpdateUnitType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_imwc_datamanagement_update_unit_type");

                entity.Property(e => e.CurrentUnitType)
                    .HasMaxLength(50)
                    .HasColumnName("Current_UnitType");

                entity.Property(e => e.NewUnitType)
                    .HasMaxLength(50)
                    .HasColumnName("New_UnitType");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VImwcDatamanagementZeroObAndUpdateAmounttopay>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_imwc_datamanagement_zero_ob_and_update_amounttopay");

                entity.Property(e => e.InvAmountToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPayExGST");

                entity.Property(e => e.InvAmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPayGST");

                entity.Property(e => e.InvAmtToPay).HasColumnType("money");

                entity.Property(e => e.OpeningBalanceExGst).HasColumnName("OpeningBalanceExGST");

                entity.Property(e => e.OpeningBalanceGst).HasColumnName("OpeningBalanceGST");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VInvoiceCountArchivedBySite>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Invoice_Count_Archived_By_Site");
            });

            modelBuilder.Entity<VInvoiceCountBySite>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Invoice_Count_By_Site");
            });

            modelBuilder.Entity<VInvoiceCountFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Invoice_Count_Final");

                entity.Property(e => e.AccountCode).HasMaxLength(200);

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ArchivedInvoiceCount).HasColumnName("Archived_Invoice_Count");

                entity.Property(e => e.BillPayment).HasColumnName("Bill_Payment");

                entity.Property(e => e.BillVerification).HasColumnName("Bill_Verification");

                entity.Property(e => e.BillingFrequency)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Billing_Frequency");

                entity.Property(e => e.BpayCode)
                    .HasMaxLength(20)
                    .HasColumnName("BPayCode");

                entity.Property(e => e.BpayReference)
                    .HasMaxLength(20)
                    .HasColumnName("BPayReference");

                entity.Property(e => e.BuildingNo).HasMaxLength(200);

                entity.Property(e => e.CalSqMetres).HasColumnName("Cal_SqMetres");

                entity.Property(e => e.CarbonFactorArea)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Carbon_Factor_Area");

                entity.Property(e => e.ClientCc)
                    .HasMaxLength(200)
                    .HasColumnName("ClientCC");

                entity.Property(e => e.ClientCode).HasMaxLength(10);

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.CompanyCode).HasMaxLength(255);

                entity.Property(e => e.ContactAddressCity).HasMaxLength(200);

                entity.Property(e => e.ContactAddressLine1).HasMaxLength(200);

                entity.Property(e => e.ContactAddressLine2).HasMaxLength(200);

                entity.Property(e => e.ContactFloor).HasMaxLength(200);

                entity.Property(e => e.ContactMailAddressLine1).HasMaxLength(200);

                entity.Property(e => e.ContactName).HasMaxLength(200);

                entity.Property(e => e.ContactName2).HasMaxLength(200);

                entity.Property(e => e.ContactPhone).HasMaxLength(200);

                entity.Property(e => e.CustomerNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Customer_Number");

                entity.Property(e => e.DataEntryNotes).HasColumnName("Data_Entry_Notes");

                entity.Property(e => e.DateAdded).HasColumnType("date");

                entity.Property(e => e.DateCeased).HasColumnType("date");

                entity.Property(e => e.DmType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("DM_Type");

                entity.Property(e => e.Dvn)
                    .HasMaxLength(255)
                    .HasColumnName("DVN");

                entity.Property(e => e.EdiCreated)
                    .HasMaxLength(255)
                    .HasColumnName("EDI_Created");

                entity.Property(e => e.EmissionsCode)
                    .HasMaxLength(200)
                    .HasColumnName("Emissions_Code");

                entity.Property(e => e.Entity).HasMaxLength(200);

                entity.Property(e => e.FixedKva).HasColumnName("FixedKVA");

                entity.Property(e => e.FloorUtilityFactor).HasColumnName("Floor_Utility_Factor");

                entity.Property(e => e.GreenEnergyPercentage).HasColumnName("Green_Energy_Percentage");

                entity.Property(e => e.GridExitPoint).HasMaxLength(255);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InputType)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.LeaseExpiry).HasColumnType("date");

                entity.Property(e => e.LeaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LiveInvoiceCount).HasColumnName("Live_Invoice_Count");

                entity.Property(e => e.MasterList).HasColumnName("Master_List");

                entity.Property(e => e.MasterListSiteType).HasMaxLength(255);

                entity.Property(e => e.MaxAq).HasColumnName("Max_AQ");

                entity.Property(e => e.Mdq).HasColumnName("MDQ");

                entity.Property(e => e.MeterAccessDetails)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Meter_Access_Details");

                entity.Property(e => e.MeterDataAgent)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Meter_Data_Agent");

                entity.Property(e => e.MeterNo).HasMaxLength(255);

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.MinAq).HasColumnName("Min_AQ");

                entity.Property(e => e.NetworkCompany).HasMaxLength(255);

                entity.Property(e => e.NetworkId)
                    .HasMaxLength(200)
                    .HasColumnName("NetworkID");

                entity.Property(e => e.Nmi)
                    .HasMaxLength(255)
                    .HasColumnName("NMI");

                entity.Property(e => e.OrderNumber).HasMaxLength(255);

                entity.Property(e => e.OrgId).HasColumnName("Org_ID");

                entity.Property(e => e.ParentCustomer).HasMaxLength(255);

                entity.Property(e => e.PowerFactor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Region).HasMaxLength(200);

                entity.Property(e => e.Region2).HasMaxLength(200);

                entity.Property(e => e.RegistryAddress)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Address");

                entity.Property(e => e.RegistryChannelCount).HasColumnName("Registry_Channel_Count");

                entity.Property(e => e.RegistryChargeableCapacity).HasColumnName("Registry_Chargeable_Capacity");

                entity.Property(e => e.RegistryGenerationCapacity).HasColumnName("Registry_Generation_Capacity");

                entity.Property(e => e.RegistryInstallDetails).HasColumnName("Registry_Install_Details");

                entity.Property(e => e.RegistryLossCat1)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Loss_Cat_1");

                entity.Property(e => e.RegistryLossCat2)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Loss_Cat_2");

                entity.Property(e => e.RegistryMep)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_MEP");

                entity.Property(e => e.RegistryMeterCat).HasColumnName("Registry_Meter_Cat");

                entity.Property(e => e.RegistryMeterMultiplier).HasColumnName("Registry_Meter_Multiplier");

                entity.Property(e => e.RegistryMeterType)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_MeterType");

                entity.Property(e => e.RegistryNetwork)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Network");

                entity.Property(e => e.RegistryPoc)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_POC");

                entity.Property(e => e.RegistryPriceCat)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Price_Cat");

                entity.Property(e => e.RegistryStatus)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Status");

                entity.Property(e => e.RegistryUnmeteredLoad)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Unmetered_Load");

                entity.Property(e => e.RetailId)
                    .HasMaxLength(255)
                    .HasColumnName("RetailID");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.RetailerSiteRef).HasMaxLength(200);

                entity.Property(e => e.SiteConsolidationFlag)
                    .HasMaxLength(255)
                    .HasColumnName("Site_Consolidation_Flag");

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteLocation).HasMaxLength(200);

                entity.Property(e => e.SiteLocationDd)
                    .HasMaxLength(255)
                    .HasColumnName("SiteLocationDD");

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeCode)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.Property(e => e.SubClientCode).HasMaxLength(255);

                entity.Property(e => e.SysSitesTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_Sites_Timestamp");

                entity.Property(e => e.TaxClass)
                    .HasMaxLength(255)
                    .HasColumnName("Tax_Class");

                entity.Property(e => e.TerminationFee)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Termination_fee");

                entity.Property(e => e.TimeAdded).HasColumnType("date");

                entity.Property(e => e.Transformer)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Vhaaddress1)
                    .HasMaxLength(255)
                    .HasColumnName("VHAAddress1");

                entity.Property(e => e.Vhaaddress2)
                    .HasMaxLength(255)
                    .HasColumnName("VHAAddress2");

                entity.Property(e => e.Vhaaddress3)
                    .HasMaxLength(255)
                    .HasColumnName("VHAAddress3");
            });

            modelBuilder.Entity<VInvoiceGroupBatchMonthSelection>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Invoice_Group_Batch_Month_Selection");

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.SumOfUnitTotal).HasColumnName("SumOfUnit_Total");
            });

            modelBuilder.Entity<VInvoiceGroupTotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Invoice_Group_Totals");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.ClientCc)
                    .HasMaxLength(200)
                    .HasColumnName("ClientCC");

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.NetworkId)
                    .HasMaxLength(200)
                    .HasColumnName("NetworkID");

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SumOfInvSubTotal).HasColumnType("money");

                entity.Property(e => e.SumOfUnitTotal).HasColumnName("SumOfUnit_Total");

                entity.Property(e => e.TotalConsumptionAll).HasColumnName("Total_Consumption_All");
            });

            modelBuilder.Entity<VInvoiceGroupTotalsSubTotalsBySite>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Invoice_Group_Totals_Sub_Totals_By_Site");

                entity.Property(e => e.SumOfInvSubTotal).HasColumnType("money");

                entity.Property(e => e.SumOfUnitTotal).HasColumnName("SumOfUnit_Total");
            });

            modelBuilder.Entity<VInvoiceGroupTotalsWithLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Invoice_Group_Totals_With_Lines");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.ClientCc)
                    .HasMaxLength(200)
                    .HasColumnName("ClientCC");

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.NetworkId)
                    .HasMaxLength(200)
                    .HasColumnName("NetworkID");

                entity.Property(e => e.RateCategory).HasMaxLength(50);

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.ReadyForUpload).HasColumnName("Ready_For_Upload");

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.TotalDollarsAll).HasColumnName("Total_Dollars_All");

                entity.Property(e => e.UnitTotal).HasColumnName("Unit_Total");
            });

            modelBuilder.Entity<VInvoiceGroupTotalsWithLinesBatchSeleection>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Invoice_Group_Totals_With_Lines_Batch_Seleection");

                entity.Property(e => e.BatchMonth).HasColumnType("date");
            });

            modelBuilder.Entity<VInvoiceGroupTotalsWithLinesSubTotalsBySite>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Invoice_Group_Totals_With_lines_Sub_Totals_By_Site");
            });

            modelBuilder.Entity<VInvoiceHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Invoice_History");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmount).HasColumnType("money");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvArchived).HasColumnName("Inv_Archived");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteLocation).HasMaxLength(200);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitTotal).HasColumnName("Unit_Total");
            });

            modelBuilder.Entity<VInvoiceHistoryAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Invoice_History_All");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmount).HasColumnType("money");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteLocation).HasMaxLength(200);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitTotal).HasColumnName("Unit_Total");
            });

            modelBuilder.Entity<VInvoiceHistoryMain>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Invoice_History_Main");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.CalcTotalUnits).HasColumnName("Calc_Total_Units");

                entity.Property(e => e.ClientCode).HasMaxLength(10);

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Entity).HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmount).HasColumnType("money");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvAmountToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPayExGST");

                entity.Property(e => e.InvAmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPayGST");

                entity.Property(e => e.InvArchived).HasColumnName("Inv_Archived");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvOpenBalType).HasMaxLength(10);

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.ReadyForUpload).HasColumnName("Ready_For_Upload");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VInvoicesBatchlockingLogic1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Invoices_batchlocking_logic1");

                entity.Property(e => e.Difference).HasColumnType("money");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvAmountToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPayExGST");

                entity.Property(e => e.InvAmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPayGST");

                entity.Property(e => e.SpinvNumber)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VInvoicesConsumptionAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Invoices_Consumption_All");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VInvoicesConsumptionAllPre>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Invoices_Consumption_All_pre");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VInvoicesConsumptionWater>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Invoices_Consumption_Water");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VInvoicesConsumptionWater1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Invoices_Consumption_Water1");

                entity.Property(e => e.RateCategory)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VInvoicesExcludeOther>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Invoices_Exclude_Other");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VInvoicesKWh>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Invoices_kWh");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VInvoicesKWh1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Invoices_kWh_1");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VJournalCdc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journal_CDC");

                entity.Property(e => e.AllocationDepartment)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Allocation Department");

                entity.Property(e => e.AllocationDepartment2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Allocation Department 2");

                entity.Property(e => e.AllocationDepartment3)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Allocation Department 3");

                entity.Property(e => e.AllocationUser)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Allocation user");

                entity.Property(e => e.AllocationUser2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Allocation user 2");

                entity.Property(e => e.AllocationUser3)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Allocation user 3");

                entity.Property(e => e.AmountPerAllocation)
                    .HasColumnType("money")
                    .HasColumnName("Amount Per Allocation");

                entity.Property(e => e.AmountPerAllocation2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Amount Per Allocation 2");

                entity.Property(e => e.AmountPerAllocation3)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Amount Per Allocation 3");

                entity.Property(e => e.CreditorCode)
                    .HasMaxLength(15)
                    .HasColumnName("Creditor Code");

                entity.Property(e => e.GeneralLedgerNumber).HasColumnName("General Ledger Number");

                entity.Property(e => e.GeneralLedgerNumber2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("General Ledger Number 2");

                entity.Property(e => e.GeneralLedgerNumber3)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("General Ledger Number 3");

                entity.Property(e => e.GstAmount).HasColumnName("GST Amount");

                entity.Property(e => e.GstNumber)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("GST Number");

                entity.Property(e => e.GstType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("GST Type");

                entity.Property(e => e.GstType2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("GST Type2");

                entity.Property(e => e.GstType3)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("GST Type 3");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.JobCostNumber).HasColumnName("Job Cost number");

                entity.Property(e => e.JobCostNumber2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Job Cost number 2");

                entity.Property(e => e.JobCostNumber3)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Job Cost number 3");

                entity.Property(e => e.NameAddress1)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Name & Address 1");

                entity.Property(e => e.NameAddress2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Name & Address 2");

                entity.Property(e => e.NameAddress3)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Name & Address 3");

                entity.Property(e => e.NameAddress4)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Name & Address 4");

                entity.Property(e => e.NameAddress5)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Name & Address 5");

                entity.Property(e => e.PurchaseOrder)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Purchase Order");

                entity.Property(e => e.Quantity2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Quantity 2");

                entity.Property(e => e.Quantity3)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Quantity 3");

                entity.Property(e => e.TotalExclusiveAmount).HasColumnName("Total Exclusive Amount");

                entity.Property(e => e.TotalInclusiveAmount)
                    .HasColumnType("money")
                    .HasColumnName("Total Inclusive Amount");

                entity.Property(e => e.TransactionDate)
                    .HasColumnType("date")
                    .HasColumnName("Transaction Date");

                entity.Property(e => e.WithHoldingAmount)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("With Holding Amount");

                entity.Property(e => e.WithholdingTax)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Withholding Tax %");
            });

            modelBuilder.Entity<VJournalCdcGstexempt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journal_CDC_GSTExempt");

                entity.Property(e => e.AllocationDepartment)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Allocation Department");

                entity.Property(e => e.AllocationDepartment2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Allocation Department 2");

                entity.Property(e => e.AllocationDepartment3)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Allocation Department 3");

                entity.Property(e => e.AllocationUser)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Allocation user");

                entity.Property(e => e.AllocationUser2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Allocation user 2");

                entity.Property(e => e.AllocationUser3)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Allocation user 3");

                entity.Property(e => e.AmountPerAllocation)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Amount Per Allocation");

                entity.Property(e => e.AmountPerAllocation2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Amount Per Allocation 2");

                entity.Property(e => e.AmountPerAllocation3)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Amount Per Allocation 3");

                entity.Property(e => e.CreditorCode)
                    .HasMaxLength(15)
                    .HasColumnName("Creditor Code");

                entity.Property(e => e.GeneralLedgerNumber)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("General Ledger Number");

                entity.Property(e => e.GeneralLedgerNumber2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("General Ledger Number 2");

                entity.Property(e => e.GeneralLedgerNumber3)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("General Ledger Number 3");

                entity.Property(e => e.GstAmount).HasColumnName("GST Amount");

                entity.Property(e => e.GstNumber)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("GST Number");

                entity.Property(e => e.GstType)
                    .HasMaxLength(255)
                    .HasColumnName("GST Type");

                entity.Property(e => e.GstType2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("GST Type2");

                entity.Property(e => e.GstType3)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("GST Type 3");

                entity.Property(e => e.InvoiceText)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Invoice Text");

                entity.Property(e => e.JobCostNumber)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Job Cost number");

                entity.Property(e => e.JobCostNumber2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Job Cost number 2");

                entity.Property(e => e.JobCostNumber3)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Job Cost number 3");

                entity.Property(e => e.NameAddress1)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Name & Address 1");

                entity.Property(e => e.NameAddress2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Name & Address 2");

                entity.Property(e => e.NameAddress3)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Name & Address 3");

                entity.Property(e => e.NameAddress4)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Name & Address 4");

                entity.Property(e => e.NameAddress5)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Name & Address 5");

                entity.Property(e => e.PurchaseOrder)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Purchase Order");

                entity.Property(e => e.Quantity)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Quantity2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Quantity 2");

                entity.Property(e => e.Quantity3)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Quantity 3");

                entity.Property(e => e.TotalExclusiveAmount)
                    .HasColumnType("money")
                    .HasColumnName("Total Exclusive Amount");

                entity.Property(e => e.TotalInclusiveAmount)
                    .HasColumnType("money")
                    .HasColumnName("Total Inclusive Amount");

                entity.Property(e => e.TransactionDate)
                    .HasColumnType("date")
                    .HasColumnName("Transaction Date");

                entity.Property(e => e.WithHoldingAmount)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("With Holding Amount");

                entity.Property(e => e.WithholdingTax)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Withholding Tax %");
            });

            modelBuilder.Entity<VJournalCdcGstexemptSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journal_CDC_GSTExempt_Summary");

                entity.Property(e => e.GstAmount).HasColumnName("GST Amount");

                entity.Property(e => e.TotalExclusiveAmount)
                    .HasColumnType("money")
                    .HasColumnName("Total Exclusive Amount");

                entity.Property(e => e.TotalInclusiveAmount)
                    .HasColumnType("money")
                    .HasColumnName("Total Inclusive Amount");
            });

            modelBuilder.Entity<VJournalCdcServcFeesJournal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journal_CDC_ServcFeesJournal");

                entity.Property(e => e.CreditorCode)
                    .HasMaxLength(15)
                    .HasColumnName("Creditor Code");

                entity.Property(e => e.GstAmount)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("GST Amount");

                entity.Property(e => e.GstNumber)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("GST Number");

                entity.Property(e => e.InvoiceNumber)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Invoice Number");

                entity.Property(e => e.InvoiceText)
                    .HasMaxLength(51)
                    .HasColumnName("Invoice Text");

                entity.Property(e => e.NameAddress1)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Name & Address 1");

                entity.Property(e => e.NameAddress2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Name & Address 2");

                entity.Property(e => e.NameAddress3)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Name & Address 3");

                entity.Property(e => e.NameAddress4)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Name & Address 4");

                entity.Property(e => e.NameAddress5)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Name & Address 5");

                entity.Property(e => e.PurchaseOrder)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Purchase Order");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.TotalExclusiveAmount)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Total Exclusive Amount");

                entity.Property(e => e.TotalInclusiveAmount)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Total Inclusive Amount");

                entity.Property(e => e.TransactionDate)
                    .HasColumnType("date")
                    .HasColumnName("Transaction Date");

                entity.Property(e => e.WithHoldingAmount)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("With Holding Amount");

                entity.Property(e => e.WithholdingTax)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Withholding Tax %");
            });

            modelBuilder.Entity<VJournalCdcSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journal_CDC_Summary");

                entity.Property(e => e.GstAmount).HasColumnName("GST Amount");

                entity.Property(e => e.TotalExclusiveAmount).HasColumnName("Total Exclusive Amount");

                entity.Property(e => e.TotalInclusiveAmount)
                    .HasColumnType("money")
                    .HasColumnName("Total Inclusive Amount");
            });

            modelBuilder.Entity<VJournalCountCreditInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Journal_CountCreditInvoice");
            });

            modelBuilder.Entity<VJournalCreditInvoiceMessageSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Journal_CreditInvoiceMessage_sub");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VJournalsAnzJournal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journals_ANZ_Journal");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(456)
                    .HasColumnName("Account Number");

                entity.Property(e => e.ClientCode).HasMaxLength(10);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Dvn)
                    .HasMaxLength(255)
                    .HasColumnName("DVN");

                entity.Property(e => e.Entity).HasMaxLength(200);

                entity.Property(e => e.Explanation)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP#");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvoiceLineAmountExclGst).HasColumnName("Invoice Line Amount (excl GST)");

                entity.Property(e => e.InvoiceLineAmountInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Invoice Line Amount (incl GST)");

                entity.Property(e => e.InvoiceLineGst).HasColumnName("Invoice Line GST");

                entity.Property(e => e.InvoicedKwh).HasColumnName("InvoicedKWh");

                entity.Property(e => e.Ppd)
                    .HasColumnType("money")
                    .HasColumnName("PPD");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TaxExpl)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Tax Expl");

                entity.Property(e => e.TaxRateArea)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("TAx Rate/Area");
            });

            modelBuilder.Entity<VJournalsBunnJournal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journals_BUNN_Journal");

                entity.Property(e => e.AccountNo)
                    .HasMaxLength(200)
                    .HasColumnName("Account No");

                entity.Property(e => e.BatchNumber).HasColumnName("Batch Number");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(200)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.From).HasColumnType("date");

                entity.Property(e => e.GlCode)
                    .HasMaxLength(200)
                    .HasColumnName("GL Code");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmtToPayExclGst).HasColumnName("InvAmtToPayExclGST");

                entity.Property(e => e.InvAmtToPayinclGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmtToPayinclGST");

                entity.Property(e => e.InvDiscountinclGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountinclGST");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("date")
                    .HasColumnName("Invoice Date");

                entity.Property(e => e.Kwh).HasColumnName("KWh");

                entity.Property(e => e.NoOfDays).HasColumnName("No Of Days");

                entity.Property(e => e.Region).HasMaxLength(200);

                entity.Property(e => e.RetailerInvNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Retailer Inv Number");

                entity.Property(e => e.SiteDescription)
                    .HasMaxLength(255)
                    .HasColumnName("Site Description");

                entity.Property(e => e.SiteName)
                    .HasMaxLength(200)
                    .HasColumnName("Site Name");

                entity.Property(e => e.SpInvNumber).HasColumnName("SP Inv Number");

                entity.Property(e => e.SubtotalinclGst)
                    .HasColumnType("money")
                    .HasColumnName("SubtotalinclGST");

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.To).HasColumnType("date");
            });

            modelBuilder.Entity<VJournalsDccPayfile>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journals_DCC_Payfile");

                entity.Property(e => e.Approver)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("APPROVER");

                entity.Property(e => e.BussinessUnit)
                    .HasMaxLength(200)
                    .HasColumnName("BUSSINESS UNIT");

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("COMPANY");

                entity.Property(e => e.GrossAmount)
                    .HasColumnType("money")
                    .HasColumnName("GROSS AMOUNT");

                entity.Property(e => e.InvoiceNumber)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE NUMBER");

                entity.Property(e => e.Narration)
                    .HasMaxLength(255)
                    .HasColumnName("NARRATION");

                entity.Property(e => e.NettAmount).HasColumnName("NETT AMOUNT");

                entity.Property(e => e.ObjectCode)
                    .HasMaxLength(200)
                    .HasColumnName("OBJECT CODE");

                entity.Property(e => e.SiteAddress)
                    .HasMaxLength(255)
                    .HasColumnName("SITE ADDRESS");

                entity.Property(e => e.SupplierNumber)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER NUMBER");

                entity.Property(e => e.TaxExplanationCode)
                    .HasMaxLength(200)
                    .HasColumnName("TAX EXPLANATION CODE");
            });

            modelBuilder.Entity<VJournalsDccshPayfile>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journals_DCCSH_Payfile");

                entity.Property(e => e.Approver)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("APPROVER");

                entity.Property(e => e.BussinessUnit)
                    .HasMaxLength(200)
                    .HasColumnName("BUSSINESS UNIT");

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("COMPANY");

                entity.Property(e => e.GrossAmount)
                    .HasColumnType("money")
                    .HasColumnName("GROSS AMOUNT");

                entity.Property(e => e.InvoiceNumber)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("INVOICE NUMBER");

                entity.Property(e => e.Narration)
                    .HasMaxLength(255)
                    .HasColumnName("NARRATION");

                entity.Property(e => e.NettAmount).HasColumnName("NETT AMOUNT");

                entity.Property(e => e.ObjectCode)
                    .HasMaxLength(200)
                    .HasColumnName("OBJECT CODE");

                entity.Property(e => e.SiteAddress)
                    .HasMaxLength(255)
                    .HasColumnName("SITE ADDRESS");

                entity.Property(e => e.SupplierNumber)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("SUPPLIER NUMBER");

                entity.Property(e => e.TaxExplanationCode)
                    .HasMaxLength(200)
                    .HasColumnName("TAX EXPLANATION CODE");
            });

            modelBuilder.Entity<VJournalsHdcPayfile>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journals_HDC_Payfile");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.Active).HasMaxLength(200);

                entity.Property(e => e.Address).HasMaxLength(255);

                entity.Property(e => e.ClientCc)
                    .HasMaxLength(200)
                    .HasColumnName("ClientCC");

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmtToPayExclGst).HasColumnName("InvAmtToPayExclGST");

                entity.Property(e => e.InvAmtToPayInclGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmtToPayInclGST");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvoicesKwh).HasColumnName("InvoicesKWh");

                entity.Property(e => e.Region2).HasMaxLength(200);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VJournalsHealtJournal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journals_HEALT_Journal");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(200)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.Destination).HasMaxLength(573);

                entity.Property(e => e.DistributionSet)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Distribution Set");

                entity.Property(e => e.DocumentType)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Document Type");

                entity.Property(e => e.GstCode)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("GST Code");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvoiceAmountGstInc)
                    .HasColumnType("money")
                    .HasColumnName("Invoice Amount (GST Inc)");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Invoice Date");

                entity.Property(e => e.InvoiceNumber)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Invoice Number");

                entity.Property(e => e.LineNumber)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Line Number");

                entity.Property(e => e.ObjectCode).HasColumnName("Object Code");

                entity.Property(e => e.PoLineNumber)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PO Line Number");

                entity.Property(e => e.PoNumber)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("PO Number");

                entity.Property(e => e.ProjectCode).HasColumnName("Project Code");

                entity.Property(e => e.RemittanceDescription)
                    .HasMaxLength(155)
                    .HasColumnName("Remittance Description");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SupplierNumber).HasColumnName("Supplier Number");

                entity.Property(e => e.SupplierSite)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Supplier Site");

                entity.Property(e => e.TotalGstForInvoice).HasColumnName("Total GST for Invoice");

                entity.Property(e => e.TotalPreGst).HasColumnName("TotalPreGST");
            });

            modelBuilder.Entity<VJournalsHealtPre>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journals_HEALT_Pre");

                entity.Property(e => e.InvoiceAmountGstEx).HasColumnName("Invoice Amount (GST Ex)");

                entity.Property(e => e.InvoiceAmountGstInc)
                    .HasColumnType("money")
                    .HasColumnName("Invoice Amount (GST Inc)");

                entity.Property(e => e.TotalGstForInvoice).HasColumnName("Total GST for Invoice");
            });

            modelBuilder.Entity<VJournalsIrdJournal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journals_IRD_Journal");

                entity.Property(e => e.AllocationText)
                    .IsRequired()
                    .HasMaxLength(208)
                    .HasColumnName("Allocation Text");

                entity.Property(e => e.BuildingNo).HasMaxLength(200);

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(200)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvAmountToPayExGst).HasColumnName("InvAmountToPayExGST");

                entity.Property(e => e.InvoiceKwh).HasColumnName("Invoice KWH");

                entity.Property(e => e.InvoiceLineDescription)
                    .HasMaxLength(267)
                    .HasColumnName("Invoice Line Description");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.TaxCode)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("Tax Code");

                entity.Property(e => e.V)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e._2096578).HasColumnName("2096578");
            });

            modelBuilder.Entity<VJournalsKtmJournal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journals_KTM_Journal");

                entity.Property(e => e.BatchNumber).HasColumnName("Batch Number");

                entity.Property(e => e.ClientCc)
                    .HasMaxLength(200)
                    .HasColumnName("ClientCC");

                entity.Property(e => e.Discount).HasColumnType("money");

                entity.Property(e => e.EnergyNo)
                    .HasMaxLength(200)
                    .HasColumnName("Energy No");

                entity.Property(e => e.From).HasColumnType("date");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvDate)
                    .HasColumnType("date")
                    .HasColumnName("Inv Date");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Inv Number");

                entity.Property(e => e.InvTotalInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Inv Total Incl GST");

                entity.Property(e => e.Kwh).HasColumnName("KWh");

                entity.Property(e => e.LastActualReadDate)
                    .HasColumnType("date")
                    .HasColumnName("Last Actual Read Date");

                entity.Property(e => e.NetExclGst).HasColumnName("Net excl GST");

                entity.Property(e => e.NetInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Net (incl GST");

                entity.Property(e => e.NoOfDays).HasColumnName("No Of Days");

                entity.Property(e => e.OpeningBalance)
                    .HasColumnType("money")
                    .HasColumnName("Opening Balance");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.Site).HasMaxLength(255);

                entity.Property(e => e.SpInvNumber).HasColumnName("SP Inv Number");

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.To).HasColumnType("date");
            });

            modelBuilder.Entity<VJournalsKtmPre>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journals_KTM_Pre");

                entity.Property(e => e.BatchNumber).HasColumnName("Batch Number");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.InvDate)
                    .HasColumnType("date")
                    .HasColumnName("Inv Date");

                entity.Property(e => e.InvTotalInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Inv Total Incl GST");

                entity.Property(e => e.NetInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Net incl GST");

                entity.Property(e => e.SpInvNumber)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SP Inv Number");
            });

            modelBuilder.Entity<VJournalsKtmReading>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journals_KTM_Readings");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.LastActualReadDate)
                    .HasColumnType("date")
                    .HasColumnName("Last Actual Read Date");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);
            });

            modelBuilder.Entity<VJournalsMfish1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Journals_MFISH_1");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.GstExclusive).HasColumnName("GST Exclusive");

                entity.Property(e => e.GstInclusive)
                    .HasColumnType("money")
                    .HasColumnName("GST Inclusive");

                entity.Property(e => e.InvoiceCount).HasColumnName("Invoice Count");
            });

            modelBuilder.Entity<VJournalsMfish2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Journals_MFISH_2");

                entity.Property(e => e.ActivityCode)
                    .HasMaxLength(255)
                    .HasColumnName("Activity Code");

                entity.Property(e => e.ContractNumber).HasColumnName("Contract Number");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(200)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.CustomerReference)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Customer Reference");

                entity.Property(e => e.DateReceived)
                    .HasColumnType("datetime")
                    .HasColumnName("Date Received");

                entity.Property(e => e.DocId).HasColumnName("Doc_ID");

                entity.Property(e => e.DocumentType)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("Document Type");

                entity.Property(e => e.DueDate)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Due Date");

                entity.Property(e => e.GstCode)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("GST Code");

                entity.Property(e => e.InvoiceAmountGst).HasColumnName("InvoiceAmountGST");

                entity.Property(e => e.InvoiceAmountGstexcl).HasColumnName("InvoiceAmount(GSTExcl)");

                entity.Property(e => e.InvoiceAmountGstincl)
                    .HasColumnType("money")
                    .HasColumnName("InvoiceAmount(GSTIncl)");

                entity.Property(e => e.InvoiceDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Invoice Date");

                entity.Property(e => e.InvoiceNumber)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Invoice Number");

                entity.Property(e => e.LineNarrative1)
                    .HasMaxLength(403)
                    .HasColumnName("Line Narrative 1");

                entity.Property(e => e.LineNarrative2)
                    .HasMaxLength(458)
                    .HasColumnName("Line Narrative 2");

                entity.Property(e => e.LineNumber)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Line Number");

                entity.Property(e => e.Narrative)
                    .IsRequired()
                    .HasMaxLength(18)
                    .IsUnicode(false);

                entity.Property(e => e.Narrative2).HasColumnName("Narrative 2");

                entity.Property(e => e.NaturalAccount)
                    .HasMaxLength(255)
                    .HasColumnName("Natural Account");

                entity.Property(e => e.SupplierNumber).HasColumnName("Supplier Number");

                entity.Property(e => e.TotalExclLineAmount).HasColumnName("Total Excl Line Amount");

                entity.Property(e => e.TotalGstLineAmount).HasColumnName("Total GST Line Amount");
            });

            modelBuilder.Entity<VJournalsMfishPayfile>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journals_MFISH_Payfile");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ActivityCode)
                    .HasMaxLength(255)
                    .HasColumnName("Activity Code");

                entity.Property(e => e.BuildingNo).HasMaxLength(200);

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(200)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.ExGst).HasColumnName("ExGST");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.NaturalAccount)
                    .HasMaxLength(255)
                    .HasColumnName("Natural Account");

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VJournalsMfishPre>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journals_MFISH_Pre");

                entity.Property(e => e.CountInvoices).HasColumnName("Count_Invoices");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.GstExclusive).HasColumnName("GST Exclusive");

                entity.Property(e => e.GstInclusive)
                    .HasColumnType("money")
                    .HasColumnName("GST Inclusive");
            });

            modelBuilder.Entity<VJournalsMfishRemit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Journals_MFISH_Remit");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<VJournalsMhjJournal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Journals_MHJ_Journal");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ClientCc)
                    .HasMaxLength(200)
                    .HasColumnName("ClientCC");

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.DateOfInvoice)
                    .HasColumnType("date")
                    .HasColumnName("Date Of Invoice");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmountToPayinclGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPayinclGST");

                entity.Property(e => e.InvDiscountinclGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountinclGST");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvoiceDate)
                    .HasMaxLength(64)
                    .IsUnicode(false)
                    .HasColumnName("Invoice Date");

                entity.Property(e => e.InvoiceNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Invoice Number");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SmartPowerInvNumber)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Smart Power Inv Number");

                entity.Property(e => e.SmartPowerInvoiceDate)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Smart Power Invoice Date");

                entity.Property(e => e.SubTotalinclGst)
                    .HasColumnType("money")
                    .HasColumnName("SubTotalinclGST");

                entity.Property(e => e.SupplierRef)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("Supplier Ref");

                entity.Property(e => e._)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("________");
            });

            modelBuilder.Entity<VJournalsMobilRemittance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journals_MOBIL_Remittance");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");
            });

            modelBuilder.Entity<VJournalsMobilSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journals_MOBIL_Summary");

                entity.Property(e => e.BankAccount)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Bank Account:");

                entity.Property(e => e.ContactEmail)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("Contact email:");

                entity.Property(e => e.ContactPhone)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("Contact Phone:");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Currency:");

                entity.Property(e => e.Data)
                    .HasMaxLength(255)
                    .HasColumnName("data");

                entity.Property(e => e.EmCompanyName)
                    .HasMaxLength(50)
                    .HasColumnName("EM Company Name:");

                entity.Property(e => e.Key)
                    .HasMaxLength(60)
                    .HasColumnName("key");

                entity.Property(e => e.PaymentAmount)
                    .HasColumnType("money")
                    .HasColumnName("Payment Amount:");

                entity.Property(e => e.PaymentDueDate)
                    .HasColumnType("date")
                    .HasColumnName("Payment Due Date:");

                entity.Property(e => e.ProducedBy)
                    .IsRequired()
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("Produced by:");

                entity.Property(e => e.Title).HasMaxLength(60);

                entity.Property(e => e.Vendor)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("Vendor #:");

                entity.Property(e => e.VendorName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Vendor Name:");
            });

            modelBuilder.Entity<VJournalsMobilSummaryCte>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journals_MOBIL_Summary_CTE");

                entity.Property(e => e.BankAccount)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Bank Account:");

                entity.Property(e => e.ContactEmail)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("Contact email:");

                entity.Property(e => e.ContactPhone)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("Contact Phone:");

                entity.Property(e => e.Currency)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Currency:");

                entity.Property(e => e.EmCompanyName)
                    .HasMaxLength(50)
                    .HasColumnName("EM Company Name:");

                entity.Property(e => e.PaymentAmount)
                    .HasColumnType("money")
                    .HasColumnName("Payment Amount:");

                entity.Property(e => e.PaymentDueDate)
                    .HasColumnType("date")
                    .HasColumnName("Payment Due Date:");

                entity.Property(e => e.ProducedBy)
                    .IsRequired()
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("Produced by:");

                entity.Property(e => e.Title).HasMaxLength(60);

                entity.Property(e => e.Vendor)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("Vendor #:");

                entity.Property(e => e.VendorName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Vendor Name:");
            });

            modelBuilder.Entity<VJournalsNccJournal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journals_NCC_Journal");

                entity.Property(e => e.Additionalcodetype1)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Additionalcodetype2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Additionalcodetype3)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Additionalcodetype4)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Approved)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.AssetId)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.BusinessUnit)
                    .HasMaxLength(3)
                    .HasColumnName("Business Unit");

                entity.Property(e => e.Codevalue1)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Codevalue2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Codevalue3)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Codevalue4)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false);

                entity.Property(e => e.Leasenumber)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Object).HasMaxLength(200);

                entity.Property(e => e.Recoverable)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Remark)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RetailerRef)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Subledger)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Subledgertype)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Subsidiary)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Supplier)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Suppliercontract)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Unitnumber)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Uom)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VJournalsNzpPayfile>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journals_NZP_Payfile");

                entity.Property(e => e.AccountCode).HasMaxLength(200);

                entity.Property(e => e.Consumer)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("Consumer#");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP#");

                entity.Property(e => e.Inv)
                    .HasMaxLength(252)
                    .HasColumnName("Inv#");

                entity.Property(e => e.InvAmounttopayxGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmounttopayxGST");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvoiceCredit)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Invoice/Credit");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.Nzpcostcentre)
                    .HasMaxLength(200)
                    .HasColumnName("NZPCostcentre");

                entity.Property(e => e.Nzpsitecode)
                    .HasMaxLength(200)
                    .HasColumnName("NZPSitecode");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerName).HasMaxLength(50);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteLocation).HasMaxLength(200);

                entity.Property(e => e.SubtotalinclGst)
                    .HasColumnType("money")
                    .HasColumnName("SubtotalinclGST");
            });

            modelBuilder.Entity<VJournalsNzpoJournal1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journals_NZPO_Journal_1");

                entity.Property(e => e.AccountCode).HasMaxLength(200);

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.AssetCode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Asset Code");

                entity.Property(e => e.BusinessUnitCode)
                    .HasMaxLength(255)
                    .HasColumnName("Business Unit Code");

                entity.Property(e => e.CompanyCode).HasMaxLength(255);

                entity.Property(e => e.CreditorCode)
                    .HasMaxLength(200)
                    .HasColumnName("Creditor Code");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.ExcludeFromRecharge)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Exclude from recharge");

                entity.Property(e => e.InvDescription)
                    .HasMaxLength(63)
                    .IsUnicode(false)
                    .HasColumnName("Inv Description");

                entity.Property(e => e.InvReference)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Inv Reference");

                entity.Property(e => e.InvoicedKwh).HasColumnName("InvoicedKWh");

                entity.Property(e => e.LineItemDescription)
                    .IsRequired()
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("Line Item Description");

                entity.Property(e => e.ManualCode)
                    .HasMaxLength(255)
                    .HasColumnName("Manual Code");

                entity.Property(e => e.PropertyCode)
                    .HasMaxLength(200)
                    .HasColumnName("Property Code");

                entity.Property(e => e.StartDate)
                    .HasColumnType("date")
                    .HasColumnName("Start Date");
            });

            modelBuilder.Entity<VJournalsNzpoJournal2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journals_NZPO_Journal_2");

                entity.Property(e => e.AccountCode).HasMaxLength(200);

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.AssetCode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Asset Code");

                entity.Property(e => e.BusinessUnitCode)
                    .HasMaxLength(255)
                    .HasColumnName("Business Unit Code");

                entity.Property(e => e.CompanyCode).HasMaxLength(255);

                entity.Property(e => e.CreditorCode)
                    .HasMaxLength(200)
                    .HasColumnName("Creditor Code");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.ExcludeFromRecharge)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Exclude from recharge");

                entity.Property(e => e.InvDescription)
                    .HasMaxLength(63)
                    .IsUnicode(false)
                    .HasColumnName("Inv Description");

                entity.Property(e => e.InvReference)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Inv Reference");

                entity.Property(e => e.InvoicedKwh).HasColumnName("InvoicedKWh");

                entity.Property(e => e.LineItemDescription)
                    .IsRequired()
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("Line Item Description");

                entity.Property(e => e.ManualCode)
                    .HasMaxLength(255)
                    .HasColumnName("Manual Code");

                entity.Property(e => e.PropertyCode)
                    .HasMaxLength(200)
                    .HasColumnName("Property Code");

                entity.Property(e => e.StartDate)
                    .HasColumnType("date")
                    .HasColumnName("Start Date");
            });

            modelBuilder.Entity<VJournalsNzpoJournal3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journals_NZPO_Journal_3");

                entity.Property(e => e.AccountCode).HasMaxLength(200);

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.AssetCode)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Asset Code");

                entity.Property(e => e.BusinessUnitCode)
                    .HasMaxLength(255)
                    .HasColumnName("Business Unit Code");

                entity.Property(e => e.CompanyCode).HasMaxLength(255);

                entity.Property(e => e.CreditorCode)
                    .HasMaxLength(200)
                    .HasColumnName("Creditor Code");

                entity.Property(e => e.Date).HasColumnType("date");

                entity.Property(e => e.ExcludeFromRecharge)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Exclude from recharge");

                entity.Property(e => e.InvDescription)
                    .HasMaxLength(63)
                    .IsUnicode(false)
                    .HasColumnName("Inv Description");

                entity.Property(e => e.InvReference)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Inv Reference");

                entity.Property(e => e.InvoicedKwh).HasColumnName("InvoicedKWh");

                entity.Property(e => e.LineItemDescription)
                    .IsRequired()
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("Line Item Description");

                entity.Property(e => e.ManualCode)
                    .HasMaxLength(255)
                    .HasColumnName("Manual Code");

                entity.Property(e => e.PropertyCode)
                    .HasMaxLength(200)
                    .HasColumnName("Property Code");

                entity.Property(e => e.StartDate)
                    .HasColumnType("date")
                    .HasColumnName("Start Date");
            });

            modelBuilder.Entity<VJournalsPnccJournal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journals_PNCC_Journal");

                entity.Property(e => e.Description).HasMaxLength(291);

                entity.Property(e => e.GlCode)
                    .HasMaxLength(200)
                    .HasColumnName("GL Code");

                entity.Property(e => e.InvAmountToPayExGst).HasColumnName("InvAmountToPayExGST");

                entity.Property(e => e.JobNumber)
                    .HasMaxLength(200)
                    .HasColumnName("Job Number");

                entity.Property(e => e.Month)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VJournalsRepcoJournal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journals_REPCO_Journal");

                entity.Property(e => e.AccNo).HasMaxLength(200);

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Discount).HasColumnType("money");

                entity.Property(e => e.EnergyNo).HasMaxLength(200);

                entity.Property(e => e.From).HasColumnType("date");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvTotIncGst)
                    .HasColumnType("money")
                    .HasColumnName("InvTotIncGST");

                entity.Property(e => e.Kwh).HasColumnName("KWh");

                entity.Property(e => e.Net).HasColumnType("money");

                entity.Property(e => e.NoDays).HasColumnName("No Days");

                entity.Property(e => e.OpeningBal).HasColumnType("money");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.Site).HasMaxLength(255);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.Spno).HasColumnName("SPNo");

                entity.Property(e => e.Supplier).HasMaxLength(50);

                entity.Property(e => e.To).HasColumnType("date");
            });

            modelBuilder.Entity<VJournalsSanfJornalPre>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journals_SANF_Jornal_Pre");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.Combined).HasMaxLength(602);

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(200)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.Division).HasMaxLength(200);

                entity.Property(e => e.GlAccount)
                    .HasMaxLength(200)
                    .HasColumnName("GL Account");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmountToPayInclGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPay incl GST");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvDiscountInclGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscount incl GST");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvoiceAmountToPayExclGst).HasColumnName("InvoiceAmountToPay excl GST");

                entity.Property(e => e.InvoicedKwh).HasColumnName("InvoicedKWh");

                entity.Property(e => e.MeterType)
                    .HasMaxLength(200)
                    .HasColumnName("Meter Type");

                entity.Property(e => e.ReadType)
                    .HasMaxLength(10)
                    .HasColumnName("Read Type");

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SubtotalInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Subtotal incl GST");

                entity.Property(e => e.SupplierRef)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("Supplier Ref");
            });

            modelBuilder.Entity<VJournalsSanfJournal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journals_SANF_Journal");

                entity.Property(e => e.Combined).HasMaxLength(602);

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(200)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.Division).HasMaxLength(200);

                entity.Property(e => e.ExclGst).HasColumnName("$exclGST");

                entity.Property(e => e.GlAccount)
                    .HasMaxLength(200)
                    .HasColumnName("GL Account");

                entity.Property(e => e.Kwh).HasColumnName("KWh");

                entity.Property(e => e.SumOfGst).HasColumnName("SumOfGST");

                entity.Property(e => e.Total).HasColumnType("money");
            });

            modelBuilder.Entity<VJournalsTollEnergyJournal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journals_TOLL_Energy_Journal");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(200)
                    .HasColumnName("Account Number");

                entity.Property(e => e.ClientRef)
                    .HasMaxLength(200)
                    .HasColumnName("Client Ref");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(200)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.DateOfInvoice)
                    .HasColumnType("date")
                    .HasColumnName("Date Of Invoice");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmountToPayInclGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPay incl GST");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvoiceAmountToPayExclGst).HasColumnName("InvoiceAmountToPay excl GST");

                entity.Property(e => e.InvoiceNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Invoice Number");

                entity.Property(e => e.Kwh).HasColumnName("KWh");

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SupplierRef)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("Supplier Ref");
            });

            modelBuilder.Entity<VJournalsTollWaterJournal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journals_TOLL_Water_Journal");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(200)
                    .HasColumnName("Account Number");

                entity.Property(e => e.ClientCc)
                    .HasMaxLength(200)
                    .HasColumnName("ClientCC");

                entity.Property(e => e.ClientRef)
                    .HasMaxLength(200)
                    .HasColumnName("Client Ref");

                entity.Property(e => e.DateOfInvoice)
                    .HasColumnType("date")
                    .HasColumnName("date Of Invoice");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmountToPayInclGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPay incl GST");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvoiceAmountToPayExclGst).HasColumnName("InvoiceAmountToPay excl GST");

                entity.Property(e => e.InvoiceNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Invoice Number");

                entity.Property(e => e.InvoicedKL).HasColumnName("Invoiced_kL");

                entity.Property(e => e.Lease).HasMaxLength(200);

                entity.Property(e => e.Oncharge).HasMaxLength(200);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SupplierRef)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("Supplier Ref");
            });

            modelBuilder.Entity<VJournalsTycoJournal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journals_TYCO_Journal");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(200)
                    .HasColumnName("Account Number");

                entity.Property(e => e.ClientRef)
                    .HasMaxLength(200)
                    .HasColumnName("Client Ref");

                entity.Property(e => e.CostCentre)
                    .HasMaxLength(200)
                    .HasColumnName("Cost Centre");

                entity.Property(e => e.DateOfInvoice)
                    .HasColumnType("date")
                    .HasColumnName("Date of Invoice");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmountToPayInclGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPay incl GST");

                entity.Property(e => e.InvDiscountInclGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscount incl GST");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvoiceAmountToPayExclGst).HasColumnName("InvoiceAmountToPay excl GST");

                entity.Property(e => e.InvoiceNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Invoice Number");

                entity.Property(e => e.Kwh).HasColumnName("KWh");

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SubtotalInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Subtotal incl GST");

                entity.Property(e => e.SupplierRef)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("Supplier Ref");
            });

            modelBuilder.Entity<VJournalsVeroJournal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journals_VERO_Journal");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ClientCc)
                    .HasMaxLength(200)
                    .HasColumnName("ClientCC");

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.GlCode)
                    .HasMaxLength(200)
                    .HasColumnName("GL Code");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmountToPayInclGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPay incl GST");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvDiscountInclGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscount incl GST");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvoiceAmountToPayExclGst).HasColumnName("InvoiceAmountToPay excl GST");

                entity.Property(e => e.Kwh).HasColumnName("KWh");

                entity.Property(e => e.Region2).HasMaxLength(200);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteLocation).HasMaxLength(200);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SpinvNumberOrig).HasColumnName("SPInvNumberOrig");

                entity.Property(e => e.SubtotalInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Subtotal incl GST");
            });

            modelBuilder.Entity<VJournalsWpacJournal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Journals_WPAC_Journal");

                entity.Property(e => e.Batch).HasColumnName("Batch#");

                entity.Property(e => e.Discount).HasColumnType("money");

                entity.Property(e => e.Energy)
                    .HasMaxLength(200)
                    .HasColumnName("Energy#");

                entity.Property(e => e.From).HasColumnType("date");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvOpenBalType).HasMaxLength(10);

                entity.Property(e => e.Invoice)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Invoice#");

                entity.Property(e => e.InvoiceAmountInclGst)
                    .HasColumnType("money")
                    .HasColumnName("Invoice Amount(InclGST)");

                entity.Property(e => e.Kwh).HasColumnName("KWh");

                entity.Property(e => e.Meter)
                    .HasMaxLength(200)
                    .HasColumnName("Meter#");

                entity.Property(e => e.Site).HasMaxLength(255);

                entity.Property(e => e.Supplier)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.To).HasColumnType("date");

                entity.Property(e => e.Wp)
                    .HasMaxLength(200)
                    .HasColumnName("WP#");
            });

            modelBuilder.Entity<VLastInvToDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_LastInvToDate");

                entity.Property(e => e.MaxOfInvEndDate).HasColumnType("date");

                entity.Property(e => e.MaxOfInvStartDate).HasColumnType("date");

                entity.Property(e => e.MaxOfSpinvNumber).HasColumnName("MaxOfSPInvNumber");
            });

            modelBuilder.Entity<VLastInvToDateSub>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_LastInvToDate_sub");

                entity.Property(e => e.MaxOfInvEndDate).HasColumnType("date");

                entity.Property(e => e.MaxOfInvStartDate).HasColumnType("date");
            });

            modelBuilder.Entity<VLastNonZeroSpin>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_LastNonZeroSPIN");

                entity.Property(e => e.MaxOfInvEndDate).HasColumnType("date");

                entity.Property(e => e.MaxOfInvStartDate).HasColumnType("date");
            });

            modelBuilder.Entity<VLatestNonZeroDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_LatestNonZeroDate");

                entity.Property(e => e.MaxOfInvEndDate).HasColumnType("date");

                entity.Property(e => e.MaxOfInvStartDate).HasColumnType("date");

                entity.Property(e => e.MaxOfSpinvNumber).HasColumnName("MaxOfSPInvNumber");
            });

            modelBuilder.Entity<VNoOfDaysPerSeason>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_NoOfDays_Per_Season");

                entity.Property(e => e.EndDayMonth)
                    .HasMaxLength(61)
                    .IsUnicode(false);

                entity.Property(e => e.EndIsinSummer).HasColumnName("End_Isin_Summer");

                entity.Property(e => e.EndIsinWinter).HasColumnName("End_Isin_Winter");

                entity.Property(e => e.EndMonth)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.EndYear)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvStartDate1).HasColumnType("date");

                entity.Property(e => e.SpinvNumber)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SPInvNumber");

                entity.Property(e => e.StartDayMonth)
                    .HasMaxLength(61)
                    .IsUnicode(false);

                entity.Property(e => e.StartIsinSummer).HasColumnName("Start_Isin_Summer");

                entity.Property(e => e.StartIsinWinter).HasColumnName("Start_Isin_Winter");

                entity.Property(e => e.StartMonth)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.StartYear)
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VNoOfDaysPerSeasonStep2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_NoOfDays_Per_Season_Step2");

                entity.Property(e => e.SpinvNumber)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VNoofDaysPerSeasonFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_NoofDays_per_Season_Final");

                entity.Property(e => e.SpinvNumber)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VPenaltyCharge>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Penalty_Charge");

                entity.Property(e => e.BatchMonth)
                    .HasColumnType("date")
                    .HasColumnName("Batch Month");

                entity.Property(e => e.ChargeDescription)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("Charge Description");

                entity.Property(e => e.EnvironmentalMonth)
                    .HasColumnType("date")
                    .HasColumnName("Environmental Month");

                entity.Property(e => e.ExGstBeforePpd).HasColumnName("$ - ex GST before PPD");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvoiceEndDate)
                    .HasColumnType("date")
                    .HasColumnName("Invoice End Date");

                entity.Property(e => e.InvoiceStartDate)
                    .HasColumnType("date")
                    .HasColumnName("Invoice Start Date");

                entity.Property(e => e.Product).HasMaxLength(50);

                entity.Property(e => e.ProductSubCat)
                    .HasMaxLength(250)
                    .HasColumnName("Product_Sub_Cat");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spil).HasColumnName("SPIL");

                entity.Property(e => e.Spin).HasColumnName("SPIN");
            });

            modelBuilder.Entity<VRatesLookupMain>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Rates_Lookup_Main");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.EdiAccountNo)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Account_No");

                entity.Property(e => e.EdiIcp)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_ICP");

                entity.Property(e => e.EdiInvNumber)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Inv_Number");

                entity.Property(e => e.EdiNetwrokId)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_NetwrokID");

                entity.Property(e => e.EdiRetailerCode)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Retailer_Code");

                entity.Property(e => e.EdiSiteDesciption)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Site_Desciption");

                entity.Property(e => e.RateCategory).HasMaxLength(50);

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VReportRepInvoicesWithLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Report_Rep_Invoices_With_Lines");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.OrgId).HasColumnName("Org_ID");

                entity.Property(e => e.RateCategory).HasMaxLength(50);

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VReportsGstRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Reports_GST_Rate");

                entity.Property(e => e.Gstrate)
                    .HasColumnType("numeric(4, 3)")
                    .HasColumnName("GSTRate");

                entity.Property(e => e.InvDate).HasColumnType("date");
            });

            modelBuilder.Entity<VReposCostExGstZeroCredit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Repos_CostExGST_ZeroCredits");

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.CheckHeader).HasColumnName("Check_Header");

                entity.Property(e => e.CorrectAmountPaidExGst)
                    .HasColumnType("money")
                    .HasColumnName("Correct_Amount_Paid_exGST");

                entity.Property(e => e.CreditInv1)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.EnergyType).HasMaxLength(255);

                entity.Property(e => e.HeaderKwh).HasColumnName("Header KWH");

                entity.Property(e => e.OpeningBalanceIncGst)
                    .HasColumnType("money")
                    .HasColumnName("Opening_Balance_incGST");

                entity.Property(e => e.Region).HasMaxLength(200);

                entity.Property(e => e.Region2).HasMaxLength(200);

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");
            });

            modelBuilder.Entity<VReposCostExGstZeroCreditsIrd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Repos_CostExGST_ZeroCredits_IRD");

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.CheckHeader).HasColumnName("Check_Header");

                entity.Property(e => e.CorrectAmountPaidExGst)
                    .HasColumnType("money")
                    .HasColumnName("Correct_Amount_Paid_exGST");

                entity.Property(e => e.CreditInv1)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentRetailer)
                    .HasMaxLength(20)
                    .HasColumnName("Current Retailer");

                entity.Property(e => e.EnergyType).HasMaxLength(255);

                entity.Property(e => e.HeaderKwh).HasColumnName("Header KWH");

                entity.Property(e => e.InvoiceRetailer)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("Invoice Retailer");

                entity.Property(e => e.OpeningBalanceIncGst)
                    .HasColumnType("money")
                    .HasColumnName("Opening_Balance_incGST");

                entity.Property(e => e.Region).HasMaxLength(200);

                entity.Property(e => e.Region2).HasMaxLength(200);

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");
            });

            modelBuilder.Entity<VReposCostExGstZeroCreditsIrdPre2dp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Repos_CostExGST_ZeroCredits_IRD_Pre2dp");

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.CheckHeader).HasColumnName("Check_Header");

                entity.Property(e => e.CorrectAmountPaidExGst)
                    .HasColumnType("money")
                    .HasColumnName("Correct_Amount_Paid_exGST");

                entity.Property(e => e.CreditInv1)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentRetailer)
                    .HasMaxLength(20)
                    .HasColumnName("Current Retailer");

                entity.Property(e => e.EnergyType).HasMaxLength(255);

                entity.Property(e => e.HeaderKwh).HasColumnName("Header KWH");

                entity.Property(e => e.InvoiceRetailer)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("Invoice Retailer");

                entity.Property(e => e.OpeningBalanceIncGst)
                    .HasColumnType("money")
                    .HasColumnName("Opening_Balance_incGST");

                entity.Property(e => e.Region).HasMaxLength(200);

                entity.Property(e => e.Region2).HasMaxLength(200);

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");
            });

            modelBuilder.Entity<VReposSiteDataNzme>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Repos_Site_Data_NZME");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.BusinessUnits)
                    .HasMaxLength(200)
                    .HasColumnName("Business Units");

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.DateAdded).HasColumnType("date");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.NzmeOffice)
                    .HasMaxLength(200)
                    .HasColumnName("NZME Office");

                entity.Property(e => e.PricingType)
                    .HasMaxLength(200)
                    .HasColumnName("Pricing Type");

                entity.Property(e => e.Retailer).HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteLocation).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteType)
                    .HasMaxLength(50)
                    .HasColumnName("Site_Type");
            });

            modelBuilder.Entity<VReposSitesCustomerRep>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Repos_Sites_Customer_Rep");

                entity.Property(e => e.AccountCode).HasMaxLength(200);

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.BpayCode)
                    .HasMaxLength(20)
                    .HasColumnName("BPayCode");

                entity.Property(e => e.BpayReference)
                    .HasMaxLength(20)
                    .HasColumnName("BPayReference");

                entity.Property(e => e.BuildingNo).HasMaxLength(200);

                entity.Property(e => e.CalSqMetres).HasColumnName("Cal_SqMetres");

                entity.Property(e => e.CarbonFactorArea)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Carbon_Factor_Area");

                entity.Property(e => e.ClientCc)
                    .HasMaxLength(200)
                    .HasColumnName("ClientCC");

                entity.Property(e => e.ClientCode).HasMaxLength(10);

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.CompanyCode).HasMaxLength(255);

                entity.Property(e => e.ContactAddressCity).HasMaxLength(200);

                entity.Property(e => e.ContactAddressLine1).HasMaxLength(200);

                entity.Property(e => e.ContactAddressLine2).HasMaxLength(200);

                entity.Property(e => e.ContactFloor).HasMaxLength(200);

                entity.Property(e => e.ContactMailAddressLine1).HasMaxLength(200);

                entity.Property(e => e.ContactName).HasMaxLength(200);

                entity.Property(e => e.ContactName2).HasMaxLength(200);

                entity.Property(e => e.ContactPhone).HasMaxLength(200);

                entity.Property(e => e.DataEntryNotes).HasColumnName("Data_Entry_Notes");

                entity.Property(e => e.DateAdded).HasColumnType("date");

                entity.Property(e => e.DateCeased).HasColumnType("date");

                entity.Property(e => e.DmType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("DM_Type");

                entity.Property(e => e.Dvn)
                    .HasMaxLength(255)
                    .HasColumnName("DVN");

                entity.Property(e => e.Entity).HasMaxLength(200);

                entity.Property(e => e.FixedKva).HasColumnName("FixedKVA");

                entity.Property(e => e.GreenEnergyPercentage).HasColumnName("Green_Energy_Percentage");

                entity.Property(e => e.GridExitPoint).HasMaxLength(255);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InputType)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.LeaseExpiry).HasColumnType("date");

                entity.Property(e => e.MasterListSiteType).HasMaxLength(255);

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.NetworkId)
                    .HasMaxLength(200)
                    .HasColumnName("NetworkID");

                entity.Property(e => e.OrderNumber).HasMaxLength(255);

                entity.Property(e => e.OrgId).HasColumnName("Org_ID");

                entity.Property(e => e.ParentCustomer).HasMaxLength(255);

                entity.Property(e => e.Region).HasMaxLength(200);

                entity.Property(e => e.Region2).HasMaxLength(200);

                entity.Property(e => e.RegistryAddress)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Address");

                entity.Property(e => e.RegistryChannelCount).HasColumnName("Registry_Channel_Count");

                entity.Property(e => e.RegistryChargeableCapacity).HasColumnName("Registry_Chargeable_Capacity");

                entity.Property(e => e.RegistryGenerationCapacity).HasColumnName("Registry_Generation_Capacity");

                entity.Property(e => e.RegistryInstallDetails).HasColumnName("Registry_Install_Details");

                entity.Property(e => e.RegistryLossCat1)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Loss_Cat_1");

                entity.Property(e => e.RegistryLossCat2)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Loss_Cat_2");

                entity.Property(e => e.RegistryMep)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_MEP");

                entity.Property(e => e.RegistryMeterCat).HasColumnName("Registry_Meter_Cat");

                entity.Property(e => e.RegistryMeterMultiplier).HasColumnName("Registry_Meter_Multiplier");

                entity.Property(e => e.RegistryMeterType)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_MeterType");

                entity.Property(e => e.RegistryNetwork)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Network");

                entity.Property(e => e.RegistryPoc)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_POC");

                entity.Property(e => e.RegistryPriceCat)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Price_Cat");

                entity.Property(e => e.RegistryStatus)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Status");

                entity.Property(e => e.RegistryUnmeteredLoad)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Unmetered_Load");

                entity.Property(e => e.RetailId)
                    .HasMaxLength(255)
                    .HasColumnName("RetailID");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.RetailerSiteRef).HasMaxLength(200);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteLocation).HasMaxLength(200);

                entity.Property(e => e.SiteLocationDd)
                    .HasMaxLength(255)
                    .HasColumnName("SiteLocationDD");

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeCode)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.Split)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Split %");

                entity.Property(e => e.SplitAccountPostFix).HasColumnName("Split_Account_PostFix");

                entity.Property(e => e.SplitParentSite).HasColumnName("Split_Parent_Site");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.Property(e => e.TaxClass)
                    .HasMaxLength(255)
                    .HasColumnName("Tax_Class");

                entity.Property(e => e.TimeAdded).HasColumnType("date");

                entity.Property(e => e.Vhaaddress1)
                    .HasMaxLength(255)
                    .HasColumnName("VHAAddress1");

                entity.Property(e => e.Vhaaddress2)
                    .HasMaxLength(255)
                    .HasColumnName("VHAAddress2");
            });

            modelBuilder.Entity<VReposTouMonthlyReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Repos_TOU_Monthly_Report");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvDiscountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountExGST");

                entity.Property(e => e.InvDiscountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountGST");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.Product).HasMaxLength(50);

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VReposWestpacBpayFile>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Repos_Westpac_BPay_File");

                entity.Property(e => e.BpayCode)
                    .HasMaxLength(20)
                    .HasColumnName("BPayCode");

                entity.Property(e => e.BpayReference)
                    .HasMaxLength(20)
                    .HasColumnName("BPayReference");

                entity.Property(e => e.RetailerName).HasMaxLength(50);
            });

            modelBuilder.Entity<VReposWestpacBpayFileCheck>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Repos_Westpac_BPay_File_Check");

                entity.Property(e => e.BpayCode)
                    .HasMaxLength(20)
                    .HasColumnName("BPayCode");

                entity.Property(e => e.BpayReference)
                    .HasMaxLength(20)
                    .HasColumnName("BPayReference");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.RetailerName).HasMaxLength(50);
            });

            modelBuilder.Entity<VReposWestpacBpayFilePre2dp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Repos_Westpac_BPay_File_Pre2dp");

                entity.Property(e => e.BpayCode)
                    .HasMaxLength(20)
                    .HasColumnName("BPayCode");

                entity.Property(e => e.BpayReference)
                    .HasMaxLength(20)
                    .HasColumnName("BPayReference");

                entity.Property(e => e.RetailerName).HasMaxLength(50);
            });

            modelBuilder.Entity<VRepositoryEnvironmental>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Repository_Environmental");

                entity.Property(e => e.CalculatedGreenEnergy).HasColumnName("Calculated Green Energy $");

                entity.Property(e => e.CalculatedGreenEnergyKWh).HasColumnName("Calculated Green Energy kWh");

                entity.Property(e => e.CalculatedSolarEnergy).HasColumnName("Calculated Solar Energy $");

                entity.Property(e => e.CalculatedSolarEnergyKWh).HasColumnName("Calculated Solar Energy kWh");

                entity.Property(e => e.GreenEnergyPercentage).HasColumnName("Green_Energy_Percentage");

                entity.Property(e => e.InvAmount).HasColumnType("money");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.Region).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.UnitTotal).HasColumnName("Unit_Total");
            });

            modelBuilder.Entity<VSiteInvLastEndDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Site_Inv_Last_End_Date");

                entity.Property(e => e.LastInvDate).HasColumnType("date");

                entity.Property(e => e.LastInvEndDate).HasColumnType("date");
            });

            modelBuilder.Entity<VSiteInvLastStartDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Site_Inv_Last_Start_Date");

                entity.Property(e => e.LastInvStartDate).HasColumnType("date");
            });

            modelBuilder.Entity<VSiteTypesReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vSiteTypesReport");

                entity.Property(e => e.ClientName).HasMaxLength(50);

                entity.Property(e => e.ElectricityIcpSActive).HasColumnName("Electricity ICP’s active");

                entity.Property(e => e.GasIcpSActive).HasColumnName("Gas ICP’s active");

                entity.Property(e => e.SplitsActive).HasColumnName("Splits active");

                entity.Property(e => e.WaterAccountsActive).HasColumnName("Water accounts active");
            });

            modelBuilder.Entity<VSiteTypesReportE>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vSiteTypesReportE");

                entity.Property(e => e.ClientCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.ClientName).HasMaxLength(50);

                entity.Property(e => e.ElectricityIcpSActive).HasColumnName("Electricity ICP’s active");
            });

            modelBuilder.Entity<VSiteTypesReportEgt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vSiteTypesReportEGT");

                entity.Property(e => e.ClientCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.ClientName).HasMaxLength(50);

                entity.Property(e => e.SplitsActive).HasColumnName("Splits active");
            });

            modelBuilder.Entity<VSiteTypesReportG>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vSiteTypesReportG");

                entity.Property(e => e.ClientCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.ClientName).HasMaxLength(50);

                entity.Property(e => e.GasIcpSActive).HasColumnName("Gas ICP’s active");
            });

            modelBuilder.Entity<VSiteTypesReportT>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vSiteTypesReportT");

                entity.Property(e => e.ClientCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.ClientName).HasMaxLength(50);

                entity.Property(e => e.WaterAccountsActive).HasColumnName("Water accounts active");
            });

            modelBuilder.Entity<VSitesActiveWithInv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Sites_Active_With_Inv");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.DateAdded).HasColumnType("date");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.Region).HasMaxLength(200);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteLocation).HasMaxLength(200);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteTypeCode)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<VSitesLookupAccountNo1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Sites_Lookup_AccountNo_1");

                entity.Property(e => e.EdiAccountNo)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Account_No");

                entity.Property(e => e.EdiIcp)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_ICP");

                entity.Property(e => e.EdiRetailerCode)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Retailer_Code");
            });

            modelBuilder.Entity<VSitesLookupCreateSitesList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Sites_Lookup_Create_Sites_List");

                entity.Property(e => e.EdSiteSubType)
                    .HasMaxLength(10)
                    .HasColumnName("ED_Site_Sub_Type");

                entity.Property(e => e.EdSiteType)
                    .HasMaxLength(10)
                    .HasColumnName("ED_Site_Type");

                entity.Property(e => e.EdiAccountNo)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Account_No");

                entity.Property(e => e.EdiIcp)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_ICP");

                entity.Property(e => e.EdiId).HasColumnName("EDI_ID");

                entity.Property(e => e.EdiInvNumber)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Inv_Number");

                entity.Property(e => e.EdiNetwrokId)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_NetwrokID");

                entity.Property(e => e.EdiRetailerCode)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Retailer_Code");

                entity.Property(e => e.EdiSiteDesciption)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Site_Desciption");

                entity.Property(e => e.EdiSiteId).HasColumnName("EDI_Site_ID");

                entity.Property(e => e.Results).HasColumnName("RESULTS");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VSitesLookupEdiSitesDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Sites_Lookup_EDI_Sites_Details");

                entity.Property(e => e.EdSiteSubType)
                    .HasMaxLength(10)
                    .HasColumnName("ED_Site_Sub_Type");

                entity.Property(e => e.EdSiteType)
                    .HasMaxLength(10)
                    .HasColumnName("ED_Site_Type");

                entity.Property(e => e.EdiAccountNo)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Account_No");

                entity.Property(e => e.EdiIcp)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_ICP");

                entity.Property(e => e.EdiId).HasColumnName("EDI_ID");

                entity.Property(e => e.EdiInvNumber)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Inv_Number");

                entity.Property(e => e.EdiNetwrokId)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_NetwrokID");

                entity.Property(e => e.EdiRetailerCode)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Retailer_Code");

                entity.Property(e => e.EdiSiteDesciption)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Site_Desciption");

                entity.Property(e => e.EdiSiteId).HasColumnName("EDI_Site_ID");
            });

            modelBuilder.Entity<VSitesLookupEdiidByBatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Sites_Lookup_EDIID_By_Batch");

                entity.Property(e => e.EdiId).HasColumnName("EDI_ID");

                entity.Property(e => e.EdiLBatchNo).HasColumnName("EDI_L_BatchNo");
            });

            modelBuilder.Entity<VSitesLookupExSplit>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Sites_Lookup_Ex_Splits");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteNo).ValueGeneratedOnAdd();

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");
            });

            modelBuilder.Entity<VSitesLookupFilterByUtilityType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Sites_Lookup_Filter_By_Utility_Types");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");
            });

            modelBuilder.Entity<VSitesLookupIcp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Sites_Lookup_ICP");

                entity.Property(e => e.EdiIcp)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_ICP");

                entity.Property(e => e.EdiInvNumber)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Inv_Number");

                entity.Property(e => e.IcpCount).HasColumnName("ICP_Count");
            });

            modelBuilder.Entity<VSitesLookupIcpByEdiid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Sites_Lookup_ICP_By_EDIID");

                entity.Property(e => e.EdiIcp)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_ICP");

                entity.Property(e => e.EdiId).HasColumnName("EDI_ID");

                entity.Property(e => e.EdiInvNumber)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Inv_Number");
            });

            modelBuilder.Entity<VSitesLookupIcpBySpin>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Sites_Lookup_ICP_By_SPIN");

                entity.Property(e => e.EdiIcp)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_ICP");

                entity.Property(e => e.EdiInvNumber)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Inv_Number");

                entity.Property(e => e.IcpCount).HasColumnName("ICP_Count");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VSitesLookupIcps1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Sites_Lookup_ICPs_1");

                entity.Property(e => e.EdiIcp)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_ICP");
            });

            modelBuilder.Entity<VSitesLookupMain>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Sites_Lookup_Main");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.EdiAccountNo)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Account_No");

                entity.Property(e => e.EdiIcp)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_ICP");

                entity.Property(e => e.EdiId).HasColumnName("EDI_ID");

                entity.Property(e => e.EdiInvNumber)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Inv_Number");

                entity.Property(e => e.EdiNetwrokId)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_NetwrokID");

                entity.Property(e => e.EdiRetailerCode)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Retailer_Code");

                entity.Property(e => e.EdiSiteDesciption)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Site_Desciption");

                entity.Property(e => e.EdiSiteId).HasColumnName("EDI_Site_ID");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VSitesLookupMainResultsByEdiid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Sites_Lookup_Main_Results_By_EDIID");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.Action)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false);

                entity.Property(e => e.EdiAccountNo)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Account_No");

                entity.Property(e => e.EdiIcp)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_ICP");

                entity.Property(e => e.EdiId).HasColumnName("EDI_ID");

                entity.Property(e => e.EdiInvNumber)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Inv_Number");

                entity.Property(e => e.EdiNetwrokId)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_NetwrokID");

                entity.Property(e => e.EdiRetailerCode)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Retailer_Code");

                entity.Property(e => e.EdiSiteDesciption)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Site_Desciption");

                entity.Property(e => e.EdiSiteId).HasColumnName("EDI_Site_ID");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VSitesLookupRetailer1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Sites_Lookup_Retailer_1");

                entity.Property(e => e.EdiIcp)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_ICP");

                entity.Property(e => e.EdiRetailerCode)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Retailer_Code");
            });

            modelBuilder.Entity<VSitesLookupSiteDetailsBySpin>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Sites_Lookup_Site_Details_By_SPIN");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VSitesLookupStep1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Sites_Lookup_Step_1");

                entity.Property(e => e.CountSpid).HasColumnName("Count_SPID");

                entity.Property(e => e.EdiIcp)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_ICP");
            });

            modelBuilder.Entity<VSitesLookupStep2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Sites_Lookup_Step_2");

                entity.Property(e => e.CountSpid).HasColumnName("Count_SPID");

                entity.Property(e => e.EdiIcp)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_ICP");

                entity.Property(e => e.EdiRetailerCode)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Retailer_Code");
            });

            modelBuilder.Entity<VSitesLookupStep3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Sites_Lookup_Step_3");

                entity.Property(e => e.CountSpid).HasColumnName("Count_SPID");

                entity.Property(e => e.EdiAccountNo)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Account_No");

                entity.Property(e => e.EdiIcp)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_ICP");

                entity.Property(e => e.EdiRetailerCode)
                    .HasMaxLength(250)
                    .HasColumnName("EDI_Retailer_Code");
            });

            modelBuilder.Entity<VSparkGst>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_SPARK_GST");

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST");

                entity.Property(e => e.MeterType).HasMaxLength(200);
            });

            modelBuilder.Entity<VSparkMonthlySummaryLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Spark_Monthly_Summary_Lines");

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.BatchTotal).HasColumnName("Batch_Total");

                entity.Property(e => e.MeterType)
                    .HasMaxLength(200)
                    .HasColumnName("Meter_Type");

                entity.Property(e => e.RateClass1)
                    .HasMaxLength(255)
                    .HasColumnName("Rate_Class");
            });

            modelBuilder.Entity<VSparkMonthlySummaryLinesBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Spark_Monthly_Summary_Lines_Base");

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.MeterType)
                    .HasMaxLength(200)
                    .HasColumnName("Meter_Type");

                entity.Property(e => e.RateClass1)
                    .HasMaxLength(255)
                    .HasColumnName("Rate_Class");
            });

            modelBuilder.Entity<VSparkNewSite>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Spark_New_Sites");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.BuildingNo).HasMaxLength(200);

                entity.Property(e => e.ClientCc)
                    .HasMaxLength(200)
                    .HasColumnName("ClientCC");

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.DateAdded).HasColumnType("date");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.RegistryNetwork)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Network");

                entity.Property(e => e.RegistryPoc)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_POC");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteLocation).HasMaxLength(200);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteNo).ValueGeneratedOnAdd();

                entity.Property(e => e.SiteStatus).HasMaxLength(200);
            });

            modelBuilder.Entity<VSparkOpeningBalance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_SPARK_OpeningBalances");

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.SumOfInvOpeningBalance).HasColumnType("money");
            });

            modelBuilder.Entity<VSparkPayfile>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Spark_Payfile");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.Blank1)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Blanks2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Gl)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("GL");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.MeterType).HasMaxLength(200);
            });

            modelBuilder.Entity<VSparkPayfilePre2dp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Spark_Payfile_Pre2dp");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.Blank1)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.Blanks2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Gl)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .HasColumnName("GL");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.MeterType).HasMaxLength(200);
            });

            modelBuilder.Entity<VSplitChildAmountToPayTestSum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Split_Child_Amount_To_Pay_Test_Sum");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SplitParentSite).HasColumnName("Split_Parent_Site");

                entity.Property(e => e.SumInvAmountToPay)
                    .HasColumnType("money")
                    .HasColumnName("Sum_InvAmountToPay");

                entity.Property(e => e.SumInvAmountToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("Sum_InvAmountToPayExGST");

                entity.Property(e => e.SumInvAmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("Sum_InvAmountToPayGST");
            });

            modelBuilder.Entity<VSplitInvoicesByBatch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Split_Invoices_By_Batch");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ChildSiteAccount)
                    .HasMaxLength(212)
                    .HasColumnName("Child_Site_Account");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.NewInvoice).HasColumnName("New_Invoice");

                entity.Property(e => e.NewInvoiceNo)
                    .HasMaxLength(62)
                    .HasColumnName("New_Invoice_No");

                entity.Property(e => e.ParentSpin).HasColumnName("Parent_SPIN");

                entity.Property(e => e.ReadyForUpload).HasColumnName("Ready_For_Upload");

                entity.Property(e => e.SiteCreateError)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("Site_Create_Error");

                entity.Property(e => e.SiteExistsError)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("Site_Exists_Error");

                entity.Property(e => e.SiteFixError)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("Site Fix Error");

                entity.Property(e => e.SiteSplitError)
                    .HasMaxLength(17)
                    .IsUnicode(false)
                    .HasColumnName("Site Split Error");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SplitAccountPostFix).HasColumnName("Split_Account_PostFix");

                entity.Property(e => e.SplitChildSite).HasColumnName("Split_Child_Site");

                entity.Property(e => e.SplitClientCode)
                    .HasMaxLength(255)
                    .HasColumnName("Split_Client_Code");

                entity.Property(e => e.SplitId).HasColumnName("Split_ID");

                entity.Property(e => e.SplitParentSite).HasColumnName("Split_Parent_Site");

                entity.Property(e => e.SplitSubTotal).HasColumnName("Split_Sub_Total");

                entity.Property(e => e.SplitTotal).HasColumnName("Split_Total");
            });

            modelBuilder.Entity<VSplitInvoicesSiteDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Split_Invoices_Site_Details");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ChildSiteAccount)
                    .HasMaxLength(212)
                    .HasColumnName("Child_Site_Account");

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteNoResult)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SplitAccountPostFix).HasColumnName("Split_Account_PostFix");

                entity.Property(e => e.SplitClientCode)
                    .HasMaxLength(255)
                    .HasColumnName("Split_Client_Code");

                entity.Property(e => e.SplitId).HasColumnName("Split_ID");

                entity.Property(e => e.SplitParentSite).HasColumnName("Split_Parent_Site");

                entity.Property(e => e.SplitTotal).HasColumnName("Split_Total");

                entity.Property(e => e.SplitValue).HasColumnName("Split_Value");
            });

            modelBuilder.Entity<VSplitParentAmountToPayTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Split_Parent_Amount_To_Pay_Test");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvAmountToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPayExGST");

                entity.Property(e => e.InvAmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPayGST");

                entity.Property(e => e.NewInvoice).HasColumnName("New_Invoice");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.SplitParentSite).HasColumnName("Split_Parent_Site");
            });

            modelBuilder.Entity<VSplitParentChildAmountToPayCompareTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Split_Parent_Child_Amount_To_Pay_Compare_Test");

                entity.Property(e => e.DiffAmountToPayExclGst)
                    .HasColumnType("money")
                    .HasColumnName("Diff_AmountToPay_ExclGST");

                entity.Property(e => e.DiffAmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("Diff_AmountToPay_GST");

                entity.Property(e => e.DiffAmountToPayIncGst)
                    .HasColumnType("money")
                    .HasColumnName("Diff_AmountToPay_IncGST");

                entity.Property(e => e.NewInvoice).HasColumnName("New_Invoice");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VSplitParentChildAmountToPayCompareTestView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Split_Parent_Child_Amount_To_Pay_Compare_Test_View");

                entity.Property(e => e.DiffAmountToPayExclGst)
                    .HasColumnType("money")
                    .HasColumnName("Diff_AmountToPay_ExclGST");

                entity.Property(e => e.DiffAmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("Diff_AmountToPay_GST");

                entity.Property(e => e.DiffAmountToPayIncGst)
                    .HasColumnType("money")
                    .HasColumnName("Diff_AmountToPay_IncGST");

                entity.Property(e => e.NewInvoice).HasColumnName("New_Invoice");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            modelBuilder.Entity<VSplitParentSite>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Split_Parent_Sites");

                entity.Property(e => e.SplitAccountPostFix).HasColumnName("Split_Account_PostFix");

                entity.Property(e => e.SplitChildSite).HasColumnName("Split_Child_Site");

                entity.Property(e => e.SplitClientCode)
                    .HasMaxLength(255)
                    .HasColumnName("Split_Client_Code");

                entity.Property(e => e.SplitId).HasColumnName("Split_ID");

                entity.Property(e => e.SplitParentSite).HasColumnName("Split_Parent_Site");

                entity.Property(e => e.SplitValue).HasColumnName("Split_Value");

                entity.Property(e => e.Status).HasMaxLength(10);
            });

            modelBuilder.Entity<VSplitSite>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Split_Sites");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ChildSiteAccount)
                    .HasMaxLength(212)
                    .HasColumnName("Child_Site_Account");

                entity.Property(e => e.SplitAccountPostFix).HasColumnName("Split_Account_PostFix");

                entity.Property(e => e.SplitChildSite).HasColumnName("Split_Child_Site");

                entity.Property(e => e.SplitClientCode)
                    .HasMaxLength(255)
                    .HasColumnName("Split_Client_Code");

                entity.Property(e => e.SplitId).HasColumnName("Split_ID");

                entity.Property(e => e.SplitParentSite).HasColumnName("Split_Parent_Site");

                entity.Property(e => e.SplitValue).HasColumnName("Split_Value");

                entity.Property(e => e.Status).HasMaxLength(10);
            });

            modelBuilder.Entity<VSplitSubDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Split_Sub_Details");

                entity.Property(e => e.AccountPostFix).HasColumnName("Account_PostFix");

                entity.Property(e => e.ChildSite).HasColumnName("Child_Site");

                entity.Property(e => e.ParentSite).HasColumnName("Parent_Site");

                entity.Property(e => e.SubStatus)
                    .HasMaxLength(10)
                    .HasColumnName("Sub_Status");
            });

            modelBuilder.Entity<VSplitSumSplitValueByParentSite>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Split_Sum_SplitValue_By_ParentSite");

                entity.Property(e => e.SplitClientCode)
                    .HasMaxLength(255)
                    .HasColumnName("Split_Client_Code");

                entity.Property(e => e.SplitParentSite).HasColumnName("Split_Parent_Site");

                entity.Property(e => e.SplitTotal).HasColumnName("Split_Total");

                entity.Property(e => e.Status).HasMaxLength(10);
            });

            modelBuilder.Entity<VTablesViewsInvoiceHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_TablesViews_Invoice_Headers");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ApplySitePpd).HasColumnName("Apply_Site_PPD");

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmount).HasColumnType("money");

                entity.Property(e => e.InvAmountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountExGST");

                entity.Property(e => e.InvAmountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountGST");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvAmountToPayExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPayExGST");

                entity.Property(e => e.InvAmountToPayGst)
                    .HasColumnType("money")
                    .HasColumnName("InvAmountToPayGST");

                entity.Property(e => e.InvArchived).HasColumnName("Inv_Archived");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvDiscountExGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountExGST");

                entity.Property(e => e.InvDiscountGst)
                    .HasColumnType("money")
                    .HasColumnName("InvDiscountGST");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvEnteredDate).HasColumnType("date");

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvOpenBalType).HasMaxLength(10);

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.IssuesToResolve).HasColumnName("Issues To Resolve");

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.ObGst).HasColumnName("OB_GST");

                entity.Property(e => e.OpeningBalanceExGst)
                    .HasColumnType("money")
                    .HasColumnName("OpeningBalanceExGST");

                entity.Property(e => e.OpeningBalanceGst)
                    .HasColumnType("money")
                    .HasColumnName("OpeningBalanceGST");

                entity.Property(e => e.ParentAccNum)
                    .HasMaxLength(255)
                    .HasColumnName("Parent_Acc_Num");

                entity.Property(e => e.ParentSpin).HasColumnName("Parent_SPIN");

                entity.Property(e => e.PdfInvAmountToPay)
                    .HasColumnType("money")
                    .HasColumnName("PDF_InvAmountToPay");

                entity.Property(e => e.PpdGst).HasColumnName("PPD_GST");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Spib).HasColumnName("SPIB");

                entity.Property(e => e.Spid).HasColumnName("SPID");

                entity.Property(e => e.Spin).HasColumnName("SPIN");

                entity.Property(e => e.StatementNumber).HasMaxLength(255);

                entity.Property(e => e.TaxClass)
                    .HasMaxLength(255)
                    .HasColumnName("Tax_Class");

                entity.Property(e => e.UnitTotal).HasColumnName("Unit_Total");
            });

            modelBuilder.Entity<VTariffsDuplicationTest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Tariffs_Duplication_Test");

                entity.Property(e => e.CountOccurence).HasColumnName("Count_Occurence");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.TariffDescription).HasMaxLength(255);
            });

            modelBuilder.Entity<VTariffsDuplicationTestFinal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Tariffs_Duplication_Test_Final");

                entity.Property(e => e.ClientCode)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Comments).HasMaxLength(255);

                entity.Property(e => e.DateCreated).HasColumnType("date");

                entity.Property(e => e.Gst).HasColumnName("GST");

                entity.Property(e => e.Gstrate).HasColumnName("GSTRate");

                entity.Property(e => e.InvoiceType).HasMaxLength(255);

                entity.Property(e => e.MeterNo).HasMaxLength(50);

                entity.Property(e => e.OrgId).HasColumnName("Org_ID");

                entity.Property(e => e.Ppd).HasColumnName("PPD");

                entity.Property(e => e.RateId).HasColumnName("RateID");

                entity.Property(e => e.Status).HasMaxLength(25);

                entity.Property(e => e.SupplierTariffCode).HasMaxLength(255);

                entity.Property(e => e.TariffDescription).HasMaxLength(255);

                entity.Property(e => e.TariffId).HasColumnName("TariffID");

                entity.Property(e => e.UnitMultiplierType)
                    .IsRequired()
                    .HasMaxLength(15);
            });

            modelBuilder.Entity<VWebChartActual>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Web_Chart_Actuals");

                entity.Property(e => e.Month).HasMaxLength(34);

                entity.Property(e => e.MonthYear)
                    .HasMaxLength(34)
                    .HasColumnName("Month_Year");

                entity.Property(e => e.SBatchMonth)
                    .HasColumnType("date")
                    .HasColumnName("S_Batch_Month");

                entity.Property(e => e.SUtilityType)
                    .HasMaxLength(500)
                    .HasColumnName("s_Utility_Type");

                entity.Property(e => e.SumActualConsumption).HasColumnName("Sum_Actual_Consumption");

                entity.Property(e => e.SumActualDollars).HasColumnName("Sum_Actual_Dollars");

                entity.Property(e => e.SumBudgetConsumption).HasColumnName("Sum_Budget_Consumption");

                entity.Property(e => e.SumBudgetDollars).HasColumnName("Sum_Budget_Dollars");
            });

            modelBuilder.Entity<VWebChartsActualsSmall>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Web_Charts_Actuals_Small");

                entity.Property(e => e.Month).HasMaxLength(34);

                entity.Property(e => e.MonthYearUtility)
                    .HasMaxLength(535)
                    .HasColumnName("Month_Year_Utility");

                entity.Property(e => e.SBatchMonth)
                    .HasColumnType("date")
                    .HasColumnName("S_Batch_Month");

                entity.Property(e => e.SUtilityType)
                    .HasMaxLength(500)
                    .HasColumnName("s_Utility_Type");

                entity.Property(e => e.SumActualConsumption).HasColumnName("Sum_Actual_Consumption");

                entity.Property(e => e.SumActualDollars).HasColumnName("Sum_Actual_Dollars");

                entity.Property(e => e.SumBudgetConsumption).HasColumnName("Sum_Budget_Consumption");

                entity.Property(e => e.SumBudgetDollars).HasColumnName("Sum_Budget_Dollars");
            });

            modelBuilder.Entity<VWebDailySummaryDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Web_Daily_Summary_Data");

                entity.Property(e => e.EsConsumptionDailyAvg).HasColumnName("ES_Consumption_Daily_Avg");

                entity.Property(e => e.EsCreditBalance)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("ES_Credit_Balance");

                entity.Property(e => e.EsCreditInvoice).HasColumnName("ES_Credit_Invoice");

                entity.Property(e => e.EsDay)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ES_Day");

                entity.Property(e => e.EsDollarsDailyAvg)
                    .HasColumnType("money")
                    .HasColumnName("ES_Dollars_Daily_Avg");

                entity.Property(e => e.EsInvNum)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("ES_InvNum");

                entity.Property(e => e.EsMonth)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ES_Month");

                entity.Property(e => e.EsPeriod)
                    .HasColumnType("datetime")
                    .HasColumnName("ES_Period");

                entity.Property(e => e.EsReadType)
                    .HasMaxLength(10)
                    .HasColumnName("ES_ReadType");

                entity.Property(e => e.EsSiteId).HasColumnName("ES_SiteID");

                entity.Property(e => e.EsSourceType)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ES_Source_Type");

                entity.Property(e => e.EsSpinvNum).HasColumnName("ES_SPInvNum");

                entity.Property(e => e.EsYear)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("ES_Year");
            });

            modelBuilder.Entity<VWebEmissionsDatum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Web_Emissions_Data");

                entity.Property(e => e.Activity).HasMaxLength(250);

                entity.Property(e => e.ClientCode).HasMaxLength(10);

                entity.Property(e => e.Co2Code)
                    .HasMaxLength(200)
                    .HasColumnName("CO2_Code");

                entity.Property(e => e.Co2Factor).HasColumnName("CO2_Factor");

                entity.Property(e => e.Co2Period)
                    .HasColumnType("date")
                    .HasColumnName("CO2_Period");

                entity.Property(e => e.Source).HasMaxLength(50);
            });

            modelBuilder.Entity<VWebFinancialYearEndCalc>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Web_Financial_Year_End_Calc");

                entity.Property(e => e.Fye).HasColumnName("FYE");

                entity.Property(e => e.SMonth).HasColumnName("S_Month");

                entity.Property(e => e.SSiteId).HasColumnName("S_SiteID");

                entity.Property(e => e.SYear).HasColumnName("S_Year");
            });

            modelBuilder.Entity<VWebFinancialYearEndCalcDefunct>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Web_Financial_Year_End_Calc_DEFUNCT");

                entity.Property(e => e.Fye).HasColumnName("FYE");

                entity.Property(e => e.SMonth).HasColumnName("S_Month");

                entity.Property(e => e.SSiteId).HasColumnName("S_SiteID");

                entity.Property(e => e.SYear).HasColumnName("S_Year");
            });

            modelBuilder.Entity<VWebInvoiceDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Web_Invoice_Details");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmount).HasColumnType("money");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(1)
                    .HasColumnName("ProductID");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitTotal).HasColumnName("Unit_Total");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VWebInvoiceDetailReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Web_Invoice_Detail_Report");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.InvAmount).HasColumnType("money");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvEnteredDate).HasColumnType("date");

                entity.Property(e => e.InvGst)
                    .HasColumnType("money")
                    .HasColumnName("InvGST");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.InvTotal).HasColumnType("money");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitTotal).HasColumnName("Unit_Total");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VWebInvoiceHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Web_Invoice_Header");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmount).HasColumnType("money");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitTotal).HasColumnName("Unit_Total");
            });

            modelBuilder.Entity<VWebInvoiceLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Web_Invoice_Lines");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.InvLineNo).ValueGeneratedOnAdd();

                entity.Property(e => e.ProductId)
                    .HasMaxLength(1)
                    .HasColumnName("ProductID");

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<VWebInvoiceSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Web_Invoice_Search");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InvAmount).HasColumnType("money");

                entity.Property(e => e.InvAmountToPay).HasColumnType("money");

                entity.Property(e => e.InvDate).HasColumnType("date");

                entity.Property(e => e.InvDiscount).HasColumnType("money");

                entity.Property(e => e.InvDueDate).HasColumnType("date");

                entity.Property(e => e.InvEndDate).HasColumnType("date");

                entity.Property(e => e.InvNotes).HasMaxLength(255);

                entity.Property(e => e.InvNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.InvOpeningBalance).HasColumnType("money");

                entity.Property(e => e.InvStartDate).HasColumnType("date");

                entity.Property(e => e.InvSubTotal).HasColumnType("money");

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.ReadyForUpload).HasColumnName("Ready_For_Upload");

                entity.Property(e => e.RetailerCode)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");

                entity.Property(e => e.UnitTotal).HasColumnName("Unit_Total");
            });

            modelBuilder.Entity<VWebMasterFiltersBySite>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("V_Web_Master_Filters_By_Site");

                entity.Property(e => e.SFilter1)
                    .HasMaxLength(500)
                    .HasColumnName("sFilter_1");

                entity.Property(e => e.SFilter10)
                    .HasMaxLength(500)
                    .HasColumnName("sFilter_10");

                entity.Property(e => e.SFilter2)
                    .HasMaxLength(500)
                    .HasColumnName("sFilter_2");

                entity.Property(e => e.SFilter3)
                    .HasMaxLength(500)
                    .HasColumnName("sFilter_3");

                entity.Property(e => e.SFilter4)
                    .HasMaxLength(500)
                    .HasColumnName("sFilter_4");

                entity.Property(e => e.SFilter5)
                    .HasMaxLength(500)
                    .HasColumnName("sFilter_5");

                entity.Property(e => e.SFilter6)
                    .HasMaxLength(500)
                    .HasColumnName("sFilter_6");

                entity.Property(e => e.SFilter7)
                    .HasMaxLength(500)
                    .HasColumnName("sFilter_7");

                entity.Property(e => e.SFilter8)
                    .HasMaxLength(500)
                    .HasColumnName("sFilter_8");

                entity.Property(e => e.SFilter9)
                    .HasMaxLength(500)
                    .HasColumnName("sFilter_9");

                entity.Property(e => e.SSiteId).HasColumnName("S_SiteID");

                entity.Property(e => e.SUtilityType)
                    .HasMaxLength(500)
                    .HasColumnName("s_Utility_Type");
            });

            modelBuilder.Entity<VWebRetailerLookupByInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Web_Retailer_Lookup_By_Invoice");

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.ClientCode).HasMaxLength(10);

                entity.Property(e => e.Retailer).HasMaxLength(20);
            });

            modelBuilder.Entity<VWebSiteDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Web_Site_Details");

                entity.Property(e => e.AccountCode).HasMaxLength(200);

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.BuildingNo).HasMaxLength(200);

                entity.Property(e => e.ClientCc)
                    .HasMaxLength(200)
                    .HasColumnName("ClientCC");

                entity.Property(e => e.ClientCode).HasMaxLength(10);

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.CompanyCode).HasMaxLength(255);

                entity.Property(e => e.DateAdded).HasColumnType("date");

                entity.Property(e => e.Dvn)
                    .HasMaxLength(255)
                    .HasColumnName("DVN");

                entity.Property(e => e.FixedKva).HasColumnName("FixedKVA");

                entity.Property(e => e.GridExitPoint).HasMaxLength(255);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InputType)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.NetworkId)
                    .HasMaxLength(200)
                    .HasColumnName("NetworkID");

                entity.Property(e => e.Product).HasMaxLength(50);

                entity.Property(e => e.Region).HasMaxLength(200);

                entity.Property(e => e.Region2).HasMaxLength(200);

                entity.Property(e => e.RetailerName).HasMaxLength(50);

                entity.Property(e => e.RetailerSiteRef).HasMaxLength(200);

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteLocation).HasMaxLength(200);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(50);

                entity.Property(e => e.TimeAdded).HasColumnType("date");
            });

            modelBuilder.Entity<VWebSiteRetailerFilter>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Web_Site_Retailer_Filters");

                entity.Property(e => e.AccountCode).HasMaxLength(200);

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.BillPayment).HasColumnName("Bill_Payment");

                entity.Property(e => e.BillVerification).HasColumnName("Bill_Verification");

                entity.Property(e => e.BillingFrequency)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Billing_Frequency");

                entity.Property(e => e.BpayCode)
                    .HasMaxLength(20)
                    .HasColumnName("BPayCode");

                entity.Property(e => e.BpayReference)
                    .HasMaxLength(20)
                    .HasColumnName("BPayReference");

                entity.Property(e => e.BuildingNo).HasMaxLength(200);

                entity.Property(e => e.CalSqMetres).HasColumnName("Cal_SqMetres");

                entity.Property(e => e.CarbonFactorArea)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Carbon_Factor_Area");

                entity.Property(e => e.ClientCc)
                    .HasMaxLength(200)
                    .HasColumnName("ClientCC");

                entity.Property(e => e.ClientCode).HasMaxLength(10);

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.CompanyCode).HasMaxLength(255);

                entity.Property(e => e.ContactAddressCity).HasMaxLength(200);

                entity.Property(e => e.ContactAddressLine1).HasMaxLength(200);

                entity.Property(e => e.ContactAddressLine2).HasMaxLength(200);

                entity.Property(e => e.ContactFloor).HasMaxLength(200);

                entity.Property(e => e.ContactMailAddressLine1).HasMaxLength(200);

                entity.Property(e => e.ContactName).HasMaxLength(200);

                entity.Property(e => e.ContactName2).HasMaxLength(200);

                entity.Property(e => e.ContactPhone).HasMaxLength(200);

                entity.Property(e => e.CustomerNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("Customer_Number");

                entity.Property(e => e.DataEntryNotes).HasColumnName("Data_Entry_Notes");

                entity.Property(e => e.DateAdded).HasColumnType("date");

                entity.Property(e => e.DateCeased).HasColumnType("date");

                entity.Property(e => e.DmType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("DM_Type");

                entity.Property(e => e.Dvn)
                    .HasMaxLength(255)
                    .HasColumnName("DVN");

                entity.Property(e => e.EdiCreated)
                    .HasMaxLength(255)
                    .HasColumnName("EDI_Created");

                entity.Property(e => e.EmissionsCode)
                    .HasMaxLength(200)
                    .HasColumnName("Emissions_Code");

                entity.Property(e => e.Entity).HasMaxLength(200);

                entity.Property(e => e.FixedKva).HasColumnName("FixedKVA");

                entity.Property(e => e.FloorUtilityFactor).HasColumnName("Floor_Utility_Factor");

                entity.Property(e => e.GreenEnergyPercentage).HasColumnName("Green_Energy_Percentage");

                entity.Property(e => e.GridExitPoint).HasMaxLength(255);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.InputType)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.LeaseExpiry).HasColumnType("date");

                entity.Property(e => e.LeaseType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MasterList).HasColumnName("Master_List");

                entity.Property(e => e.MasterListSiteType).HasMaxLength(255);

                entity.Property(e => e.MaxAq).HasColumnName("Max_AQ");

                entity.Property(e => e.Mdq).HasColumnName("MDQ");

                entity.Property(e => e.MeterAccessDetails)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("Meter_Access_Details");

                entity.Property(e => e.MeterDataAgent)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Meter_Data_Agent");

                entity.Property(e => e.MeterNo).HasMaxLength(255);

                entity.Property(e => e.MeterType).HasMaxLength(200);

                entity.Property(e => e.MinAq).HasColumnName("Min_AQ");

                entity.Property(e => e.NetworkCompany).HasMaxLength(255);

                entity.Property(e => e.NetworkId)
                    .HasMaxLength(200)
                    .HasColumnName("NetworkID");

                entity.Property(e => e.Nmi)
                    .HasMaxLength(255)
                    .HasColumnName("NMI");

                entity.Property(e => e.OrderNumber).HasMaxLength(255);

                entity.Property(e => e.OrgId).HasColumnName("Org_ID");

                entity.Property(e => e.ParentCustomer).HasMaxLength(255);

                entity.Property(e => e.PowerFactor)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Region).HasMaxLength(200);

                entity.Property(e => e.Region2).HasMaxLength(200);

                entity.Property(e => e.RegistryAddress)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Address");

                entity.Property(e => e.RegistryChannelCount).HasColumnName("Registry_Channel_Count");

                entity.Property(e => e.RegistryChargeableCapacity).HasColumnName("Registry_Chargeable_Capacity");

                entity.Property(e => e.RegistryGenerationCapacity).HasColumnName("Registry_Generation_Capacity");

                entity.Property(e => e.RegistryInstallDetails).HasColumnName("Registry_Install_Details");

                entity.Property(e => e.RegistryLossCat1)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Loss_Cat_1");

                entity.Property(e => e.RegistryLossCat2)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Loss_Cat_2");

                entity.Property(e => e.RegistryMep)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_MEP");

                entity.Property(e => e.RegistryMeterCat).HasColumnName("Registry_Meter_Cat");

                entity.Property(e => e.RegistryMeterMultiplier).HasColumnName("Registry_Meter_Multiplier");

                entity.Property(e => e.RegistryMeterType)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_MeterType");

                entity.Property(e => e.RegistryNetwork)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Network");

                entity.Property(e => e.RegistryPoc)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_POC");

                entity.Property(e => e.RegistryPriceCat)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Price_Cat");

                entity.Property(e => e.RegistryStatus)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Status");

                entity.Property(e => e.RegistryUnmeteredLoad)
                    .HasMaxLength(255)
                    .HasColumnName("Registry_Unmetered_Load");

                entity.Property(e => e.RetailId)
                    .HasMaxLength(255)
                    .HasColumnName("RetailID");

                entity.Property(e => e.RetailerCode).HasMaxLength(20);

                entity.Property(e => e.RetailerName).HasMaxLength(50);

                entity.Property(e => e.RetailerSiteRef).HasMaxLength(200);

                entity.Property(e => e.SiteConsolidationFlag)
                    .HasMaxLength(255)
                    .HasColumnName("Site_Consolidation_Flag");

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteLocation).HasMaxLength(200);

                entity.Property(e => e.SiteLocationDd)
                    .HasMaxLength(255)
                    .HasColumnName("SiteLocationDD");

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(255);

                entity.Property(e => e.SiteTypeCode)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SiteTypeSubCat)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Site_Type_Sub_Cat");

                entity.Property(e => e.StartDate).HasColumnType("date");

                entity.Property(e => e.SubClientCode).HasMaxLength(255);

                entity.Property(e => e.SysSitesTimestamp)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("Sys_Sites_Timestamp");

                entity.Property(e => e.TaxClass)
                    .HasMaxLength(255)
                    .HasColumnName("Tax_Class");

                entity.Property(e => e.TerminationFee)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Termination_fee");

                entity.Property(e => e.TimeAdded).HasColumnType("date");

                entity.Property(e => e.Transformer)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Vhaaddress1)
                    .HasMaxLength(255)
                    .HasColumnName("VHAAddress1");

                entity.Property(e => e.Vhaaddress2)
                    .HasMaxLength(255)
                    .HasColumnName("VHAAddress2");

                entity.Property(e => e.Vhaaddress3)
                    .HasMaxLength(255)
                    .HasColumnName("VHAAddress3");
            });

            modelBuilder.Entity<VWebSiteSearch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Web_Site_Search");

                entity.Property(e => e.AccountNo).HasMaxLength(200);

                entity.Property(e => e.ClientRef).HasMaxLength(200);

                entity.Property(e => e.Icp)
                    .HasMaxLength(255)
                    .HasColumnName("ICP");

                entity.Property(e => e.Product).HasMaxLength(50);

                entity.Property(e => e.Region).HasMaxLength(200);

                entity.Property(e => e.RetailerName).HasMaxLength(50);

                entity.Property(e => e.SFilter1)
                    .HasMaxLength(500)
                    .HasColumnName("sFilter_1");

                entity.Property(e => e.SFilter10)
                    .HasMaxLength(500)
                    .HasColumnName("sFilter_10");

                entity.Property(e => e.SFilter2)
                    .HasMaxLength(500)
                    .HasColumnName("sFilter_2");

                entity.Property(e => e.SFilter3)
                    .HasMaxLength(500)
                    .HasColumnName("sFilter_3");

                entity.Property(e => e.SFilter4)
                    .HasMaxLength(500)
                    .HasColumnName("sFilter_4");

                entity.Property(e => e.SFilter5)
                    .HasMaxLength(500)
                    .HasColumnName("sFilter_5");

                entity.Property(e => e.SFilter6)
                    .HasMaxLength(500)
                    .HasColumnName("sFilter_6");

                entity.Property(e => e.SFilter7)
                    .HasMaxLength(500)
                    .HasColumnName("sFilter_7");

                entity.Property(e => e.SFilter8)
                    .HasMaxLength(500)
                    .HasColumnName("sFilter_8");

                entity.Property(e => e.SFilter9)
                    .HasMaxLength(500)
                    .HasColumnName("sFilter_9");

                entity.Property(e => e.SSiteId).HasColumnName("S_SiteID");

                entity.Property(e => e.SUtilityType)
                    .HasMaxLength(500)
                    .HasColumnName("s_Utility_Type");

                entity.Property(e => e.SiteDescription).HasMaxLength(255);

                entity.Property(e => e.SiteLocation).HasMaxLength(200);

                entity.Property(e => e.SiteName).HasMaxLength(200);

                entity.Property(e => e.SiteStatus).HasMaxLength(200);

                entity.Property(e => e.SiteType).HasMaxLength(50);
            });

            modelBuilder.Entity<VWebSummaryAccrualsDollarsConsumption>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Web_Summary_Accruals_Dollars_Consumption");

                entity.Property(e => e.EsConsumptionDailyAvg).HasColumnName("ES_Consumption_Daily_Avg");

                entity.Property(e => e.EsDollarsDailyAvg).HasColumnName("ES_Dollars_Daily_Avg");

                entity.Property(e => e.EsMonth).HasColumnName("ES_Month");

                entity.Property(e => e.EsPeriod)
                    .HasColumnType("date")
                    .HasColumnName("ES_Period");

                entity.Property(e => e.EsSiteId).HasColumnName("ES_SiteID");

                entity.Property(e => e.EsSourceType)
                    .HasMaxLength(255)
                    .HasColumnName("ES_Source_Type");

                entity.Property(e => e.EsYear).HasColumnName("ES_Year");
            });

            modelBuilder.Entity<VWebSummaryActual>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Web_Summary_Actuals");

                entity.Property(e => e.ActualConsumption).HasColumnName("Actual_Consumption");

                entity.Property(e => e.ActualDollars).HasColumnName("Actual_Dollars");

                entity.Property(e => e.EnvConsumption).HasColumnName("Env_Consumption");

                entity.Property(e => e.EnvDollars).HasColumnName("Env_Dollars");

                entity.Property(e => e.SBatchMonth)
                    .HasColumnType("date")
                    .HasColumnName("S_Batch_Month");

                entity.Property(e => e.SFinancialYear).HasColumnName("s_Financial_Year");

                entity.Property(e => e.SMonth).HasColumnName("S_Month");

                entity.Property(e => e.SYear).HasColumnName("S_Year");
            });

            modelBuilder.Entity<VWebSummaryBudgetDollarsConsumption>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Web_Summary_Budget_Dollars_Consumption");

                entity.Property(e => e.EsConsumptionDailyAvg).HasColumnName("ES_Consumption_Daily_Avg");

                entity.Property(e => e.EsDollarsDailyAvg).HasColumnName("ES_Dollars_Daily_Avg");

                entity.Property(e => e.EsMonth).HasColumnName("ES_Month");

                entity.Property(e => e.EsPeriod)
                    .HasColumnType("date")
                    .HasColumnName("ES_Period");

                entity.Property(e => e.EsSiteId).HasColumnName("ES_SiteID");

                entity.Property(e => e.EsYear).HasColumnName("ES_Year");
            });

            modelBuilder.Entity<VWebSummaryEnvDollarsConsumption>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Web_Summary_Env_Dollars_Consumption");

                entity.Property(e => e.EsConsumptionDailyAvg).HasColumnName("ES_Consumption_Daily_Avg");

                entity.Property(e => e.EsDollarsDailyAvg).HasColumnName("ES_Dollars_Daily_Avg");

                entity.Property(e => e.EsMonth).HasColumnName("ES_Month");

                entity.Property(e => e.EsPeriod)
                    .HasColumnType("date")
                    .HasColumnName("ES_Period");

                entity.Property(e => e.EsSiteId).HasColumnName("ES_SiteID");

                entity.Property(e => e.EsSourceType)
                    .HasMaxLength(255)
                    .HasColumnName("ES_Source_Type");

                entity.Property(e => e.EsYear).HasColumnName("ES_Year");
            });

            modelBuilder.Entity<VWebSummaryEnvDollarsConsumptionAccrual>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Web_Summary_Env_Dollars_Consumption_Accruals");

                entity.Property(e => e.EsConsumptionDailyAvg).HasColumnName("ES_Consumption_Daily_Avg");

                entity.Property(e => e.EsDollarsDailyAvg).HasColumnName("ES_Dollars_Daily_Avg");

                entity.Property(e => e.EsMonth).HasColumnName("ES_Month");

                entity.Property(e => e.EsPeriod)
                    .HasColumnType("date")
                    .HasColumnName("ES_Period");

                entity.Property(e => e.EsSiteId).HasColumnName("ES_SiteID");

                entity.Property(e => e.EsSourceType)
                    .HasMaxLength(255)
                    .HasColumnName("ES_Source_Type");

                entity.Property(e => e.EsYear).HasColumnName("ES_Year");
            });

            modelBuilder.Entity<VWebSummaryInvoicesActualsFinancial>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Web_Summary_Invoices_Actuals_Financial");

                entity.Property(e => e.ActualDollars).HasColumnName("Actual_Dollars");

                entity.Property(e => e.ActualUnitsTotal).HasColumnName("Actual_Units_Total");

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.BudgetDollars).HasColumnName("Budget_Dollars");

                entity.Property(e => e.BudgetUnitsTotal).HasColumnName("Budget_Units_Total");

                entity.Property(e => e.EnergyType).HasMaxLength(50);
            });

            modelBuilder.Entity<VWebSummaryInvoicesActualsFinancial1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Web_Summary_Invoices_Actuals_Financial1");

                entity.Property(e => e.ActualDollars)
                    .HasColumnType("numeric(38, 8)")
                    .HasColumnName("Actual_Dollars");

                entity.Property(e => e.ActualUnitsTotal).HasColumnName("Actual_Units_Total");

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.BudgetDollars)
                    .HasColumnType("numeric(38, 10)")
                    .HasColumnName("Budget_Dollars");

                entity.Property(e => e.BudgetUnitsTotal).HasColumnName("Budget_Units_Total");

                entity.Property(e => e.EnergyType).HasMaxLength(255);
            });

            modelBuilder.Entity<VWebSummaryInvoicesActualsFinancialBase>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("v_Web_Summary_Invoices_Actuals_Financial_Base");

                entity.Property(e => e.ActualDollars)
                    .HasColumnType("money")
                    .HasColumnName("Actual_Dollars");

                entity.Property(e => e.ActualUnitsTotal).HasColumnName("Actual_Units_Total");

                entity.Property(e => e.BatchMonth).HasColumnType("date");

                entity.Property(e => e.BudgetDollars)
                    .HasColumnType("money")
                    .HasColumnName("Budget_Dollars");

                entity.Property(e => e.BudgetUnitsTotal).HasColumnName("Budget_Units_Total");

                entity.Property(e => e.EnergyType).HasMaxLength(50);

                entity.Property(e => e.ReadTypeCode).HasMaxLength(10);

                entity.Property(e => e.SiteType).HasMaxLength(50);

                entity.Property(e => e.SpinvNumber).HasColumnName("SPInvNumber");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
